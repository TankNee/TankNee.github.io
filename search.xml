<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo豆瓣文章插件</title>
      <link href="/2020/07/08/Hexo%E8%B1%86%E7%93%A3%E6%96%87%E7%AB%A0%E6%8F%92%E4%BB%B6/"/>
      <url>/2020/07/08/Hexo%E8%B1%86%E7%93%A3%E6%96%87%E7%AB%A0%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Github项目地址"><a href="#Github项目地址" class="headerlink" title="Github项目地址"></a>Github项目地址</h2><p>github地址: <a href="https://github.com/TankNee/hexo-douban-card">https://github.com/TankNee/hexo-douban-card</a></p><blockquote><p>如果可以的话,希望你能给我一个star⭐</p></blockquote><p>npm地址: <a href="https://www.npmjs.com/package/hexo-douban-card">https://www.npmjs.com/package/hexo-douban-card</a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><div class="douban-card-block">    <a class="douban-card" href="https://movie.douban.com/subject/1329562">        <div class="douban-card-bgimg" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2171302998.jpg');"></div>        <div class="douban-card-left">            <div class="douban-card-img" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2171302998.jpg');"></div>            <div class="douban-card-status">灯影绰约</div>        </div>        <div class="douban-card-right">            <div class="douban-card-item"><span>电影名: </span><strong>头文字D頭文字D(2005)</strong></div>            <div class="douban-card-item"><span>导演: </span><span>刘伟强/麦兆辉</span></div>            <div class="douban-card-item"><span>主演: </span><span>周杰伦/陈冠希</span></div>            <div class="douban-card-item"><span>上映时间: </span><span>2005-06-23(中国大陆/中国香港)</span></div>            <div class="douban-card-item"><span>评分: </span><span>7.7</span></div>        </div>    </a></div><style>    .douban-card-block {    display: flex;    justify-content: center;    align-items: center;    width: 100%;    max-height: 400px;}.douban-card {    display: flex;    margin: 30px 10px;    padding: 15px;    border-radius: 15px;    position: relative;    justify-content: center;    align-items: center;    overflow: hidden;    color: antiquewhite;    text-decoration: none;}.douban-card:hover {    text-decoration: none;}.douban-card-bgimg {    position: absolute;    width: 115%;    height: 115%;    filter: blur(15px) brightness(0.6);    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-img {    position: relative;    height: 130px;    width: 80px;    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-left:hover .douban-card-img {    filter: blur(5px) brightness(0.6);    transform: perspective(800px) rotateX(180deg);}.douban-card-left .douban-card-img {    transition: all 500ms ease;}.douban-card-left {    position: relative;    display: flex;    flex-direction: column;    align-items: center;}.douban-card-left .douban-card-status {    height: 130px;    width: 80px;    text-align: center;    font-weight: bold;    position: absolute;    left: 0;    top: 30%;    transform: rotateX(180deg);    backface-visibility: hidden;    transition: all 500ms ease;}.douban-card-left:hover .douban-card-status {    transform: perspective(800px) rotateX(0deg);}.douban-card-right {    position: relative;    display: flex;    flex-direction: column;    margin-left: 12px;    font-size: 16px;    font-family: "Courier New", Courier, monospace;    line-height: 1.3;    color: antiquewhite;}.douban-card-item {    margin-top: 4px;}</style><div class="douban-card-block">    <a class="douban-card" href="https://book.douban.com/subject/33457122">        <div class="douban-card-bgimg" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s33309978.jpg');">        </div>        <div class="douban-card-left">            <div class="douban-card-img" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s33309978.jpg');">            </div>            <div class="douban-card-status">见字如晤</div>        </div>        <div class="douban-card-right" style="line-height: 1.7;">            <div class="douban-card-item"><span>书名: </span><strong>人生海海</strong></div>            <div class="douban-card-item"><span>作者: </span><span>麥家</span></div>            <div class="douban-card-item"><span>出版年份: </span><span>2019-7-1</span></div>            <div class="douban-card-item"><span>评分: </span><span>8.4</span></div>        </div>    </a></div><style>    .douban-card-block {    display: flex;    justify-content: center;    align-items: center;    width: 100%;    max-height: 400px;}.douban-card {    display: flex;    margin: 30px 10px;    padding: 15px;    border-radius: 15px;    position: relative;    justify-content: center;    align-items: center;    overflow: hidden;    color: antiquewhite;    text-decoration: none;}.douban-card:hover {    text-decoration: none;}.douban-card-bgimg {    position: absolute;    width: 115%;    height: 115%;    filter: blur(15px) brightness(0.6);    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-img {    position: relative;    height: 130px;    width: 80px;    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-left:hover .douban-card-img {    filter: blur(5px) brightness(0.6);    transform: perspective(800px) rotateX(180deg);}.douban-card-left .douban-card-img {    transition: all 500ms ease;}.douban-card-left {    position: relative;    display: flex;    flex-direction: column;    align-items: center;}.douban-card-left .douban-card-status {    height: 130px;    width: 80px;    text-align: center;    font-weight: bold;    position: absolute;    left: 0;    top: 30%;    transform: rotateX(180deg);    backface-visibility: hidden;    transition: all 500ms ease;}.douban-card-left:hover .douban-card-status {    transform: perspective(800px) rotateX(0deg);}.douban-card-right {    position: relative;    display: flex;    flex-direction: column;    margin-left: 12px;    font-size: 16px;    font-family: "Courier New", Courier, monospace;    line-height: 1.3;    color: antiquewhite;}.douban-card-item {    margin-top: 4px;}</style><div class="douban-card-block"><a class="douban-card" href="https://music.douban.com/subject/6120125"><div class="douban-card-bgimg" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/m/public/s7056097.jpg');"></div><div class="douban-card-left"><div class="douban-card-img" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/m/public/s7056097.jpg');"></div>            <div class="douban-card-status">余音绕梁</div>        </div><div class="douban-card-right"><div class="douban-card-item"><span>音乐名: </span><strong>我怀念的</strong></div><div class="douban-card-item"><span>表演者: </span><span>孙燕姿</span></div><div class="douban-card-item"><span>发行时间: </span><span>2007-03-09</span></div><div class="douban-card-item"><span>评分: </span><span>9.3</span></div></div></a></div><style>    .douban-card-block {    display: flex;    justify-content: center;    align-items: center;    width: 100%;    max-height: 400px;}.douban-card {    display: flex;    margin: 30px 10px;    padding: 15px;    border-radius: 15px;    position: relative;    justify-content: center;    align-items: center;    overflow: hidden;    color: antiquewhite;    text-decoration: none;}.douban-card:hover {    text-decoration: none;}.douban-card-bgimg {    position: absolute;    width: 115%;    height: 115%;    filter: blur(15px) brightness(0.6);    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-img {    position: relative;    height: 130px;    width: 80px;    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-left:hover .douban-card-img {    filter: blur(5px) brightness(0.6);    transform: perspective(800px) rotateX(180deg);}.douban-card-left .douban-card-img {    transition: all 500ms ease;}.douban-card-left {    position: relative;    display: flex;    flex-direction: column;    align-items: center;}.douban-card-left .douban-card-status {    height: 130px;    width: 80px;    text-align: center;    font-weight: bold;    position: absolute;    left: 0;    top: 30%;    transform: rotateX(180deg);    backface-visibility: hidden;    transition: all 500ms ease;}.douban-card-left:hover .douban-card-status {    transform: perspective(800px) rotateX(0deg);}.douban-card-right {    position: relative;    display: flex;    flex-direction: column;    margin-left: 12px;    font-size: 16px;    font-family: "Courier New", Courier, monospace;    line-height: 1.3;    color: antiquewhite;}.douban-card-item {    margin-top: 4px;}</style><h3 id="参数阐述"><a href="#参数阐述" class="headerlink" title="参数阐述"></a>参数阐述</h3><ul><li><p>第一项<code>douban</code> 代表插件名</p></li><li><p>第二项可选:<code>movie</code>,<code>book</code>,<code>music</code></p></li><li><p>第三项请填入对应的<code>id</code>例如:</p></li></ul><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/07/2020070821522816eaefa.png" alt=""></p><p>填写subject后面的那串数字就好</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> douban </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性回归的简洁实现</title>
      <link href="/2020/07/07/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/07/07/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>个人理解是通过建立反馈机制,逐层优化筛选最优的权重参数,以达到对最佳算法的逼近.也就是通过数值解逼近解析解.</p><h3 id="预测二手房价格"><a href="#预测二手房价格" class="headerlink" title="预测二手房价格"></a>预测二手房价格</h3><p>设房屋的面积为$x_1$，房龄为$x_2$，售出价格为$y$。我们需要建立基于输入$x_1$和$x_2$来计算输出$y$的表达式，也就是模型（model）。顾名思义，线性回归假设输出与各个输入之间是线性关系：</p><p>$$<br>\hat{y} = x_1 w_1 + x_2 w_2 + b<br>$$<br>很明显我们能看到这是一个线性表达式，其中有两个参数会影响最终的输出结果，我们要做的事情就是找出最佳的$w_1$与$w_2$来实现对$y$的预测!</p><h3 id="训练数据-Train-Data"><a href="#训练数据-Train-Data" class="headerlink" title="训练数据(Train Data)"></a>训练数据(Train Data)</h3><p>我们通常收集一系列的真实数据，例如多栋房屋的真实售出价格和它们对应的面积和房龄。我们希望在这个数据上面寻找模型参数来使模型的预测价格与真实价格的误差最小。在机器学习术语里，该数据集被称为训练数据集（training data set）或训练集（training set），一栋房屋被称为一个样本（sample），其真实售出价格叫作标签（label），用来预测标签的两个因素叫作特征（feature）。特征用来表征样本的特点。</p><p>假设我们采集的样本数为$n$，索引为$i$的样本的特征为$x_1^{(i)}$和$x_2^{(i)}$，标签为$y^{(i)}$。对于索引为$i$的房屋，线性回归模型的房屋价格预测表达式为</p><p>$$<br>\hat{y}^{(i)} = x_1^{(i)} w_1 + x_2^{(i)} w_2 + b.<br>$$</p><h3 id="损失函数-Loss-Function"><a href="#损失函数-Loss-Function" class="headerlink" title="损失函数(Loss Function)"></a>损失函数(Loss Function)</h3><p>在模型训练中，我们需要衡量价格预测值与真实值之间的误差。通常我们会选取一个非负数作为误差，且数值越小表示误差越小。一个常用的选择是平方函数。它在评估索引为$i$的样本误差的表达式为</p><p>$$<br>\ell^{(i)}(w_1, w_2, b) = \frac{1}{2} \left(\hat{y}^{(i)} - y^{(i)}\right)^2,<br>$$</p><p>其中常数$\frac{1}{2}$使对平方项求导后的常数系数为1，这样在形式上稍微简单一些。显然，误差越小表示预测价格与真实价格越相近，且当二者相等时误差为0。给定训练数据集，这个误差只与模型参数相关，因此我们将它记为以模型参数为参数的函数。在机器学习里，将衡量误差的函数称为损失函数（loss function）。这里使用的平方误差函数也称为平方损失（square loss）。</p><p>通常，我们用训练数据集中所有样本误差的平均来衡量模型预测的质量，即</p><p>$$<br>\ell(w_1, w_2, b) =\frac{1}{n} \sum_{i=1}^n \ell^{(i)}(w_1, w_2, b) =\frac{1}{n} \sum_{i=1}^n \frac{1}{2}\left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right)^2.<br>$$</p><p>在模型训练中，我们希望找出一组模型参数，记为 $w_1^*, w_2^*, b^*$ ，来使训练样本平均损失最小：</p><p>$$<br>w_1^*, w_2^*, b^* = \operatorname*{argmin}_{w_1, w_2, b}\  \ell(w_1, w_2, b).<br>$$</p><h3 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h3><p>当模型和损失函数形式较为简单时，上面的误差最小化问题的解可以直接用公式表达出来。这类解叫作解析解（analytical solution）。本节使用的线性回归和平方误差刚好属于这个范畴。然而，大多数深度学习模型并没有解析解，只能通过优化算法有限次迭代模型参数来尽可能降低损失函数的值。这类解叫作数值解（numerical solution）。</p><p>在求数值解的优化算法中，小批量随机梯度下降（mini-batch stochastic gradient descent）在深度学习中被广泛使用。它的算法很简单：先选取一组模型参数的初始值，如随机选取；接下来对参数进行多次迭代，使每次迭代都可能降低损失函数的值。在每次迭代中，先随机均匀采样一个由固定数目训练数据样本所组成的小批量（mini-batch）$\mathcal{B}$，然后求小批量中数据样本的平均损失有关模型参数的导数（梯度），最后用此结果与预先设定的一个正数的乘积作为模型参数在本次迭代的减小量。</p><p>在训练本节讨论的线性回归模型的过程中，模型的每个参数将作如下迭代：</p><p>$$<br>\begin{aligned}<br>w_1 &amp;\leftarrow w_1 -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b)  }{\partial w_1} = w_1 -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}x_1^{(i)} \left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right),\<br>w_2 &amp;\leftarrow w_2 -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b)  }{\partial w_2} = w_2 -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}x_2^{(i)} \left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right),\<br>b &amp;\leftarrow b -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b)  }{\partial b} = b -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}\left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right).<br>\end{aligned}<br>$$<br>迭代以获取最优的参数</p><h3 id="数据归一化和标准化"><a href="#数据归一化和标准化" class="headerlink" title="数据归一化和标准化"></a>数据归一化和标准化</h3><p>不同数值的差异对结果的影响是完全不同的.例如身高从1.6到1.8那么他的体重可能就会从50到100,可见身高变化的幅度相对体重要小得多,也就是说体重拥有更好的非线性决断能力!</p><p>因此我们需要通过归一化与标准化,让我们所有的特征值都统一到一个标准的区间!</p><h3 id="线性函数归一化"><a href="#线性函数归一化" class="headerlink" title="线性函数归一化"></a>线性函数归一化</h3><p>$$<br>X_{normal}=\frac{X-X_{min}}{X_{max}-X{min}}<br>$$</p><ul><li>$X$原始特征数据</li><li>$X_{min},X_{max}$所有样本中的最小值与最大值</li><li>$X_{normal}$归一化之后的数据,在$[0,1]$之间</li></ul><h3 id="零均值标准化"><a href="#零均值标准化" class="headerlink" title="零均值标准化"></a>零均值标准化</h3><p>$$<br>X_{normal}=\frac{X-\mu}{\sigma}<br>$$</p><ul><li>$\mu$均值</li><li>$\sigma$标准差,一般设为1</li><li>$X_{normal}$归一化之后的数据</li></ul><hr><h2 id="数学基础附录"><a href="#数学基础附录" class="headerlink" title="数学基础附录"></a>数学基础附录</h2><h3 id="满秩的概念"><a href="#满秩的概念" class="headerlink" title="满秩的概念"></a>满秩的概念</h3><h4 id="定义一"><a href="#定义一" class="headerlink" title="定义一"></a>定义一</h4><p>使用初等行变化将矩阵化简为阶梯型矩阵,则矩阵中非零行的个数就是该矩阵的秩。</p><p>当矩阵的秩等于矩阵的行数时，就称该矩阵为满秩矩阵。</p><h4 id="定义二"><a href="#定义二" class="headerlink" title="定义二"></a>定义二</h4><p>若该矩阵的某一<code>r</code>阶子式的行列式不为零,并且所有大于<code>r</code>阶的子式的行列式全为0,那么就称该矩阵的秩为<code>r</code>,使用符号记为:<br>$$<br>A_{m*n}:R(A)=r<br>$$<br>如果有以下的等式<br>$$<br>R(A)=m<br>$$</p><p>$$<br>R(A)=n<br>$$</p><p>那就称之为行满秩矩阵或者是列满秩矩阵!</p><p>若有$m=n$则称之为满秩矩阵,可逆矩阵,非奇异矩阵.</p><h3 id="似然函数"><a href="#似然函数" class="headerlink" title="似然函数"></a>似然函数</h3><p>对于函数$p=(x|\theta)$而言,如果我们将$\theta$设为常量,那么我们将得到一个关于$x$的函数,也就是关于$x$的概率分布.</p><p>而当我们将$\theta$当作变量,将$x$当作常量时,我们就得到了关于$\theta$的极大似然函数!</p><p>对于极大似然函数,我们可以给出一个简单的示例:</p><p>对一枚硬币随机抛掷十次,得到一个结果组:$x=HHTTHTHHHH$,也就是一组正反序列,很显然,对于抛掷硬币的实验,其分布是一组二项分布,不是正面就是反面,那么我们可以很简单的得到一个表达式:$x=\theta^7(1-\theta)^3$,对于$\theta$的不同取值,表达式也会有不同的结果,但其变量是在$[0,1]$上的,所以我们可以取遍其所有的值,获得一张表:</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/07/2020070663a16a4fd6848.png" alt="image-20200706110107376"></p><p>可以看到在0.7时取到最大值,也就是最大似然估计值.显然,由于样本数过少,这个值是不太可能的一个值.</p><p>所有我们可以认为,这个等式的核心意思都是在给一个theta和一个样本x的时候，整个事件发生的可能性多大</p><h3 id="贝叶斯公式-Bayes’-theorem"><a href="#贝叶斯公式-Bayes’-theorem" class="headerlink" title="贝叶斯公式(Bayes’ theorem)"></a>贝叶斯公式(Bayes’ theorem)</h3><p>$$<br>P(A|B)=\frac{P(A)P(B|A)}{P(B)}<br>$$</p><h3 id="凹函数与凸函数"><a href="#凹函数与凸函数" class="headerlink" title="凹函数与凸函数"></a>凹函数与凸函数</h3><h4 id="凸函数"><a href="#凸函数" class="headerlink" title="凸函数"></a>凸函数</h4><p>$$<br>f(\frac{x_1+x_2}{2})&gt;\frac{f(x_1)+f(x_2)}{2}<br>$$</p><p>上面是一个特殊的定义,更加一般的定义是:<br>$$<br>f(ax_1+bx_2)&gt;af(x_1)+bf(x_2)。    a+b=1<br>$$<br>那么凹函数也就是凸函数取反，即可得到。</p><h4 id="凹函数"><a href="#凹函数" class="headerlink" title="凹函数"></a>凹函数</h4><p>$$<br>f(ax_1+bx_2)&lt;af(x_1)+bf(x_2)。    a+b=1<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> AiLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性回归 </tag>
            
            <tag> neural network </tag>
            
            <tag> machine learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twenty</title>
      <link href="/2020/07/04/twenty/"/>
      <url>/2020/07/04/twenty/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本想写几句无关痛痒的话，放几张莫名其妙的图片就了事，但今天做完工程实训的答辩，确实有很多很多的话想说出来。无意写成实训的心得感悟，只是于此往前回顾时有种一眼<strong>万年</strong>的<strong>陌生</strong>感。一年多前，用着蹩脚的安卓写一个烂的不行的<code>ToDoList</code>现在想想虽然觉得有点可笑，但那种翻遍万书仍然不得答案的感觉仍然会一下涌上来。</p><p>成长这个词已经用烂了，我没有长大，我只是对这些都熟悉了，仅此而已。但我也拿不准我还是不是昨天躺下睡着前的那个我，或许是的，但为何今早掠过河边看对岸的<strong>藤架</strong>仍有种熟悉而陌生的感觉。</p><h2 id="噩梦一则"><a href="#噩梦一则" class="headerlink" title="噩梦一则"></a>噩梦一则</h2><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/07/20200703a8d6569dc3473.png" alt="记于6月4日03：26"></p><h2 id="Demo一支"><a href="#Demo一支" class="headerlink" title="Demo一支"></a>Demo一支</h2><iframe src="//player.bilibili.com/player.html?aid=541134374&bvid=BV1zi4y1G7rB&cid=208480513&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><h2 id="彩蛋一副"><a href="#彩蛋一副" class="headerlink" title="彩蛋一副"></a>彩蛋一副</h2><blockquote><p>一段简单的伪代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">AliPay</span> <span class="keyword">from</span> <span class="string">&#x27;YourApps&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Content</span> <span class="keyword">from</span> <span class="string">&#x27;ThisArticle&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> words = <span class="title class_">Content</span>.<span class="property">words</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> redPocketToken = words.<span class="title function_">map</span>(<span class="function">(<span class="params">word</span>) =&gt;</span> word.<span class="property">isBold</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">AliPay</span>.<span class="title function_">launch</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">AliPayMainScreen</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> searchComponent = <span class="title class_">AliPayMainScreen</span>.<span class="title function_">getSearchComponent</span>();</span><br><span class="line">searchComponent.<span class="title function_">search</span>(<span class="string">&#x27;红包&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">RedPocketPage</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> redPocketTokenComponent = <span class="title class_">RedPocketPage</span>.<span class="title function_">getRedPocketTokenComponent</span>();</span><br><span class="line">redPocketTokenComponent.<span class="title function_">search</span>(redPocketToken).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Congratulation!&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>Tips：如果你实在看不懂并且找不到口令，那我这提示也太没意思了。</p></blockquote><h2 id="近日观影一则"><a href="#近日观影一则" class="headerlink" title="近日观影一则"></a>近日观影一则</h2><div class="douban-card-block">    <a class="douban-card" href="https://movie.douban.com/subject/1329562">        <div class="douban-card-bgimg" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2171302998.jpg');"></div>        <div class="douban-card-left">            <div class="douban-card-img" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/photo/s_ratio_poster/public/p2171302998.jpg');"></div>            <div class="douban-card-status">灯影绰约</div>        </div>        <div class="douban-card-right">            <div class="douban-card-item"><span>电影名: </span><strong>头文字D頭文字D(2005)</strong></div>            <div class="douban-card-item"><span>导演: </span><span>刘伟强/麦兆辉</span></div>            <div class="douban-card-item"><span>主演: </span><span>周杰伦/陈冠希</span></div>            <div class="douban-card-item"><span>上映时间: </span><span>2005-06-23(中国大陆/中国香港)</span></div>            <div class="douban-card-item"><span>评分: </span><span>7.7</span></div>        </div>    </a></div><style>    .douban-card-block {    display: flex;    justify-content: center;    align-items: center;    width: 100%;    max-height: 400px;}.douban-card {    display: flex;    margin: 30px 10px;    padding: 15px;    border-radius: 15px;    position: relative;    justify-content: center;    align-items: center;    overflow: hidden;    color: antiquewhite;    text-decoration: none;}.douban-card:hover {    text-decoration: none;}.douban-card-bgimg {    position: absolute;    width: 115%;    height: 115%;    filter: blur(15px) brightness(0.6);    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-img {    position: relative;    height: 130px;    width: 80px;    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-left:hover .douban-card-img {    filter: blur(5px) brightness(0.6);    transform: perspective(800px) rotateX(180deg);}.douban-card-left .douban-card-img {    transition: all 500ms ease;}.douban-card-left {    position: relative;    display: flex;    flex-direction: column;    align-items: center;}.douban-card-left .douban-card-status {    height: 130px;    width: 80px;    text-align: center;    font-weight: bold;    position: absolute;    left: 0;    top: 30%;    transform: rotateX(180deg);    backface-visibility: hidden;    transition: all 500ms ease;}.douban-card-left:hover .douban-card-status {    transform: perspective(800px) rotateX(0deg);}.douban-card-right {    position: relative;    display: flex;    flex-direction: column;    margin-left: 12px;    font-size: 16px;    font-family: "Courier New", Courier, monospace;    line-height: 1.3;    color: antiquewhite;}.douban-card-item {    margin-top: 4px;}</style><h2 id="近日读书一则"><a href="#近日读书一则" class="headerlink" title="近日读书一则"></a>近日读书一则</h2><div class="douban-card-block">    <a class="douban-card" href="https://book.douban.com/subject/33457122">        <div class="douban-card-bgimg" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s33309978.jpg');">        </div>        <div class="douban-card-left">            <div class="douban-card-img" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/s/public/s33309978.jpg');">            </div>            <div class="douban-card-status">见字如晤</div>        </div>        <div class="douban-card-right" style="line-height: 1.7;">            <div class="douban-card-item"><span>书名: </span><strong>人生海海</strong></div>            <div class="douban-card-item"><span>作者: </span><span>麥家</span></div>            <div class="douban-card-item"><span>出版年份: </span><span>2019-7-1</span></div>            <div class="douban-card-item"><span>评分: </span><span>8.4</span></div>        </div>    </a></div><style>    .douban-card-block {    display: flex;    justify-content: center;    align-items: center;    width: 100%;    max-height: 400px;}.douban-card {    display: flex;    margin: 30px 10px;    padding: 15px;    border-radius: 15px;    position: relative;    justify-content: center;    align-items: center;    overflow: hidden;    color: antiquewhite;    text-decoration: none;}.douban-card:hover {    text-decoration: none;}.douban-card-bgimg {    position: absolute;    width: 115%;    height: 115%;    filter: blur(15px) brightness(0.6);    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-img {    position: relative;    height: 130px;    width: 80px;    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-left:hover .douban-card-img {    filter: blur(5px) brightness(0.6);    transform: perspective(800px) rotateX(180deg);}.douban-card-left .douban-card-img {    transition: all 500ms ease;}.douban-card-left {    position: relative;    display: flex;    flex-direction: column;    align-items: center;}.douban-card-left .douban-card-status {    height: 130px;    width: 80px;    text-align: center;    font-weight: bold;    position: absolute;    left: 0;    top: 30%;    transform: rotateX(180deg);    backface-visibility: hidden;    transition: all 500ms ease;}.douban-card-left:hover .douban-card-status {    transform: perspective(800px) rotateX(0deg);}.douban-card-right {    position: relative;    display: flex;    flex-direction: column;    margin-left: 12px;    font-size: 16px;    font-family: "Courier New", Courier, monospace;    line-height: 1.3;    color: antiquewhite;}.douban-card-item {    margin-top: 4px;}</style><h2 id="近日听歌一首"><a href="#近日听歌一首" class="headerlink" title="近日听歌一首"></a>近日听歌一首</h2><div class="douban-card-block"><a class="douban-card" href="https://music.douban.com/subject/6120125"><div class="douban-card-bgimg" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/m/public/s7056097.jpg');"></div><div class="douban-card-left"><div class="douban-card-img" style="background-image: url('https://images.weserv.nl/?url=https://img1.doubanio.com/view/subject/m/public/s7056097.jpg');"></div>            <div class="douban-card-status">余音绕梁</div>        </div><div class="douban-card-right"><div class="douban-card-item"><span>音乐名: </span><strong>我怀念的</strong></div><div class="douban-card-item"><span>表演者: </span><span>孙燕姿</span></div><div class="douban-card-item"><span>发行时间: </span><span>2007-03-09</span></div><div class="douban-card-item"><span>评分: </span><span>9.3</span></div></div></a></div><style>    .douban-card-block {    display: flex;    justify-content: center;    align-items: center;    width: 100%;    max-height: 400px;}.douban-card {    display: flex;    margin: 30px 10px;    padding: 15px;    border-radius: 15px;    position: relative;    justify-content: center;    align-items: center;    overflow: hidden;    color: antiquewhite;    text-decoration: none;}.douban-card:hover {    text-decoration: none;}.douban-card-bgimg {    position: absolute;    width: 115%;    height: 115%;    filter: blur(15px) brightness(0.6);    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-img {    position: relative;    height: 130px;    width: 80px;    background-size: 100%;    background-position: center;    background-repeat: no-repeat;}.douban-card-left:hover .douban-card-img {    filter: blur(5px) brightness(0.6);    transform: perspective(800px) rotateX(180deg);}.douban-card-left .douban-card-img {    transition: all 500ms ease;}.douban-card-left {    position: relative;    display: flex;    flex-direction: column;    align-items: center;}.douban-card-left .douban-card-status {    height: 130px;    width: 80px;    text-align: center;    font-weight: bold;    position: absolute;    left: 0;    top: 30%;    transform: rotateX(180deg);    backface-visibility: hidden;    transition: all 500ms ease;}.douban-card-left:hover .douban-card-status {    transform: perspective(800px) rotateX(0deg);}.douban-card-right {    position: relative;    display: flex;    flex-direction: column;    margin-left: 12px;    font-size: 16px;    font-family: "Courier New", Courier, monospace;    line-height: 1.3;    color: antiquewhite;}.douban-card-item {    margin-top: 4px;}</style><hr><p><em>谢谢你看到这里</em></p>]]></content>
      
      
      <categories>
          
          <category> Month </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度 </tag>
            
            <tag> 红包 </tag>
            
            <tag> 抽奖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云Ai训练营DayThree</title>
      <link href="/2020/06/06/aliyunAiDayThree/"/>
      <url>/2020/06/06/aliyunAiDayThree/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>今天的主题是制作AI识别相册.</p><h3 id="实例截图"><a href="#实例截图" class="headerlink" title="实例截图"></a>实例截图</h3><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/06/202006068b29c7c5ba9dc.png" alt=""></p><p>主要是实现对图片内容的解析识别,然后提取标签做一个双向分类.</p><h2 id="主要依赖项"><a href="#主要依赖项" class="headerlink" title="主要依赖项"></a>主要依赖项</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.67<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-codec/commons-codec --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.aliyun/aliyun-java-sdk-core --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.aliyun/facebody --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>facebody<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.aliyun/imagerecog --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>imagerecog<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前端是由简单的<code>Vue</code>来实现的.</p><blockquote><p>这里没有用SSR这些后端渲染的方法来实现,而是使用<code>AXIOS</code>来实现数据请求</p></blockquote><h2 id="主要逻辑"><a href="#主要逻辑" class="headerlink" title="主要逻辑"></a>主要逻辑</h2><p>在web端上传图片,通过<code>upload</code>组件将图片传到后端,后端将图片通过阿里云<code>SDK</code>传到对应的处理服务,然后获取识别结果,存入到本地,再做对前台的响应.</p><p>当前端点击网页上的标签时就会发起请求,后端服务从存在本地的<code>JSON</code>文件读取出数据,再进行响应.</p><h2 id="主要业务代码分析"><a href="#主要业务代码分析" class="headerlink" title="主要业务代码分析"></a>主要业务代码分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">recognizeScene</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 实例化图像识别请求</span></span><br><span class="line">        <span class="type">RecognizeSceneAdvanceRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecognizeSceneAdvanceRequest</span>();</span><br><span class="line">        <span class="comment">// 将图像流挂载到请求上</span></span><br><span class="line">        request.imageURLObject = inputStream;</span><br><span class="line">        <span class="comment">// 实例化一个标签缓冲区</span></span><br><span class="line">        List&lt;String&gt; labels = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化图像识别请求client</span></span><br><span class="line">            com.aliyun.imagerecog.<span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> getImageRecogClient(imageRecogEndpoint);</span><br><span class="line">            <span class="comment">// 获取识别结果</span></span><br><span class="line">            <span class="type">RecognizeSceneResponse</span> <span class="variable">resp</span> <span class="operator">=</span> client.recognizeSceneAdvance(request, <span class="keyword">new</span> <span class="title class_">RuntimeObject</span>());</span><br><span class="line">            <span class="keyword">for</span> (RecognizeSceneResponse.RecognizeSceneResponseDataTags tag: resp.data.tags) &#123;</span><br><span class="line">                <span class="comment">// 将识别结果加入到缓冲区中</span></span><br><span class="line">                labels.add(tag.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            <span class="comment">// 错误处理</span></span><br><span class="line">            log.error(<span class="string">&quot;ErrCode:&#123;&#125;, ErrMsg:&#123;&#125;, RequestId:&#123;&#125;&quot;</span>, e.getErrCode(), e.getErrMsg(), e.getRequestId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> labels;</span><br><span class="line">    &#125; labels;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面的代码实现了标签提取,并加入了链表.</p><blockquote><p>其他部分的业务代码大多类似雷同,不再赘述</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
            <tag> ai </tag>
            
            <tag> aliyun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云Ai训练营DayTwo</title>
      <link href="/2020/06/05/aliyunAiDayTwo/"/>
      <url>/2020/06/05/aliyunAiDayTwo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>今天的主题是使用<code>springboot starter</code>和阿里云的AI识别sdk构建一个身份证识别应用。</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/06/2020060603434bc5632e5.png/imgzip" alt="image-20200606123248413"></p><h3 id="主要依赖项"><a href="#主要依赖项" class="headerlink" title="主要依赖项"></a>主要依赖项</h3><ul><li><p><code>spring-boot-starter-web</code></p></li><li><p>页面模板<code>spring-boot-starter-thymeleaf</code></p></li><li><p>阿里云识别组件与json组件</p><ul><li>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ocr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.67<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="主要逻辑"><a href="#主要逻辑" class="headerlink" title="主要逻辑"></a>主要逻辑</h3><p>用户在web端上传身份证的正反面的照片，然后传递到<code>springboot</code>，然后由后端将图像传递到阿里云的识别服务，等待识别服务响应识别结果，最后将结果渲染到<code>thymeleaf</code>模板中返还给用户实现完整逻辑。</p><h3 id="代码实现分析解读"><a href="#代码实现分析解读" class="headerlink" title="代码实现分析解读"></a>代码实现分析解读</h3><h4 id="Controller层上传文件部分"><a href="#Controller层上传文件部分" class="headerlink" title="Controller层上传文件部分"></a>Controller层上传文件部分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(&quot;face&quot;)</span> MultipartFile face, <span class="meta">@RequestParam(&quot;back&quot;)</span> MultipartFile back,</span></span><br><span class="line"><span class="params">            RedirectAttributes attributes)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否上传了空文件</span></span><br><span class="line">        <span class="keyword">if</span> (face.isEmpty() || back.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 显示报错信息</span></span><br><span class="line">            attributes.addFlashAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Please select a file to upload.&quot;</span>);</span><br><span class="line">            <span class="comment">// 路由跳转</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化错误信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 根据相对路径获取上传目录的绝对路径</span></span><br><span class="line">            <span class="type">Path</span> <span class="variable">dir</span> <span class="operator">=</span> Paths.get(uploadDirectory);</span><br><span class="line">            <span class="comment">// 检测路径的存在性，避免因为路径不存在而报错</span></span><br><span class="line">            <span class="keyword">if</span> (!Files.exists(dir)) &#123;</span><br><span class="line">                Files.createDirectories(dir);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 个人感觉下面两部分的空检测是不必要的，上面已经检测过一遍了</span></span><br><span class="line">            <span class="keyword">if</span> (!face.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// 将文本流保存到本地，并获取对应的文件名。文件名是随机ID</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> saveFile(face);</span><br><span class="line">                <span class="comment">// 调用OCR服务，获取识别人脸面的识别信息</span></span><br><span class="line">                Map&lt;String, String&gt; res = ocrService.RecognizeIdCard(uploadDirectory + filename, <span class="string">&quot;face&quot;</span>);</span><br><span class="line">                <span class="comment">// 在缓存中加入识别成功的文件</span></span><br><span class="line">                faceImages.add(<span class="string">&quot;/images/&quot;</span> + filename);</span><br><span class="line">                <span class="comment">// 在缓存中加入识别结果</span></span><br><span class="line">                faceResults.add(res);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 背部的识别同上</span></span><br><span class="line">            <span class="keyword">if</span> (!back.isEmpty()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> saveFile(back);</span><br><span class="line">                Map&lt;String, String&gt; res = ocrService.RecognizeIdCard(uploadDirectory + filename, <span class="string">&quot;back&quot;</span>);</span><br><span class="line">                backImages.add(<span class="string">&quot;/images/&quot;</span> + filename);</span><br><span class="line">                backResults.add(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TeaException e) &#123;</span><br><span class="line">            <span class="comment">// 错误捕捉</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            errorMessage = JSON.toJSONString(e.getData());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            errorMessage = e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否有错误报出</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(errorMessage)) &#123;</span><br><span class="line">            attributes.addFlashAttribute(<span class="string">&quot;message&quot;</span>, errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 路由跳转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="OCR服务"><a href="#OCR服务" class="headerlink" title="OCR服务"></a>OCR服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 身份证识别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> side 身份证的面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 识别结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">RecognizeIdCard</span><span class="params">(String filePath, String side)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 实例化请求</span></span><br><span class="line">        <span class="type">RecognizeIdentityCardAdvanceRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecognizeIdentityCardAdvanceRequest</span>();</span><br><span class="line">        <span class="comment">// 加载需要识别的图像流</span></span><br><span class="line">        request.imageURLObject = Files.newInputStream(Paths.get(filePath));</span><br><span class="line">        <span class="comment">// 加载对应的面：人像面或者是国徽面</span></span><br><span class="line">        request.side = side;</span><br><span class="line">        <span class="comment">// 发送请求并获取响应</span></span><br><span class="line">        <span class="type">RecognizeIdentityCardResponse</span> <span class="variable">response</span> <span class="operator">=</span> ocrClient.recognizeIdentityCardAdvance(request, runtime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;face&quot;</span>.equals(side)) &#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.parseObject(JSON.toJSONString(response.data.frontResult), <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, String&gt;&gt;() &#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.parseObject(JSON.toJSONString(response.data.backResult), <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, String&gt;&gt;() &#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">下面是完整代码地址</p><p>源码地址:   <a href="https://github.com/aliyun/alibabacloud-viapi-demo/tree/master">https://github.com/aliyun/alibabacloud-viapi-demo/tree/master</a></p></div>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
            <tag> ai </tag>
            
            <tag> aliyun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云Ai训练营DayOne</title>
      <link href="/2020/06/04/aliyunAiDayOne/"/>
      <url>/2020/06/04/aliyunAiDayOne/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="视觉生产"><a href="#视觉生产" class="headerlink" title="视觉生产"></a>视觉生产</h2><p>生产是输入输出的过程</p><ol><li>给予一定的生产素材</li><li>然后通过视觉生产基础框架对素材，需求进行一定的语义分析理解</li><li>再经过视觉生产模型产出对应的产品。</li></ol><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/06/20200604d52334ae74a5e.png" alt="image-20200604141614170"></p><h3 id="生产的难点"><a href="#生产的难点" class="headerlink" title="生产的难点"></a>生产的难点</h3><p>生产的难点在于对视觉输入素材的准确理解。</p><p>与一般性输入不同，大多数的视觉生产的输入参数是包含难以语义化的图片，是机器无法直接理解处理的流，因此在开始对应的生产服务之前需要对图片进行分割精细理解。</p><ol><li>知道是什么<ol><li>人的识别</li><li>车的识别</li></ol></li><li>知道识别对象的位置<ol><li>找到缺陷的位置</li><li>画面中多对象的识别</li></ol></li><li>知道每一个像素是什么</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
            <tag> ai </tag>
            
            <tag> aliyun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo静态网站多线部署</title>
      <link href="/2020/06/02/Hexo%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E5%A4%9A%E7%BA%BF%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/06/02/Hexo%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E5%A4%9A%E7%BA%BF%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>多线部署：将同一个域名解析到多个服务器，并让不同地区的用户访问不同地区的服务器，以获得最好的访问体验</p></blockquote><p>​    Hexo是静态网站，因此只需要服务器能够发送静态网页就足够了，国内的选择是<code>coding pages</code>或者是<code>gitee pages</code>但是后者码云的免费版并不能提供自定义域名服务，所以不予考虑。国外的可以选择 <code>GitHub Pages</code>。</p><p>​    🆗，首先你需要一个域名，然后在你的域名服务供应商那里做如下设置。</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/06/20200602c491318874016.png" alt="将域名的CNAME记录指向github page"></p><p>​    将域名的<code>CNAME</code>记录指向<code>github page</code>，此处需要DNS服务商提供对应的解析线路，将境外线路应用给<code>github page</code>,同理，将境内线路或是默认线路给到<code>coding pages</code>。</p><blockquote><p>此处会遇到<code>coding pages</code>时常抽风导致无法访问的问题，我的建议是使用自己买的服务器来部署，虽然这样就脱离了使用静态网站的初心–省钱</p></blockquote><p>​    然后在Hexo的发布选项中添加两个静态网页供应商的<code>git</code>地址。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span></span><br><span class="line">        <span class="attr">github:</span> <span class="string">git@github.com:TankNee/xxx.github.io.git</span></span><br><span class="line">        <span class="attr">coding:</span> <span class="string">git@e.coding.net:tanknee/xxx.coding.me.git</span></span><br><span class="line">        <span class="attr">gitea:</span> <span class="string">git@git.xxx.cn:tanknee/xxx.gitea.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><blockquote><p>其中<code>github</code>和<code>coding</code>都提供了自动部署服务，所以就只需要提交代码到你对应的仓库就好了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五月May</title>
      <link href="/2020/06/01/569/"/>
      <url>/2020/06/01/569/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-JAwWdJYp" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="28402351" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><p>提笔落字时总觉自己文疏才浅，阅历浅薄，无从着笔。</p><p>五月共三十一天，步数超过3000的日子大概不足十天，倒是出去吃饭吃了很多次。</p><p>一号结束了为期两个月的打工生涯，小半年也算是搞到了第一笔大额资金。</p><p>八号往鹅厂投了简历，挣扎了两三天，终是没过，虽然也没给原因，大概就是因为我太菜了吧，一问三不知。</p><blockquote><p>2020年5月8日</p><p>电话面试，深圳总部面试</p><ol><li>dom事件的冒泡与捕获</li><li>CSS中的样式优先级是怎样分布的</li><li>React-Native的底层实现，是如何与原生系统进行交互的</li><li>算法题：找出一个字符串的最长重复子序列</li></ol><p>2020年5月15日</p><p>电话面试，武汉腾讯</p><ol><li>JavaScript原型链的实现（不了解）</li><li>http协议中数据传输的编码方式，发送json格式的数据时的content-type</li><li>说一下auth2.0</li><li>说一下当下前端框架对Dom做了哪些优化</li><li>用户登录的实现<ol><li>使用了什么加密方式–jwt</li><li>jwt有什么缺点</li><li>session和cookie</li></ol></li><li>讲一下MySQL的索引实现（不了解）</li></ol></blockquote><p>明年再努力吧。</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/06/20200601c27bb1c554117.jpg" alt="c7b90c865a856dc54deab5445817f0c"></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据 </tag>
            
            <tag> dom </tag>
            
            <tag> 面试 </tag>
            
            <tag> 文疏 </tag>
            
            <tag> 实现 </tag>
            
            <tag> 着笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四月April</title>
      <link href="/2020/05/02/568/"/>
      <url>/2020/05/02/568/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-XuWtyRTE" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="450567505" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h3 id="Gitea-Contribution"><a href="#Gitea-Contribution" class="headerlink" title="Gitea Contribution"></a>Gitea Contribution</h3><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/05/2020050214eb2f8ad8224.png" alt="Gitea Contribution"></p><h3 id="Github-Contribution"><a href="#Github-Contribution" class="headerlink" title="Github Contribution"></a>Github Contribution</h3><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/05/202005021736d66679c34.png" alt="Github Contribution"></p><p>断断续续写了一快一整年的月报了，还是没有确定究竟要留下一个什么样的形式。偶尔会有段时间很在意某种格式，但也经常过了一会儿就不太在意了。</p><p>前两天在公众号里发了一张图片：</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/05/202005021550268653b2f.jpg" alt=""></p><p>暴力终究也会递归式地催生新的暴力反抗。</p><p>好几次在社交平台看到触动以致激怒我的言论，反驳的字已经全部打进了输入框，最后却哐哐哐全都删掉。</p><p>诚然，有那么一瞬间，想把作者的脑袋拧下来，问候他到底有没有读过书，整天逼逼赖赖发这些脑瘫言论？</p><p>但是当我全部删掉之后，突然就有那么一瞬间平静下来。</p><p>暴力是如此的易于传播，以致于每一次都会上当。</p><p>发完这张图片之后，又在原博评论里看到新的东西：</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/05/202005021cae5c08d3bf2.png" alt="评论"></p><blockquote><p>达克效应（D-K effect）</p><p>全称为邓宁-克鲁格效应（Dunning-Kruger effect）。它是一种认知偏差现象，指的是能力欠缺的人在自己欠考虑的决定的基础上得出错误结论，但是无法正确认识到自身的不足，辨别错误行为。这些能力欠缺者们沉浸在自我营造的虚幻的优势之中，常常高估自己的能力水平，却无法客观评价他人的能力。</p></blockquote><p>上了大学之后，看到的无知的事情越来越多，起初是愤懑，想着义正言辞地反驳，幻想我这一段狗屁不通的言论能起到一点点我设想的效果，后来也就慢慢冷静。</p><p><strong>没有人想听你的教诲和理由，你是什么，他又是什么？</strong></p><p>碰了几鼻子的灰之后再也没有跟人抬杠的心情，挺好的。</p><p>Keep hungry and keep stupid!</p><hr><p>也祝五月返校的各位开学愉快，暑假相会</p>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> meting </tag>
            
            <tag> netease </tag>
            
            <tag> type </tag>
            
            <tag> server </tag>
            
            <tag> 图片 </tag>
            
            <tag> effect </tag>
            
            <tag> 暴力 </tag>
            
            <tag> 言论 </tag>
            
            <tag> keep </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>昼夜双版Typecho主题SplityRemake-新世界的灰烬</title>
      <link href="/2020/04/15/splity-remake/"/>
      <url>/2020/04/15/splity-remake/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>但愿旧世界的火光能够燃尽晦暗</p></blockquote><p>在前端的路上走走停停，玩了快大半年，发现自己确实还没有能力承载一个完成的项目，每次都是做了一半就已经十分的疲倦。</p><h2 id="Tribute-and-Disclaimer"><a href="#Tribute-and-Disclaimer" class="headerlink" title="Tribute and Disclaimer"></a>Tribute and Disclaimer</h2><p>本来是想拿着原始的<code>Default</code>主题直接修改，但发现实在是太简陋了…就没有用那个，前两天在<a href="https://www.dpaoz.com/">一个网站</a>上看到了这个主题的原版(Splity)。</p><blockquote><p>其实这个的原版也是仿照着一个付费的wordpress主题写的，我咨询了Splity的原作者，他许可了我的二次修改与发布，如果上述有任何一方认为我的行为有侵权嫌疑，那么请联系我删除该主题的所有信息。</p></blockquote><p><strong>再次感谢每一位作者的付出与灵感，我不希望我的改动会损害到您的利益，如果实有冒犯，请联系我删除，谢谢</strong></p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/202004157bce857b07891.png" alt="演示图"></p><h2 id="Here-is-the-change-log"><a href="#Here-is-the-change-log" class="headerlink" title="Here is the change log"></a>Here is the change log</h2><ul><li><p>修复黑暗模式的bug</p></li><li><p>增加文章目录的输出</p></li><li><p>调整文章缩略图的输出</p></li><li><p>去除主页的走马灯效果</p></li><li><p>去除个人信息栏的简介– </p><ul><li><del>后续准备添加一言api</del>(已完成)</li></ul></li><li><p>调整最新文章的数量</p></li><li><p>文章页自动隐藏 最新文章和最热文章两个项目</p></li><li><p>内置添加图片灯箱效果</p></li><li><p>调整markdown文章格式</p></li><li><p>调整header的栏目输出</p></li><li><p>页首添加了动画</p></li><li><p>修改了文章中a标签的样式</p></li><li><p>修改了图片的显示</p></li><li><p>mobile端文章目录的支持</p></li><li><p>修复了图片分享的bug</p></li><li><p>添加了<code>pretag</code>和<code>prebadge</code>的字段支持</p></li></ul><blockquote><p>徽标和标签支持</p></blockquote><blockquote><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/2020041177f60cc42daeb.png" alt="徽标演示"/></blockquote><blockquote><p>详情请前往文章编辑页查看！</p></blockquote><ul><li>修复了tag输出的问题</li><li>添加颜文字的支持</li><li>添加了对LaTeX公式的支持</li><li>修复OwO颜文字的显示</li><li>修改评论区的字体</li><li>修复button样式</li><li>修复生成分享海报时的问题<ul><li>修复海报图片跨域问题</li><li>修复海报摘要显示问题</li></ul></li><li>添加index界面文章发表时间的显示</li><li>添加了评论区UA的显示</li><li>加回了走马灯效果，并修改了图片显示逻辑</li><li>修复登录按钮显示异常</li></ul><h2 id="Download-and-use"><a href="#Download-and-use" class="headerlink" title="Download and use"></a>Download and use</h2><ol><li>首先你应该前往<a href="https://github.com/TankNee/SplityRemake">GitHub</a>或者<a href="https://git.tanknee.cn/tanknee/Splity-Remake/src/branch/master">Gitea</a>的主页下载<code>SplityRemake</code>的压缩包</li></ol><blockquote><p><code>master</code>分支的版本是较为稳定的版本，一般情况下请下载该版本的主题</p><p><code>develop</code>分支是正在开发中的版本，一般来说每一天会合并一次<code>develop</code>和<code>master</code></p></blockquote><ol start="2"><li>将下载的压缩包上传到typecho的theme文件夹下</li><li>解压压缩包，并重命名为<code>splity</code>，<strong>这一点十分重要，请务必改对名称，否则会出现不可预知的错误</strong></li><li>打开后台的主题页面配置主题</li></ol><h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><p>已知的错误是海报生成时有大概率失败，这与您的图片托管服务商有关，请配置跨域信息</p><h2 id="To-Do"><a href="#To-Do" class="headerlink" title="To Do"></a>To Do</h2><ul><li><input checked="" disabled="" type="checkbox"> 完成归档页面的编写</li><li><input checked="" disabled="" type="checkbox"> 实现留言板界面的优化</li><li><input checked="" disabled="" type="checkbox"> 实现评论区表情的输入</li><li><input checked="" disabled="" type="checkbox"> 实现友链的优化</li><li><input checked="" disabled="" type="checkbox"> 实现OwO的夜间模式的优化</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 文件 </tag>
            
            <tag> 按钮 </tag>
            
            <tag> button </tag>
            
            <tag> markdown </tag>
            
            <tag> 图片 </tag>
            
            <tag> wordpress </tag>
            
            <tag> typecho </tag>
            
            <tag> 页面 </tag>
            
            <tag> 修复 </tag>
            
            <tag> 文章 </tag>
            
            <tag> 添加 </tag>
            
            <tag> 评论区 </tag>
            
            <tag> splity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法分析入门系列(三) 动态规划算法</title>
      <link href="/2020/04/15/alogrithmanalysis_3/"/>
      <url>/2020/04/15/alogrithmanalysis_3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="作业排程问题"><a href="#作业排程问题" class="headerlink" title="作业排程问题"></a>作业排程问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>Automobile factory with two assembly lines(汽车厂两条装配线)</p><p>– Each line has n stations: S1,1, . . . , S1,n and S2,1, . . . , S2,n(每条装</p><p>配线有n个工序站台)</p><p>– Corresponding stations S1, j and S2, j perform the same function </p><p>but can take different amounts of time a1, j and a2, j (每条装配线的</p><p>第j个站台的功能相同,但是效率不一致)</p><p>– Entry times e1 and e2 and exit times x1 and x2(上线和下线时间)</p></blockquote><p>描述并实现动态规划的作业排程算法，并显示下图的排程结果。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/2020033165dde9b215a42.png"/><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OperationSequencing</span></span><br><span class="line"><span class="comment"> * 作业排程算法实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * int arrayA[2][5] = &#123; 7,9,3,4,8,8,5,6,4,5 &#125;; int arrayT[2][4] = &#123;</span></span><br><span class="line"><span class="comment"> * 2,3,1,3,2,1,2,2 &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationSequencing</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Route&gt; routes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToRoutes</span><span class="params">(Node node, Integer costTime)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Route route : routes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (route.getWorkIndex() == node.getWorkIndex() &amp;&amp; costTime &lt; route.getCostTime()) &#123;</span><br><span class="line">                route.setLineIndex(node.getLineIndex());</span><br><span class="line">                route.setCostTime(costTime);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (route.getWorkIndex() == node.getWorkIndex()) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            routes.add(<span class="keyword">new</span> <span class="title class_">Route</span>(node.getLineIndex(), node.getWorkIndex(), costTime));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printRoutes</span><span class="params">()</span> &#123;</span><br><span class="line">        Collections.sort(routes, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Route&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Route r1, Route r2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> r1.getWorkIndex() - r2.getWorkIndex();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.print(<span class="string">&quot;enter--&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Route route : routes) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;(&quot;</span> + route.getLineIndex() + <span class="string">&quot;,&quot;</span> + route.getWorkIndex() + <span class="string">&quot;)--&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getShortestTime</span><span class="params">(WorkingGraph workingGraph, Node endNode)</span> &#123;</span><br><span class="line">        <span class="type">WorkingGraph</span> <span class="variable">_workingGraph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkingGraph</span>(workingGraph);</span><br><span class="line">        <span class="keyword">if</span> (endNode.getParents().size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Edge.getEdgeWeight(_workingGraph.getEnterNode(), endNode, _workingGraph.getEdges())</span><br><span class="line">                    + endNode.getWorkTime();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">leftParentTime</span> <span class="operator">=</span> Edge.getEdgeWeight(endNode.getParents().get(<span class="number">0</span>), endNode, _workingGraph.getEdges());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rightParentTime</span> <span class="operator">=</span> Edge.getEdgeWeight(endNode.getParents().get(<span class="number">1</span>), endNode, _workingGraph.getEdges());</span><br><span class="line">        <span class="comment">// 去掉与末尾节点相关的边</span></span><br><span class="line">        Edge.removeEdgeWithNode(endNode, _workingGraph.getEdges());</span><br><span class="line">        _workingGraph.getNodes().remove(endNode);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">leftTime</span> <span class="operator">=</span> getShortestTime(_workingGraph, endNode.getParents().get(<span class="number">0</span>)) + leftParentTime;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rightTime</span> <span class="operator">=</span> getShortestTime(_workingGraph, endNode.getParents().get(<span class="number">1</span>)) + rightParentTime;</span><br><span class="line">        addToRoutes(endNode.getParents().get(leftTime &gt; rightTime ? <span class="number">1</span> : <span class="number">0</span>),</span><br><span class="line">                leftTime &gt; rightTime ? rightTime : leftTime);</span><br><span class="line">        <span class="keyword">return</span> Math.min(leftTime, rightTime) + endNode.getWorkTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WorkingGraph</span> <span class="variable">workingGraph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkingGraph</span>();</span><br><span class="line">        <span class="comment">// -1-1代表起始节点，-2-2代表离开节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">enter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">exit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(-<span class="number">2</span>, -<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">a11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a13</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a14</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a15</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">a21</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a22</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a23</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a24</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a25</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        enter.addToChildren(a11);</span><br><span class="line">        enter.addToChildren(a21);</span><br><span class="line"></span><br><span class="line">        a11.addToParents(enter);</span><br><span class="line">        a11.addToChildren(a12);</span><br><span class="line">        a11.addToChildren(a22);</span><br><span class="line"></span><br><span class="line">        a21.addToParents(enter);</span><br><span class="line">        a21.addToChildren(a12);</span><br><span class="line">        a21.addToChildren(a22);</span><br><span class="line"></span><br><span class="line">        a12.addToParents(a11);</span><br><span class="line">        a12.addToParents(a21);</span><br><span class="line">        a12.addToChildren(a13);</span><br><span class="line">        a12.addToChildren(a23);</span><br><span class="line"></span><br><span class="line">        a22.addToParents(a11);</span><br><span class="line">        a22.addToParents(a21);</span><br><span class="line">        a22.addToChildren(a13);</span><br><span class="line">        a22.addToChildren(a23);</span><br><span class="line"></span><br><span class="line">        a13.addToParents(a12);</span><br><span class="line">        a13.addToParents(a22);</span><br><span class="line">        a13.addToChildren(a14);</span><br><span class="line">        a13.addToChildren(a24);</span><br><span class="line"></span><br><span class="line">        a23.addToParents(a12);</span><br><span class="line">        a23.addToParents(a22);</span><br><span class="line">        a23.addToChildren(a14);</span><br><span class="line">        a23.addToChildren(a24);</span><br><span class="line"></span><br><span class="line">        a14.addToParents(a13);</span><br><span class="line">        a14.addToParents(a23);</span><br><span class="line">        a14.addToChildren(a15);</span><br><span class="line">        a14.addToChildren(a25);</span><br><span class="line"></span><br><span class="line">        a24.addToParents(a13);</span><br><span class="line">        a24.addToParents(a23);</span><br><span class="line">        a24.addToChildren(a15);</span><br><span class="line">        a24.addToChildren(a25);</span><br><span class="line"></span><br><span class="line">        a15.addToParents(a14);</span><br><span class="line">        a15.addToParents(a24);</span><br><span class="line">        a15.addToChildren(exit);</span><br><span class="line"></span><br><span class="line">        a25.addToParents(a14);</span><br><span class="line">        a25.addToParents(a24);</span><br><span class="line">        a25.addToChildren(exit);</span><br><span class="line"></span><br><span class="line">        exit.addToParents(a15);</span><br><span class="line">        exit.addToParents(a25);</span><br><span class="line"></span><br><span class="line">        List&lt;Node&gt; nodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        nodes.add(enter);</span><br><span class="line"></span><br><span class="line">        nodes.add(a11);</span><br><span class="line">        nodes.add(a12);</span><br><span class="line">        nodes.add(a13);</span><br><span class="line">        nodes.add(a14);</span><br><span class="line">        nodes.add(a15);</span><br><span class="line"></span><br><span class="line">        nodes.add(a21);</span><br><span class="line">        nodes.add(a22);</span><br><span class="line">        nodes.add(a23);</span><br><span class="line">        nodes.add(a24);</span><br><span class="line">        nodes.add(a25);</span><br><span class="line"></span><br><span class="line">        nodes.add(exit);</span><br><span class="line">        List&lt;Edge&gt; edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(enter, a11, <span class="number">2</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a11, a12, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a12, a13, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a13, a14, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a14, a15, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a15, exit, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(enter, a21, <span class="number">4</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a21, a22, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a22, a23, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a23, a24, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a24, a25, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a25, exit, <span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a11, a22, <span class="number">2</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a21, a12, <span class="number">2</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a12, a23, <span class="number">3</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a22, a13, <span class="number">1</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a13, a24, <span class="number">1</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a23, a14, <span class="number">2</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a14, a25, <span class="number">3</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a24, a15, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        workingGraph.setNodes(nodes);</span><br><span class="line">        workingGraph.setEdges(edges);</span><br><span class="line">        workingGraph.setEnterNode(enter);</span><br><span class="line">        workingGraph.setExitNode(exit);</span><br><span class="line"></span><br><span class="line">        <span class="type">OperationSequencing</span> <span class="variable">operationSequencing</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperationSequencing</span>();</span><br><span class="line">        System.out.println(operationSequencing.getShortestTime(workingGraph, exit));</span><br><span class="line">        operationSequencing.printRoutes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图上的节点类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="comment">// 父节点</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&gt; parents;</span><br><span class="line">    <span class="comment">// 子节点</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&gt; children;</span><br><span class="line">    <span class="comment">// 流水线编号</span></span><br><span class="line">    <span class="keyword">private</span> Integer lineIndex;</span><br><span class="line">    <span class="comment">// 工作顺序编号</span></span><br><span class="line">    <span class="keyword">private</span> Integer workIndex;</span><br><span class="line">    <span class="comment">// 加工时间</span></span><br><span class="line">    <span class="keyword">private</span> Integer workTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Integer lineIndex, Integer workIndex, Integer workTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.parents = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.lineIndex = lineIndex;</span><br><span class="line">        <span class="built_in">this</span>.workIndex = workIndex;</span><br><span class="line">        <span class="built_in">this</span>.workTime = workTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Node&gt; <span class="title function_">getParents</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParents</span><span class="params">(List&lt;Node&gt; parents)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.parents = parents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToParents</span><span class="params">(Node parent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.parents.add(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Node&gt; <span class="title function_">getChildren</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChildren</span><span class="params">(List&lt;Node&gt; children)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToChildren</span><span class="params">(Node child)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.children.add(child);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getLineIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lineIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLineIndex</span><span class="params">(Integer lineIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lineIndex = lineIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getWorkIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWorkIndex</span><span class="params">(Integer workIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.workIndex = workIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getWorkTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWorkTime</span><span class="params">(Integer workTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.workTime = workTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 边类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="comment">// 起始节点</span></span><br><span class="line">    <span class="keyword">private</span> Node startNode;</span><br><span class="line">    <span class="comment">// 结束节点</span></span><br><span class="line">    <span class="keyword">private</span> Node endNode;</span><br><span class="line">    <span class="comment">// 边的权重</span></span><br><span class="line">    <span class="keyword">private</span> Integer weight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(Node startNode, Node endNode, Integer weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startNode = startNode;</span><br><span class="line">        <span class="built_in">this</span>.endNode = endNode;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取两个顶点之间的直线距离</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n1    起始节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n2    结束节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> edges</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">getEdgeWeight</span><span class="params">(Node n1, Node n2, List&lt;Edge&gt; edges)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Edge edge : edges) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge.getStartNode().equals(n1) &amp;&amp; edge.getEndNode().equals(n2))</span><br><span class="line">                <span class="keyword">return</span> edge.weight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除与指定节点相关的边</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> edges</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeEdgeWithNode</span><span class="params">(Node Node, List&lt;Edge&gt; edges)</span> &#123;</span><br><span class="line">        List&lt;Edge&gt; _removeEdges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Edge edge : edges) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge.getStartNode().equals(Node) || edge.getEndNode().equals(Node)) &#123;</span><br><span class="line">                _removeEdges.add(edge);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Edge edge : _removeEdges) &#123;</span><br><span class="line">            edges.remove(edge);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getStartNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartNode</span><span class="params">(Node startNode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startNode = startNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getEndNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndNode</span><span class="params">(Node endNode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endNode = endNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(Integer weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Route</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer lineIndex;</span><br><span class="line">    <span class="keyword">private</span> Integer workIndex;</span><br><span class="line">    <span class="keyword">private</span> Integer costTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getLineIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lineIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLineIndex</span><span class="params">(Integer lineIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lineIndex = lineIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getWorkIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWorkIndex</span><span class="params">(Integer workIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.workIndex = workIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCostTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> costTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCostTime</span><span class="params">(Integer costTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.costTime = costTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Route</span><span class="params">(Integer lineIndex, Integer workIndex, Integer costTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lineIndex = lineIndex;</span><br><span class="line">        <span class="built_in">this</span>.workIndex = workIndex;</span><br><span class="line">        <span class="built_in">this</span>.costTime = costTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工作图类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkingGraph</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&gt; nodes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Edge&gt; edges;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node enterNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node exitNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WorkingGraph</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WorkingGraph</span><span class="params">(WorkingGraph workingGraph)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(workingGraph.getNodes());</span><br><span class="line">        <span class="built_in">this</span>.edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(workingGraph.getEdges());</span><br><span class="line">        <span class="built_in">this</span>.enterNode = workingGraph.getEnterNode();</span><br><span class="line">        <span class="built_in">this</span>.exitNode = workingGraph.getExitNode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WorkingGraph <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WorkingGraph</span> <span class="variable">o</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            o = (WorkingGraph) <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Node&gt; <span class="title function_">getNodes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNodes</span><span class="params">(List&lt;Node&gt; nodes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nodes = nodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Edge&gt; <span class="title function_">getEdges</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> edges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEdges</span><span class="params">(List&lt;Edge&gt; edges)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.edges = edges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getEnterNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enterNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnterNode</span><span class="params">(Node enterNode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.enterNode = enterNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getExitNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> exitNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExitNode</span><span class="params">(Node exitNode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.exitNode = exitNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验分析"><a href="#实验分析" class="headerlink" title="实验分析"></a>实验分析</h3><p>使用动态规划的思想，从上至下，从出口到入口。我这里还用了贪婪的策略，只需要保证每一次都是最短的工作耗时即可。</p><h2 id="最长子序列问题"><a href="#最长子序列问题" class="headerlink" title="最长子序列问题"></a>最长子序列问题</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p><em>描述并实现最长共同子序列动态规 划 算 法 ， 并 显 示 S1= ACCGGTCGAGATGCAG，S2 = GTCGTTCGGAATGCAT</em> *的最长共同子序列。 *</p><p><em>共同子序列可以是不连续的，且每个元素在母串中的位置也是可以不相同，但是顺序必须一致</em> </p></blockquote><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MaxSubsequence</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述并实现最长共同子序列动态规 划 算 法 ， 并 显 示 S1= ACCGGTCGAGATGCAG，S2 = GTCGTTCGGAATGCAT</span></span><br><span class="line"><span class="comment"> * 的最长共同子序列。 共同子序列可以是不连续的，且每个元素在母串中的位置也是可以不相同，但是顺序必须一致</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxSubsequence</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求解最长子序列</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str1 字符串1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str2 字符串2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">lcs</span><span class="params">(String str1, String str2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> str1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> str2.length();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">int</span> c[][] = <span class="keyword">new</span> <span class="title class_">int</span>[len1 + <span class="number">1</span>][len2 + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= len2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                    c[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str1.charAt(i - <span class="number">1</span>) == str2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    c[i][j] = c[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c[i][j] = Math.max(c[i - <span class="number">1</span>][j], c[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>; m &lt; Math.max(len1, len2); m++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; n &lt; Math.max(len1, len2); n++) &#123;</span><br><span class="line">                System.out.print(c[m][n] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> len1;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> len2;</span><br><span class="line">        <span class="keyword">while</span> (c[m][n] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1.charAt(m - <span class="number">1</span>) == str2.charAt(n - <span class="number">1</span>)) &#123;</span><br><span class="line">                sb.append(str1.charAt(m - <span class="number">1</span>));</span><br><span class="line">                m--;</span><br><span class="line">                n--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c[m][n] == c[m][n - <span class="number">1</span>]) &#123;</span><br><span class="line">                n--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c[m][n] == c[m - <span class="number">1</span>][n]) &#123;</span><br><span class="line">                m--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成最长子序列的字符串</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr  比较矩阵</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str1 字符串1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str2 字符串2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateLcs</span><span class="params">(<span class="type">int</span>[][] arr, String str1, String str2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">while</span> (arr[m][n] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1.charAt(m) == str2.charAt(n)) &#123;</span><br><span class="line">                sb.append(str1.charAt(m));</span><br><span class="line">                m--;</span><br><span class="line">                n--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[m][n] == arr[m][n - <span class="number">1</span>]) &#123;</span><br><span class="line">                n--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[m][n] == arr[m - <span class="number">1</span>][n]) &#123;</span><br><span class="line">                m--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.reverse().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MaxSubsequence</span> <span class="variable">maxSubsequence</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MaxSubsequence</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ms</span> <span class="operator">=</span> maxSubsequence.lcs(<span class="string">&quot;ACCGGTCGAGATGCAG&quot;</span>, <span class="string">&quot;GTCGTTCGGAATGCAT&quot;</span>);</span><br><span class="line">        System.out.println(ms);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><h4 id="生成的子序列矩阵"><a href="#生成的子序列矩阵" class="headerlink" title="生成的子序列矩阵"></a>生成的子序列矩阵</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/2020041270c9c82d18684.png"/><h4 id="查找到的最长子序列"><a href="#查找到的最长子序列" class="headerlink" title="查找到的最长子序列"></a>查找到的最长子序列</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200412903233dbf1532.png"/><h3 id="实验分析-1"><a href="#实验分析-1" class="headerlink" title="实验分析"></a>实验分析</h3><p>实现最长子序列的关键在于创建最长子序列矩阵，这里是使用二维数组来实现的，每一个点都与其上方，左边，左上方这三个点相关，是在判断对应字符相等于否的基础上，根据这几个点来确定当前点的值。当到达最右下角的点时，也就是点<code>dist[dist.length-1][dist.lenght-1]</code>时，也就得到了最长共同子序列的长度，然后再使用逆向思维获取最终的序列。</p><p>并且最长子序列并不是唯一的，可能有多个值，这取决于你选择的打印方式。</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li>动态规划算法范式是什么？</li></ol><p>动态规划与分治法相似，但是动态规划所划分的子问题并不是完全相互独立的，是有可能相互关联的，如果使用分治法来实现就有可能重复处理子问题，造成资源浪费。</p><p>动态规划需要将问题分为子问题，前一个子问题为后一个子问题提供信息，并且每一次求解时需要存储之前的结果，以期得到最佳答案。</p><ol start="2"><li>利用动态规划算法设计方法解决矩阵链相乘问题？</li></ol><p>矩阵链相乘问题在于寻找最好的括号加法，对于$A_{i~j}(使用该符号来代表矩阵A_i<em>A_{i+1}</em>..*A_j的最佳值)$可以选取一个数<code>k</code>,其中$i≤k≤j$成立,并且<code>k</code>是<code>i</code>到<code>j</code>中的最佳分割点，即括号的所在处，那么我们的乘法矩阵<code>m[][]</code>就可以表示为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(i==j)&#123;</span><br><span class="line">m[i][i] = 0;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">m[i][j]=min&#123;m[i][k] + m[k+1][j] + Pi-1PkPj&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后使用自底向上的思想就可以计算出最佳括号加法获得问题的解</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flag </tag>
            
            <tag> length </tag>
            
            <tag> node </tag>
            
            <tag> line </tag>
            
            <tag> o </tag>
            
            <tag> 字符 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 节点 </tag>
            
            <tag> int </tag>
            
            <tag> arr </tag>
            
            <tag> this </tag>
            
            <tag> return </tag>
            
            <tag> public </tag>
            
            <tag> integer </tag>
            
            <tag> new </tag>
            
            <tag> edge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法分析入门系列(四) 最短路径算法</title>
      <link href="/2020/04/15/alogrithmanalysis_4/"/>
      <url>/2020/04/15/alogrithmanalysis_4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="单源最短路径算法"><a href="#单源最短路径算法" class="headerlink" title="单源最短路径算法"></a>单源最短路径算法</h2><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/2020040778f593c139c85.png"/><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>从s点出发到达其他点的最短路径</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShortestPath</span> &#123;</span><br><span class="line">    <span class="comment">// 定义顶点Vertex类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Vertex</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">infinite_dis</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">private</span> String name; <span class="comment">// 节点名字</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> known; <span class="comment">// 此节点是否已知</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> adjuDist; <span class="comment">// 此节点距离</span></span><br><span class="line">        <span class="keyword">private</span> Vertex parent; <span class="comment">// 当前从初始化节点到此节点的最短路径下的父亲节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Vertex</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.known = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.adjuDist = infinite_dis;</span><br><span class="line">            <span class="built_in">this</span>.parent = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Vertex</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>();</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Vertex <span class="title function_">getParent</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParent</span><span class="params">(Vertex parent)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.getName() == ((Vertex) obj).getName()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.name == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;name of Vertex to be compared cannot be null!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getInfiniteDis</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> infinite_dis;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isKnown</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> known;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKnown</span><span class="params">(<span class="type">boolean</span> known)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.known = known;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAdjuDist</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> adjuDist;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAdjuDist</span><span class="params">(<span class="type">int</span> adjuDist)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.adjuDist = adjuDist;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="comment">// 此有向边的起始点</span></span><br><span class="line">        <span class="keyword">private</span> Vertex startVertex;</span><br><span class="line">        <span class="comment">// 此有向边的终点</span></span><br><span class="line">        <span class="keyword">private</span> Vertex endVertex;</span><br><span class="line">        <span class="comment">// 此有向边的权值</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> weight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(Vertex startVertex, Vertex endVertex, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.startVertex = startVertex;</span><br><span class="line">            <span class="built_in">this</span>.endVertex = endVertex;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Vertex <span class="title function_">getStartVertex</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> startVertex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartVertex</span><span class="params">(Vertex startVertex)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.startVertex = startVertex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Vertex <span class="title function_">getEndVertex</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> endVertex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndVertex</span><span class="params">(Vertex endVertex)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.endVertex = endVertex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(<span class="type">int</span> weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Vertex&gt; vertexList; <span class="comment">// 图的顶点集</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Vertex, List&lt;Edge&gt;&gt; ver_edgeList_map; <span class="comment">// 图的每个顶点对应的有向边</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShortestPath</span><span class="params">(List&lt;Vertex&gt; vertexList, Map&lt;Vertex, List&lt;Edge&gt;&gt; ver_edgeList_map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vertexList = vertexList;</span><br><span class="line">        <span class="built_in">this</span>.ver_edgeList_map = ver_edgeList_map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(Vertex v)</span> &#123;</span><br><span class="line">        v.setParent(<span class="literal">null</span>);</span><br><span class="line">        v.setAdjuDist(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateChildren</span><span class="params">(Vertex v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ver_edgeList_map.get(v) == <span class="literal">null</span> || ver_edgeList_map.get(v).size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Vertex&gt; childrenList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Vertex&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Edge e : ver_edgeList_map.get(v)) &#123;</span><br><span class="line">            <span class="type">Vertex</span> <span class="variable">childVertex</span> <span class="operator">=</span> e.getEndVertex();</span><br><span class="line">            <span class="keyword">if</span> (!childVertex.isKnown()) &#123;</span><br><span class="line">                childVertex.setKnown(<span class="literal">true</span>);</span><br><span class="line">                childVertex.setAdjuDist(v.getAdjuDist() + e.getWeight());</span><br><span class="line">                childVertex.setParent(v);</span><br><span class="line">                childrenList.add(childVertex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nowDist</span> <span class="operator">=</span> v.getAdjuDist() + e.getWeight();</span><br><span class="line">            <span class="keyword">if</span> (nowDist &gt;= childVertex.getAdjuDist()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                childVertex.setAdjuDist(nowDist);</span><br><span class="line">                childVertex.setParent(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Vertex vc : childrenList) &#123;</span><br><span class="line">            updateChildren(vc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shortestPathTravasal</span><span class="params">(<span class="type">int</span> startIndex, <span class="type">int</span> destIndex)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">start</span> <span class="operator">=</span> vertexList.get(startIndex);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">dest</span> <span class="operator">=</span> vertexList.get(destIndex);</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;[&quot;</span> + dest.getName() + <span class="string">&quot;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">        setRoot(start);</span><br><span class="line"></span><br><span class="line">        updateChildren(vertexList.get(startIndex));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">shortest_length</span> <span class="operator">=</span> dest.getAdjuDist();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((dest.getParent() != <span class="literal">null</span>) &amp;&amp; (!dest.equals(start))) &#123;</span><br><span class="line">            path = <span class="string">&quot;[&quot;</span> + dest.getParent().getName() + <span class="string">&quot;] --&gt; &quot;</span> + path;</span><br><span class="line">            dest = dest.getParent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span> + vertexList.get(startIndex).getName() + <span class="string">&quot;] to [&quot;</span> + vertexList.get(destIndex).getName()</span><br><span class="line">                + <span class="string">&quot;] ShortestPath shortest path: &quot;</span> + path);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;shortest length:&quot;</span> + shortest_length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;t&quot;</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;z&quot;</span>);</span><br><span class="line">        List&lt;Vertex&gt; verList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;ShortestPath.Vertex&gt;();</span><br><span class="line">        verList.add(s);</span><br><span class="line">        verList.add(t);</span><br><span class="line">        verList.add(x);</span><br><span class="line">        verList.add(y);</span><br><span class="line">        verList.add(z);</span><br><span class="line"></span><br><span class="line">        Map&lt;Vertex, List&lt;Edge&gt;&gt; vertex_edgeList_map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Vertex, List&lt;Edge&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;Edge&gt; sList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;ShortestPath.Edge&gt;();</span><br><span class="line">        sList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(s, t, <span class="number">6</span>));</span><br><span class="line">        sList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(s, y, <span class="number">7</span>));</span><br><span class="line">        List&lt;Edge&gt; tList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;ShortestPath.Edge&gt;();</span><br><span class="line">        tList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(t, y, <span class="number">8</span>));</span><br><span class="line">        tList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(t, x, <span class="number">5</span>));</span><br><span class="line">        List&lt;Edge&gt; xList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;ShortestPath.Edge&gt;();</span><br><span class="line">        xList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(x, t, -<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;Edge&gt; yList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;ShortestPath.Edge&gt;();</span><br><span class="line">        yList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(y, x, -<span class="number">3</span>));</span><br><span class="line">        yList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(y, z, <span class="number">9</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;Edge&gt; zList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;ShortestPath.Edge&gt;();</span><br><span class="line">        zList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(z, x, <span class="number">7</span>));</span><br><span class="line">        vertex_edgeList_map.put(s, sList);</span><br><span class="line">        vertex_edgeList_map.put(t, tList);</span><br><span class="line">        vertex_edgeList_map.put(x, xList);</span><br><span class="line">        vertex_edgeList_map.put(y, yList);</span><br><span class="line">        vertex_edgeList_map.put(z, zList);</span><br><span class="line"></span><br><span class="line">        <span class="type">ShortestPath</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShortestPath</span>(verList, vertex_edgeList_map);</span><br><span class="line">        g.shortestPathTravasal(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        g.shortestPathTravasal(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        g.shortestPathTravasal(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        g.shortestPathTravasal(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200412aca12d01cbd59.png"/><h2 id="全点对最短路径"><a href="#全点对最短路径" class="headerlink" title="全点对最短路径"></a>全点对最短路径</h2><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/202004070372d0be33e39.png"/><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>单点到另外一个点的最短距离</p><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全点对最短路径算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FullPointPairShortestPath</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;InnerEdge&gt; innerEdges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">1</span>, <span class="number">5</span>, -<span class="number">4</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">4</span>, <span class="number">3</span>, -<span class="number">5</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>));</span><br><span class="line">        <span class="type">int</span>[][] dist = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dist.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; dist[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">                    dist[i][j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dist[i][j] = Integer.MAX_VALUE / <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (InnerEdge innerEdge : innerEdges) &#123;</span><br><span class="line">            dist[innerEdge.getStartIndex() - <span class="number">1</span>][innerEdge.getEndIndex() - <span class="number">1</span>] = innerEdge.getWeight();</span><br><span class="line">        &#125;</span><br><span class="line">        getFullPointPairShortestPath(dist);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getFullPointPairShortestPath</span><span class="params">(<span class="type">int</span>[][] dist)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; dist.length; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dist.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; dist.length; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dist[i][j] &gt; dist[i][k] + dist[k][j]) &#123;</span><br><span class="line">                        dist[i][j] = dist[i][k] + dist[k][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dist.length; i++) &#123;</span><br><span class="line">            System.out.print(i + <span class="number">1</span> + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dist.length; i++) &#123;</span><br><span class="line">            System.out.print(i + <span class="number">1</span> + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; dist.length; j++) &#123;</span><br><span class="line">                System.out.print(dist[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * InnerEdge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InnerEdge</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer startIndex;</span><br><span class="line">    <span class="keyword">private</span> Integer endIndex;</span><br><span class="line">    <span class="keyword">private</span> Integer weight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InnerEdge</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStartIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartIndex</span><span class="params">(Integer startIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getEndIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndIndex</span><span class="params">(Integer endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(Integer weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InnerEdge</span><span class="params">(Integer startIndex, Integer endIndex, Integer weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200412693321658bd4f.png"/><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li>全点对最短路径算法动态规划算法范式 </li></ol><p>寻找两点间的最佳中转点</p><ol start="2"><li>图的存储方式和运算效率之间的关系</li></ol><p>使用数组来存储更加高效，使用Java对象来存储更加清晰明了</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 对象 </tag>
            
            <tag> length </tag>
            
            <tag> 算法 </tag>
            
            <tag> 节点 </tag>
            
            <tag> int </tag>
            
            <tag> this </tag>
            
            <tag> return </tag>
            
            <tag> public </tag>
            
            <tag> new </tag>
            
            <tag> vertex </tag>
            
            <tag> dist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法分析入门系列(二) 分治算法</title>
      <link href="/2020/04/15/algorithmanalysis_1-1/"/>
      <url>/2020/04/15/algorithmanalysis_1-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Strassen矩阵算法"><a href="#Strassen矩阵算法" class="headerlink" title="Strassen矩阵算法"></a>Strassen矩阵算法</h2><h3 id="矩阵分割"><a href="#矩阵分割" class="headerlink" title="矩阵分割"></a>矩阵分割</h3><p>将 </p><p>$$N*N$$</p><p>的矩阵转成</p><p>$$\frac{N}{2}*\frac{N}{2}$$</p><p>的矩阵，在这个相乘的过程中我们发现一共有四次加法，八次乘法。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/20200316b4a8dd7b0aa4f.png"/><p>而后就可以获得这个算法的递推公式：<br>$$<br>T(N) = 8*T(\frac{N}{2}) + Θ(N^2)<br>$$<br><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://www.zhihu.com/equation?tex=+S_1+%3D+B_%7B12%7D+-+B_%7B22%7D%5C%5C+S_2+%3D+A_%7B11%7D+%2B+A_%7B12%7D%5C%5CS_3+%3D+A_%7B21%7D+%2B+A_%7B22%7D%5C%5CS_4+%3D+B_%7B21%7D+-+B_%7B11%7D%5C%5CS_5+%3D+A_%7B11%7D+%2B+A_%7B22%7D%5C%5CS_6+%3D+B_%7B11%7D+%2B+B_%7B22%7D%5C%5CS_7+%3D+A_%7B12%7D+-+A_%7B22%7D%5C%5CS_8+%3D+B_%7B21%7D+%2B+B_%7B22%7D%5C%5CS_9+%3D+A_%7B11%7D+-+A_%7B21%7D%5C%5CS_%7B10%7D+%3D+B_%7B11%7D+%2B+B_%7B12%7D" alt=""></p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StrassenMatrix</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrassenMatrix</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMatrix</span><span class="params">(Matrix matrix, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                System.out.print(matrix.matrix[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 矩阵分割</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M12</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M21</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M22</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Divide</span><span class="params">(Matrix M, Matrix M11, Matrix M12, Matrix M21, Matrix M22, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 遍历整个M矩阵，将M的不同区域分割给不同的四个矩阵 通过一个常数n来划分，每个矩阵的数之间都隔了n，所以 不会有重复出现</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                M11.matrix[i][j] = M.matrix[i][j];</span><br><span class="line">                M12.matrix[i][j] = M.matrix[i][j + n];</span><br><span class="line">                M21.matrix[i][j] = M.matrix[i + n][j];</span><br><span class="line">                M22.matrix[i][j] = M.matrix[i + n][j + n];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 矩阵合并</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M12</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M21</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M22</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Matrix <span class="title function_">MergeMatrix</span><span class="params">(Matrix M11, Matrix M12, Matrix M21, Matrix M22, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">_return</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                _return.matrix[i][j] = M11.matrix[i][j];</span><br><span class="line">                _return.matrix[i][j + n] = M12.matrix[i][j];</span><br><span class="line">                _return.matrix[i + n][j] = M21.matrix[i][j];</span><br><span class="line">                _return.matrix[i + n][j + n] = M22.matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阶数为2的矩阵乘法--Strassen法</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Matrix <span class="title function_">MatrixMultiplication</span><span class="params">(Matrix x, Matrix y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> M1, M2, M3, M4, M5, M6, M7;</span><br><span class="line">        M1 = x.matrix[<span class="number">0</span>][<span class="number">0</span>] * (y.matrix[<span class="number">0</span>][<span class="number">1</span>] - y.matrix[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        M2 = y.matrix[<span class="number">1</span>][<span class="number">1</span>] * (x.matrix[<span class="number">0</span>][<span class="number">0</span>] + x.matrix[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        M3 = y.matrix[<span class="number">0</span>][<span class="number">0</span>] * (x.matrix[<span class="number">1</span>][<span class="number">0</span>] + x.matrix[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        M4 = x.matrix[<span class="number">1</span>][<span class="number">1</span>] * (y.matrix[<span class="number">1</span>][<span class="number">0</span>] - y.matrix[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        M5 = (x.matrix[<span class="number">0</span>][<span class="number">0</span>] * y.matrix[<span class="number">0</span>][<span class="number">0</span>] + x.matrix[<span class="number">0</span>][<span class="number">0</span>] * y.matrix[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">                + (x.matrix[<span class="number">1</span>][<span class="number">1</span>] * y.matrix[<span class="number">0</span>][<span class="number">0</span>] + x.matrix[<span class="number">1</span>][<span class="number">1</span>] * y.matrix[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        M6 = (x.matrix[<span class="number">0</span>][<span class="number">1</span>] * y.matrix[<span class="number">1</span>][<span class="number">0</span>] + x.matrix[<span class="number">0</span>][<span class="number">1</span>] * y.matrix[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">                - (x.matrix[<span class="number">1</span>][<span class="number">1</span>] * y.matrix[<span class="number">1</span>][<span class="number">0</span>] + x.matrix[<span class="number">1</span>][<span class="number">1</span>] * y.matrix[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        M7 = (x.matrix[<span class="number">0</span>][<span class="number">0</span>] * y.matrix[<span class="number">0</span>][<span class="number">0</span>] + x.matrix[<span class="number">0</span>][<span class="number">0</span>] * y.matrix[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">                - (x.matrix[<span class="number">1</span>][<span class="number">0</span>] * y.matrix[<span class="number">0</span>][<span class="number">0</span>] + x.matrix[<span class="number">1</span>][<span class="number">0</span>] * y.matrix[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">_return</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        _return.matrix[<span class="number">0</span>][<span class="number">0</span>] = M5 + M4 - M2 + M6;</span><br><span class="line">        _return.matrix[<span class="number">1</span>][<span class="number">0</span>] = M1 + M2;</span><br><span class="line">        _return.matrix[<span class="number">0</span>][<span class="number">1</span>] = M3 + M4;</span><br><span class="line">        _return.matrix[<span class="number">1</span>][<span class="number">1</span>] = M5 + M1 - M3 - M7;</span><br><span class="line">        <span class="keyword">return</span> _return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 矩阵乘法，阶数大于2</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Matrix <span class="title function_">MatrixMultiplication</span><span class="params">(Matrix x, Matrix y, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">A11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">A12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">A21</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">A22</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">B11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">B12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">B21</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">B22</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">C11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">C12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">C21</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">C22</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        Matrix M1, M2, M3, M4, M5, M6, M7;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> MatrixMultiplication(x, y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Matrix</span> <span class="variable">C</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            Divide(x, A11, A12, A21, A22, n / <span class="number">2</span>);</span><br><span class="line">            Divide(y, B11, B12, B21, B22, n / <span class="number">2</span>);</span><br><span class="line">            <span class="comment">// Divide(C, C11, C12, C21, C22, n / 2);</span></span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">            M1 = MatrixMultiplication(A11, MatrixModified(B12, B22, n, <span class="literal">false</span>), n);</span><br><span class="line">            M2 = MatrixMultiplication(MatrixModified(A11, A12, n, <span class="literal">true</span>), B22, n);</span><br><span class="line">            M3 = MatrixMultiplication(MatrixModified(A21, A22, n, <span class="literal">true</span>), B11, n);</span><br><span class="line">            M4 = MatrixMultiplication(A22, MatrixModified(B21, B11, n, <span class="literal">false</span>), n);</span><br><span class="line">            M5 = MatrixMultiplication(MatrixModified(A11, A22, n, <span class="literal">true</span>), MatrixModified(B11, B22, n, <span class="literal">true</span>), n);</span><br><span class="line">            M6 = MatrixMultiplication(MatrixModified(A12, A22, n, <span class="literal">false</span>), MatrixModified(B21, B22, n, <span class="literal">true</span>), n);</span><br><span class="line">            M7 = MatrixMultiplication(MatrixModified(A11, A21, n, <span class="literal">false</span>), MatrixModified(B11, B12, n, <span class="literal">true</span>), n);</span><br><span class="line">            C11 = MatrixModified(MatrixModified(M5, M4, n, <span class="literal">true</span>), MatrixModified(M2, M6, n, <span class="literal">false</span>), n, <span class="literal">false</span>);</span><br><span class="line">            C12 = MatrixModified(M1, M2, n, <span class="literal">true</span>);</span><br><span class="line">            C21 = MatrixModified(M3, M4, n, <span class="literal">true</span>);</span><br><span class="line">            C22 = MatrixModified(MatrixModified(M5, M1, n, <span class="literal">true</span>), MatrixModified(M3, M7, n, <span class="literal">true</span>), n, <span class="literal">false</span>);</span><br><span class="line">            C = MergeMatrix(C11, C12, C21, C22, n);</span><br><span class="line">            <span class="keyword">return</span> C;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 矩阵加减法</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Matrix <span class="title function_">MatrixModified</span><span class="params">(Matrix x, Matrix y, <span class="type">int</span> n, Boolean isPlus)</span> &#123;</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">_return</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (isPlus) &#123;</span><br><span class="line">                    _return.matrix[i][j] = x.matrix[i][j] + y.matrix[i][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    _return.matrix[i][j] = x.matrix[i][j] - y.matrix[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> _return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StrassenMatrix</span> <span class="variable">strassenMatrix</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrassenMatrix</span>();</span><br><span class="line">        <span class="comment">// int[][] M_X = &#123; &#123; 1, 1 &#125;, &#123; 1, 1 &#125; &#125;;</span></span><br><span class="line">        <span class="comment">// int[][] M_Y = &#123; &#123; 1, 1 &#125;, &#123; 1, 1 &#125; &#125;;</span></span><br><span class="line">        <span class="type">int</span>[][] M_X = &#123; &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125; &#125;;</span><br><span class="line">        <span class="type">int</span>[][] M_Y = &#123; &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125; &#125;;</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        x.matrix = M_X;</span><br><span class="line">        y.matrix = M_Y;</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">result</span> <span class="operator">=</span> strassenMatrix.MatrixMultiplication(x, y, <span class="number">8</span>);</span><br><span class="line">        strassenMatrix.printMatrix(result, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">32</span>][<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Matrix</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h3><p>两个$8*8$的单位矩阵相乘</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] M_X = &#123; </span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, </span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, </span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, </span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, </span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, </span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实验分析"><a href="#实验分析" class="headerlink" title="实验分析"></a>实验分析</h3><p>原始算法中矩阵乘法的时间复杂度为$O(n^3)$,而在Strassen算法中降低到$O(n^{\log_2^7})$。</p><p>因为在普通的矩阵乘法中，需要进行8次阶数减半的子矩阵递归相乘，再加上矩阵相加与合并的时间，就会使得简单的矩阵乘法变得极为缓慢，而最主要的时间是用在8次矩阵相乘。<br>$$<br>T(N) = 8*T(\frac{N}{2}) + Θ(N^2)<br>$$<br>Strassen算法最主要的贡献就是将8次矩阵乘法减少到了7次，使得整个算法的复杂度有所降低。</p><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/2020041272935f22805c6.png"/><h2 id="最近点对算法"><a href="#最近点对算法" class="headerlink" title="最近点对算法"></a>最近点对算法</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>求出平面中所有点对里欧几里得距离最短的点对。</p><p>欧几里得距离：<br>$$<br>h = \sqrt{(x_1-x_2)^2+(y_1-y_2)^2}<br>$$</p><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * NearestDots 最近点对算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NearestDots</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * generate random dots</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dot&gt; <span class="title function_">generateDots</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        List&lt;Dot&gt; dots = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            <span class="type">Dot</span> <span class="variable">dot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dot</span>(Math.random() * (num + <span class="number">2</span>), Math.random() * (num + <span class="number">5</span>));</span><br><span class="line">            dots.add(dot);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dots;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get distance between tow dots</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dot1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dot2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDistance</span><span class="params">(Dot dot1, Dot dot2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>) Math.sqrt(Math.pow(dot1.getX() - dot2.getX(), <span class="number">2.0</span>) + Math.pow(dot1.getY() - dot2.getY(), <span class="number">2.0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * divide a dot list into a half length list as well as it&#x27;s sorted bt dot.x</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dots</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isLeft</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dot&gt; <span class="title function_">getDividePart</span><span class="params">(List&lt;Dot&gt; dots, <span class="type">boolean</span> isLeft)</span> &#123;</span><br><span class="line">        List&lt;Dot&gt; _return = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (isLeft) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dots.size() / <span class="number">2</span>; i++) &#123;</span><br><span class="line">                _return.add(dots.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dots.size() / <span class="number">2</span>; i &lt; dots.size(); i++) &#123;</span><br><span class="line">                _return.add(dots.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get the min distance violently</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dots</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">violentResolver</span><span class="params">(List&lt;Dot&gt; dots)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">minDistance</span> <span class="operator">=</span> Double.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (Dot dot1 : dots) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Dot dot2 : dots) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dot1.equals(dot2)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">double</span> <span class="variable">distance</span> <span class="operator">=</span> getDistance(dot1, dot2);</span><br><span class="line">                <span class="keyword">if</span> (distance &lt; minDistance) &#123;</span><br><span class="line">                    minDistance = distance;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minDistance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get min distance by dividing</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dots</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">divideResolver</span><span class="params">(List&lt;Dot&gt; dots)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">minDistance</span> <span class="operator">=</span> Double.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">midIndex</span> <span class="operator">=</span> dots.size() / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// End condition of Recursion</span></span><br><span class="line">        <span class="keyword">if</span> (dots.size() == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> getDistance(dots.get(<span class="number">0</span>), dots.get(<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dots.size() == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> getDistance(dots.get(<span class="number">0</span>), dots.get(<span class="number">1</span>));</span><br><span class="line">            <span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> getDistance(dots.get(<span class="number">0</span>), dots.get(<span class="number">2</span>));</span><br><span class="line">            <span class="type">double</span> <span class="variable">d3</span> <span class="operator">=</span> getDistance(dots.get(<span class="number">1</span>), dots.get(<span class="number">2</span>));</span><br><span class="line">            <span class="keyword">return</span> Math.min(d1, Math.min(d2, d3));</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(dots, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Dot&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Dot d1, Dot d2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (d1.getX() &lt; d2.getX()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d1.getX() &gt; d2.getX()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;Dot&gt; leftUnion = getDividePart(dots, <span class="literal">true</span>);</span><br><span class="line">        List&lt;Dot&gt; rightUnion = getDividePart(dots, <span class="literal">false</span>);</span><br><span class="line">        minDistance = Math.min(divideResolver(leftUnion), divideResolver(rightUnion));</span><br><span class="line">        <span class="type">Dot</span> <span class="variable">midDot</span> <span class="operator">=</span> dots.get(midIndex);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> midIndex - <span class="number">4</span> &gt; <span class="number">0</span> ? midIndex - <span class="number">4</span> : <span class="number">0</span>; i &lt; (midIndex + <span class="number">3</span> &gt; dots.size() ? dots.size() : midIndex + <span class="number">3</span>)</span><br><span class="line">                &amp;&amp; i != midIndex; i++) &#123;</span><br><span class="line">            minDistance = Math.min(getDistance(midDot, dots.get(i)), minDistance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minDistance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NearestDots</span> <span class="variable">nearestDots</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NearestDots</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        List&lt;Dot&gt; dots = nearestDots.generateDots(num);</span><br><span class="line">        <span class="type">double</span> <span class="variable">min</span> <span class="operator">=</span> nearestDots.violentResolver(dots);</span><br><span class="line">        <span class="type">double</span> <span class="variable">min2</span> <span class="operator">=</span> nearestDots.divideResolver(dots);</span><br><span class="line">        System.out.println(min);</span><br><span class="line">        System.out.println(min2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点的数据结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dot</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> x;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Dot</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = x;</span><br><span class="line">            <span class="built_in">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(<span class="type">double</span> y)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验分析-1"><a href="#实验分析-1" class="headerlink" title="实验分析"></a>实验分析</h3><p>该算法主要是使用了分治递归的思想，难点在于处理两段分划合并时的情况。</p><h4 id="合并的情况"><a href="#合并的情况" class="headerlink" title="合并的情况"></a>合并的情况</h4><p>此时左侧导出的点对是所有点对中距离最短的点对，右边的点对也是，接下来需要判断靠近分割线的两个点是也是最短的点对，如果是，那么这个点对就是该段合并后的点中最短距离的点对！</p><p>合并中还会出现极端情况，也就是有点在分界线上，所以我们应该人为规定在分界线上的点应该归属为左半边还是右半边。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200412b3109f523aa38.png/imgzip"/><p>而后我们可以根据上面这个图得出：在分界线$x=x_i$处，周围最多有七个点有可能比分治时的最小值要小，因此只需要在合并时比较这几个点之间的距离就可以了。</p><h3 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200412820632390afac.png"/><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li>分治法算法设计思想的三个基本步骤是什么？如何证明分治算法的正确性？ </li></ol><ul><li>问题划分</li><li>递归求解</li><li>合并子问题的解</li></ul><p>使用数学归纳法来证明算法的正确性</p><ol start="2"><li>利用主方式求解 <code>Strassen’s</code> 矩阵乘法和最近点对算法效率的递归分析结果。</li></ol><p><strong>Strassen’s算法</strong><br>$$<br>Strassen’s算法: T(n) = 7<em>T(\frac{n}{2}) + Θ(n^2)<br>$$<br>根据主方式得出$f(n) = Θ(n^{\log_2{7-3}})$所以其时间复杂度就是<br>$$<br>T(n) = \Theta(n^{\log_27})<br>$$<br>*</em>最近点对算法**<br>$$<br>T(n)=2*T(\frac{n}{2})+\Theta(n)<br>$$<br>根据主方式得出$f(n) = \Theta(n)$所以其时间复杂度就是<br>$$<br>T(n)=\Theta(n\log{n})<br>$$</p><ol start="3"><li>解释怎样修改 Strassen’s 矩阵乘法算法，使得它也可以用于大小不必为 2 的幂的矩阵？ </li></ol><p>对半分割矩阵，只要能求解最小单元矩阵就能实现</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> length </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据 </tag>
            
            <tag> int </tag>
            
            <tag> this </tag>
            
            <tag> return </tag>
            
            <tag> trix </tag>
            
            <tag> matrix </tag>
            
            <tag> dots </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法分析入门系列(一) 排序算法</title>
      <link href="/2020/04/15/algorithmanalysis_1/"/>
      <url>/2020/04/15/algorithmanalysis_1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="main函数代码"><a href="#main函数代码" class="headerlink" title="main函数代码"></a><code>main</code>函数代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;插入排序-------------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] num = randomCreate(max);</span><br><span class="line">    printResult(num);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    <span class="type">int</span>[] temp1 = insertSort(num);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et - bt + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;合并排序-------------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] temp4 = randomCreate(max);</span><br><span class="line">    printResult(temp4);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt2</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    mergeSort(temp4);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et2</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et2 - bt2 + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;快速排序-------------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] temp5 = randomCreate(max);</span><br><span class="line">    printResult(temp5);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt3</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    quickSort(temp5, <span class="number">0</span>, temp5.length - <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et3</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et3 - bt3 + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp5);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;随机化快速排序--------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] temp9 = randomCreate(max);</span><br><span class="line">    printResult(temp9);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt7</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    quickSort(temp9, <span class="number">0</span>, temp9.length - <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et7</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et2 - bt2 + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp9);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;桶排序---------------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] temp6 = randomCreate(max);</span><br><span class="line">    printResult(temp6);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt4</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    temp6 = bucketSort(temp6, max);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et4</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et4 - bt4 + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp6);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;计数排序-------------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] temp7 = randomCreate(max);</span><br><span class="line">    printResult(temp7);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt5</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    temp7 = countSort(temp7);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et5</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et5 - bt5 + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp7);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;基数排序-------------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] temp8 = randomCreate(max);</span><br><span class="line">    printResult(temp8);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt6</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    radixSort(temp8, (max + <span class="string">&quot;&quot;</span>).length());</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et6</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et6 - bt6 + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp8);</span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="各个排序的源代码："><a href="#各个排序的源代码：" class="headerlink" title="各个排序的源代码："></a>各个排序的源代码：</h3><h4 id="插入排序："><a href="#插入排序：" class="headerlink" title="插入排序："></a>插入排序：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> A</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] insertSort(<span class="type">int</span>[] A) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将当前的数存储起来用来在0-i+1的区间内进行排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        temp = A[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp &lt; A[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                A[j] = A[j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                A[j] = temp;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j - <span class="number">1</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                A[<span class="number">0</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="合并排序："><a href="#合并排序：" class="headerlink" title="合并排序："></a>合并排序：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并排序</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> original</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] original)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (original == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;The array can not be null !!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> original.length;</span><br><span class="line">        <span class="keyword">if</span> (length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> length / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> partitionA[] = Arrays.copyOfRange(original, <span class="number">0</span>, middle);<span class="comment">// 拆分问题规模</span></span><br><span class="line">            <span class="type">int</span> partitionB[] = Arrays.copyOfRange(original, middle, length);</span><br><span class="line">            <span class="comment">// 递归调用</span></span><br><span class="line">            mergeSort(partitionA);</span><br><span class="line">            mergeSort(partitionB);</span><br><span class="line">            sort(partitionA, partitionB, original);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] partitionA, <span class="type">int</span>[] partitionB, <span class="type">int</span>[] original)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; partitionA.length &amp;&amp; j &lt; partitionB.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (partitionA[i] &lt;= partitionB[j]) &#123;</span><br><span class="line">                original[k] = partitionA[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                original[k] = partitionB[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == partitionA.length) &#123;</span><br><span class="line">            <span class="keyword">while</span> (k &lt; original.length) &#123;</span><br><span class="line">                original[k] = partitionB[j];</span><br><span class="line">                k++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == partitionB.length) &#123;</span><br><span class="line">            <span class="keyword">while</span> (k &lt; original.length) &#123;</span><br><span class="line">                original[k] = partitionA[i];</span><br><span class="line">                k++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="快速排序与随机快速排序："><a href="#快速排序与随机快速排序：" class="headerlink" title="快速排序与随机快速排序："></a>快速排序与随机快速排序：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> low 最低位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> high 最高位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> random 是否随机化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">boolean</span> random)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i, j, temp, t;</span><br><span class="line">        <span class="keyword">if</span> (low &gt; high) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i = low;</span><br><span class="line">        j = high;</span><br><span class="line">        <span class="comment">// 以第一位为分割中心</span></span><br><span class="line">        <span class="keyword">if</span> (!random) &#123;</span><br><span class="line">            temp = arr[low];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (<span class="type">int</span>) Math.random() * high;</span><br><span class="line">            temp = arr[index];</span><br><span class="line">            arr[index] = arr[low];</span><br><span class="line">            arr[low] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="comment">//先看右边，依次往左递减</span></span><br><span class="line">            <span class="keyword">while</span> (temp &lt;= arr[j] &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//再看左边，依次往右递增</span></span><br><span class="line">            <span class="keyword">while</span> (temp &gt;= arr[i] &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果满足条件则交换</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                t = arr[j];</span><br><span class="line">                arr[j] = arr[i];</span><br><span class="line">                arr[i] = t;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后将基准为与i和j相等位置的数字交换</span></span><br><span class="line">        arr[low] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">        <span class="comment">//递归调用左半数组</span></span><br><span class="line">        quickSort(arr, low, j - <span class="number">1</span>, random);</span><br><span class="line">        <span class="comment">//递归调用右半数组</span></span><br><span class="line">        quickSort(arr, j + <span class="number">1</span>, high, random);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="桶排序："><a href="#桶排序：" class="headerlink" title="桶排序："></a>桶排序：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 桶排序</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] bucketSort(<span class="type">int</span>[] A, <span class="type">int</span> max) &#123;</span><br><span class="line">        <span class="type">int</span>[] B = <span class="keyword">new</span> <span class="title class_">int</span>[max + <span class="number">1</span>];<span class="comment">// 0-max 总共max+1个数</span></span><br><span class="line">        <span class="type">int</span>[] reArray = <span class="keyword">new</span> <span class="title class_">int</span>[A.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            B[A[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; B.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= B[i]; j++) &#123;</span><br><span class="line">                <span class="comment">// i 是被排序的数的大小 B[i] 是大小为i的被排序数的个数</span></span><br><span class="line">                reArray[k] = i;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 计数排序</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] countSort(<span class="type">int</span>[] array) &#123;</span><br><span class="line">       <span class="comment">// 首先为所有元素申请足够大的空间</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">       <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (max &lt; array[i]) max = array[i];</span><br><span class="line">           <span class="keyword">if</span> (min &gt; array[i]) min = array[i];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> max - min + <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span>[] timesAndPosition = <span class="keyword">new</span> <span class="title class_">int</span>[maxLength];</span><br><span class="line">       <span class="type">int</span>[] finalArray = <span class="keyword">new</span> <span class="title class_">int</span>[array.length];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">           timesAndPosition[array[i] - min] += <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; maxLength; i++) &#123;</span><br><span class="line">           timesAndPosition[i] += timesAndPosition[i - <span class="number">1</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="type">int</span> <span class="variable">tempIndex</span> <span class="operator">=</span> array[i] - min;</span><br><span class="line">               finalArray[timesAndPosition[tempIndex] - <span class="number">1</span>] = array[i];</span><br><span class="line">               timesAndPosition[tempIndex]--;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> finalArray;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基数排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 待排序的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max   数组中最大数的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> max)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt;[] temp = <span class="keyword">new</span> <span class="title class_">List</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            temp[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= max; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">                temp[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">                temp[getFigure(array[i], k)].add(array[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> t : temp[i]) &#123;</span><br><span class="line">                    array[j] = t;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取整型数的第k位的数字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k   第k位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getFigure</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">// 先除以10的k-1次方，将需要获取的那位数移动到最后一位上，然后和10取余数，得到该位数</span></span><br><span class="line">        <span class="keyword">return</span> (num / ((<span class="type">int</span>) Math.pow(<span class="number">10</span>, k - <span class="number">1</span>))) % <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="随机数生成函数与打印函数："><a href="#随机数生成函数与打印函数：" class="headerlink" title="随机数生成函数与打印函数："></a>随机数生成函数与打印函数：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机数生成函数</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] randomCreate(<span class="type">int</span> num) &#123;</span><br><span class="line">        <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[num];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            array[i] = (<span class="type">int</span>) (Math.random() * num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 循环打印结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printResult</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]);</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200412c3e0f0e773e2c.png"/><blockquote><p> 单位：ns</p></blockquote><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><p>使用上文中的随机数生成函数生成1000个随机数字，然后再运行对应的排序算法，计时器使用的是Java原生的<code>System.nanoTime();</code></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li>算法科学解决问题的一般模式是什么？ </li></ol><ul><li>用自然语言的方式描述问题</li><li>抽象问题的共性，分析问题的特性</li><li>选用或者创建合适的数据结构模型</li><li>编写算法</li></ul><ol start="2"><li>确定性算法和随机性算法的差异在那里？随机化对于算法效率的影响如何？ </li></ol><ul><li>确定性算法对于随机情况是不稳定的，而随机性算法对于一般的随机情况而言更加的适用。当遇上极端情况时确定性算法就有可能不再适用而随机算法的随机化过程能较大程度的减少极端情况的影响。</li><li>能够普遍地提高算法的效率。如在随机化快速排序中，通过基准节点的随机化选择，就能较好的避免<code>已经排好序/逆序</code>的情况下的低效率。</li></ul><ol start="3"><li>如何理解算法效率分析的渐近特征和相对性？ </li></ol><ul><li>因为算法每次面对的信息量都不相同，所以就不能用一个准确的值去描述算法的绝对效率，于是就应该选择相对的<code>N</code>，也就是每个元操作（此处是我给出的概念，也就是抽象认知下不可分割的最小操作节点），单次元操作记作1，所有元操作的和最大值就是该算法的上界。</li><li>同样的，因为数据量的不尽相同，所以最终的效率只能逼近靠近理论的算法效率，也就是渐近特征</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> length </tag>
            
            <tag> 算法 </tag>
            
            <tag> 函数 </tag>
            
            <tag> int </tag>
            
            <tag> temp </tag>
            
            <tag> arr </tag>
            
            <tag> 排序 </tag>
            
            <tag> noti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Video Of WhuHan</title>
      <link href="/2020/04/04/561/"/>
      <url>/2020/04/04/561/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><iframe width="360" height="315" align="center" src="https://www.youtube-nocookie.com/embed/XU9FVqwO4TM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>三月March</title>
      <link href="/2020/04/03/560/"/>
      <url>/2020/04/03/560/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-pVaAnCow" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="494858498" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><blockquote><p>鬼知道我这个月经历了什么东西。</p></blockquote><p>每日高强度Coding，我都怀疑自己已经不太像个正常人了…</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200401e3face62152d6.png" alt="真实高强度Coding"/><p>原来我也会有对着电脑感到生理性呕吐的时候..</p><p>昨天人机交互课上老师随口一句：<strong>高考都要延迟了，你们开学是别想了</strong></p><p>等疫情过了想出去好好看看…毕竟谁也不想永远呆在家里。</p><h2 id="一代宗师：宗师，一代（人）"><a href="#一代宗师：宗师，一代（人）" class="headerlink" title="一代宗师：宗师，一代（人）"></a>一代宗师：宗师，一代（人）</h2><p>前两天抽空看了一代宗师，说来惭愧，以前一直以为一代宗师是指的叶问四部曲的第一部，后来才明白是王家卫的电影。王家卫的电影看的很少，基本算是没有吧，最近的一次交集应该是知道了《<a href="https://movie.douban.com/subject/1292213/">大话西游之大圣娶亲</a>》里那句流传甚广的<strong>爱你一万年</strong>是出自他的《<a href="https://movie.douban.com/subject/1291999/">重庆森林</a>》。</p><p>一代宗师更像是一部小说，对白更多的辅助人物形象的刻画，以及时代特征的描述，而不是像更多的武侠电影那样去推动剧情的发展。</p><p><strong>一如其冷静，不占烟火气的格调。</strong></p><blockquote><p>如果人生有四季，四十岁前，我的人生都是春天。</p></blockquote><blockquote><p>做羹要讲究火候。火候不到，众口难调，火候过了，事情就焦。做人也是这样。</p></blockquote><blockquote><p>暗事好做，明事难成。</p></blockquote><blockquote><p>宝森不是想当英雄，是想造时势。现在这炉子里，需要这根新柴。</p></blockquote><blockquote><p>让他搭手多大的面子，姓叶的不识抬举，咱可不要坏了规矩。</p></blockquote><blockquote><p>别跟他们一般见识，老人死守着规矩，新人什么时候才能出头啊。叶问是个好材料，就看他这次能不能出头。<br>宫家没有败绩，您又在这儿，他凭什么出头。</p></blockquote><blockquote><p>你的脾气啊，就是爹年轻的时候。眼睛里只有胜负，没有人情世故。人要往远看，过了山，眼界就开阔了。但凡一个人见不得人好，见不得人高明，是没有容人之心。咱们宫家的门槛高，但是不出小人。</p></blockquote><blockquote><p>人活这一世，能耐还在其次。有的成了面子，有的成了里子，都是时势使然。这次让你下来，是想求个始终，让你看看，爹是怎么退下来的。你从小是看着我跟人交手长大的，这是最后一次。你是订了亲的人了，江湖的事，和你没关系。当个好大夫，平平安安的，就是尽孝心了。</p></blockquote><p><a href="https://note.tanknee.cn/wapp/pages/view/share/s/1oyM5w17Uh7G2emBkt3pWCWG3ywNqR3DGAsg2RaZqQ1J2QPK">台词剪辑</a></p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/202003222594d66d57866.png/imgzip" alt="清河公园"></p><p>日丽风和，云销雨霁</p>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netease </tag>
            
            <tag> type </tag>
            
            <tag> server </tag>
            
            <tag> 时候 </tag>
            
            <tag> 疫情 </tag>
            
            <tag> o </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速提交git代码到多个托管平台</title>
      <link href="/2020/03/26/559/"/>
      <url>/2020/03/26/559/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://git.tanknee.cn/explore/repos">我的个人Git仓库</a></p><p><a href="https://github.com/TankNee">我的GitHub</a></p><blockquote><p>其实做法很简单，就是编写批处理程序。Linux下用bash，windows下用bat写，Linux我没有测试，但是应该没有什么问题。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m<span class="string">&quot;:tada: update my document&quot;</span></span><br><span class="line">git push -u github master &amp;&amp; git push -u origin master</span><br></pre></td></tr></table></figure><p>其中第三行的<code>github</code>和<code>origin</code>是远程仓库的名字，相关的名字可以在<code>.git/config</code>文件中找到，只需要替换那两个名称就OK了，会自动提交对应的修改。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>将这段文字保存到<code>push.bat</code>文件，Linux就保存到<code>push.sh</code>文件，然后打开终端，定位到该文件所在的目录，输入<code>./push</code>就会自动执行语句了。</p><blockquote><p>请把该脚本文件放在<code>.git</code>文件夹的同级目录</p></blockquote><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/20200326275585967af02.png"/>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> type </tag>
            
            <tag> 文件 </tag>
            
            <tag> git </tag>
            
            <tag> button </tag>
            
            <tag> github </tag>
            
            <tag> origin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何制作一个简单的网络爬虫？nodejs实现</title>
      <link href="/2020/03/15/spider/"/>
      <url>/2020/03/15/spider/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>接下来有打算每半个月写一点东西，不然写东西的频率太低就会造成正反馈，产出越来越少了。</p><p>这段时间一共做了三个爬虫：</p><ul><li>爬取丁香园的疫情数据</li><li>爬取联想的虚拟货币乐豆</li><li>第三个跟第一个类似，不过工作量大一点</li></ul><p>一共用了两种不同的技术，前两个是自己的思路，用的是nodejs+express+superagent，实话实说，nodejs做后台确实对数据很友好，再用一下Sequelize做ORM对象映射，真的非常的方便。</p><p>做这个也是为了熟悉express的架构为以后填坑，虽然坑也不是特别多。</p><p>自己还给Sequelize文档做了一个镜像仓库，方便访问。<a href="https://git.tanknee.cn/tanknee/Sequelize-Docs-zh-CN">文档</a></p><p>不过用JavaScript写程序有一点着实无法避免，那就是异步操作。</p><p>JavaScript作为浏览器的主要逻辑实现语言，少不了对网络操作的支持，如果浏览器不使用异步来获取数据的话就会有页面加载缓慢等问题，而在JavaScript写的后端中也是避免不了处理异步操作，<strong>比较头疼的就是循环异步操作</strong>，我查了网上很多的文档，主要的解决方案是循环递归嵌套promise，然后保证获取到最后一个promise对象，然后等待他的resolve或者reject。</p><p>来详细说说这几个工程吧。</p><h2 id="丁香园数据爬取"><a href="#丁香园数据爬取" class="headerlink" title="丁香园数据爬取"></a>丁香园数据爬取</h2><p>这个项目是我自发进行的，做了大概有三四天的样子吧。</p><p>分析页面数据</p><p>打开<a href="https://ncov.dxy.cn/ncovh5/view/pneumonia?scene=2&clicktime=1579582238&enterid=1579582238&from=timeline&isappinstalled=0">丁香园</a>的网站，右键查看网页源码，可以看到丁香园的数据是后端渲染的，所有需要的数据都以json的形式嵌入到html的JavaScript中。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/202003155d1421c9ee328.png/imgzip"/><p>其实最开始的丁香园页面并不是这个样子的，最开始并没有那么直观，都是写在html标签页里。</p><blockquote><p>　我估计是为了方便各位网友爬取它的数据？毕竟写成html＋JavaScript的非常利于爬取</p></blockquote><p>而且里面的数据几乎都已经是完美严格的json格式，只需要使用<code>JSON.parse()</code>就好了。后台也没什么好说的，直接写一个定时器，定时爬取即可。<del>暴露一些接口就能在GitHub上收割</del>。</p><h2 id="联想虚拟货币爬取"><a href="#联想虚拟货币爬取" class="headerlink" title="联想虚拟货币爬取"></a>联想虚拟货币爬取</h2><p>这是酷安老哥找我做的一个项目，毕竟是人生中<strong>第一笔</strong>外包，我犹豫了两分钟马上就开始做了。第一天花了半天研究了页面，分析了重难点。</p><ul><li>每一个账号的货币数量是不同的，需要登陆账号</li><li>联想对单个IP有登录限制，如果单位时间内请求过多就会封锁IP一段时间</li><li>获取网页元素</li></ul><p>第一点是我在这部分中遇到的第一个坑。因为以前做的都是不用登陆的页面，只需要获取的HTML数据就可以直接分析了，所以上网查了一些资料。</p><p>其实要解决起来也很简单，就是模拟登陆操作，获取联想服务器返回的cookie数据，然后之后都带着这个cookie去访问货币查询的页面就好了。</p><blockquote><p>这里穿插一些我对网页安全性的思考：</p><p>网页是安全的吗？</p><p>不是，没有网页是安全的，纯粹的网页几乎不可能是完全安全的，所以很多的网银都需要插上一些硬件工具去确保安全性。</p><p>那么网页可以做到相对安全吗？</p><p>可以，也是应该的。</p><p>使用session或者cookie或是token来区别用户属性，避免未登录的未知用户查看敏感页面，并加上过期特性，保证数据的安全。</p><p>使用不可逆的加密方式对用户输入的密码加以保护，只有这样，后台在不需要知道用户真实密码的情况下确认用户的登录状态。我个人认为MD5加密是一种对我这个水平而言相对较好的用户信息加密方式。</p></blockquote><p>在分析联想的登录界面时，发现了一个让我哭笑不得的地方。</p><ul><li>联想的登录页面的密码是加密的</li><li>加密用的算法是base64，这个不是不可逆的加密算法</li></ul><blockquote><p><strong>百度百科</strong></p><p>Base64是网络上最常见的用于传输8Bit<a href="https://baike.baidu.com/item/字节码/9953683">字节码</a>的编码方式之一，Base64就是一种基于64个可打印字符来表示<a href="https://baike.baidu.com/item/二进制/361457">二进制</a>数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。</p><p>Base64编码是从二进制到字符的过程，可用于在<a href="https://baike.baidu.com/item/HTTP">HTTP</a>环境下传递较长的标识信息。采用Base64编码具有不可读性，需要解码后才能阅读。</p></blockquote><p>甚至在联想的某些登录页面，密码是明文传输的…<strong>我对联想的技术水平是真的无语了</strong>，我就不说是哪几个页面了。</p><p>解决了登录这个问题之后就基本上搞定了一大半。</p><p>而后是运维和调优，其间遇到IP被封锁，我就设了爬取时间间隔，就基本上没出过问题了。</p><h2 id="信息获取的方式"><a href="#信息获取的方式" class="headerlink" title="信息获取的方式"></a>信息获取的方式</h2><p>现在网页主要是两种</p><ol><li>后端渲染的SSR页面，或者是prerender预渲染</li><li>单页面应用，前端请求数据前端渲染</li></ol><p>第二种对爬虫不友好，只能手动去找前端接口，然后看运气能能不能请求到对应的数据，比较随缘。</p><p>第一种的话我现在大多是用的正则表达式，JavaScript对正则还是比较友好的，操作dom也很方便，基本流程就是</p><ul><li>查看网页源码</li><li>找到需要数据</li><li>寻找唯一标识符</li><li>编写正则表达式</li><li>挑选数据并保存或者发送</li></ul><p>在使用正则表达式之前可以使用dom操作工具将需要搜索的范围缩小，便于匹配。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 操作 </tag>
            
            <tag> 对象 </tag>
            
            <tag> 疫情 </tag>
            
            <tag> 字符 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据 </tag>
            
            <tag> 页面 </tag>
            
            <tag> javascript </tag>
            
            <tag> base64 </tag>
            
            <tag> 网页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本编程最简尝试</title>
      <link href="/2020/03/09/556/"/>
      <url>/2020/03/09/556/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p>每一个shell脚本都需要一个注解，形如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">n 其中n为数字，是外界输入到脚本里的参数</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0 代表文件本身</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1 是第一个参数</span></span><br></pre></td></tr></table></figure><p>读取外部文本内容并输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">while read line</span><br><span class="line">do</span><br><span class="line">    echo $line</span><br><span class="line">done &lt; $1</span><br></pre></td></tr></table></figure><p>其中<code>$1</code>是外部文件名，line是该文本里的每一行的内容。通过一个while循环输出文本内容。</p><p>本次作业：</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/20200309cacf45e759a82.png"/><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Line Count</span></span><br><span class="line">lineCount=0 # 初始化行计数器</span><br><span class="line"></span><br><span class="line">while read line</span><br><span class="line">do</span><br><span class="line">    echo $line # 输出每一行的内容</span><br><span class="line">    lineCount=`expr $lineCount + 1` # 行计数器自增</span><br><span class="line">done &lt; $1</span><br><span class="line">echo $lineCount # 输出行数</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 参数 </tag>
            
            <tag> linecount </tag>
            
            <tag> echo </tag>
            
            <tag> bin </tag>
            
            <tag> 行计数器 </tag>
            
            <tag> line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二月February</title>
      <link href="/2020/03/02/555/"/>
      <url>/2020/03/02/555/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-eZMmbuqM" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="3932159" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><blockquote><p>闰年的二月也没有比普通年份的二月更加特别</p></blockquote><p>在家里的生活平淡的像一盆水，翻不出什么花样。每天早上起来：八点了，那就再睡半个钟头，才七点？那就玩会儿手机，然后跑到电脑前上神经兮兮的网课。</p><p>网课很好的证明了大学里上不上课基本上是<strong>没什么区别</strong>的，除非你真的在听课？<strong>你不会真的有听课吧？</strong></p><p>25号的时候村里终于开放了出去的权限，只有血统纯正的村里人，才能进出无阻，甚至还能在路边打到滴滴。</p><p>那天碰见的滴滴司机是个外省人，老婆孩子都回去了，疫情爆发，自己没来得及回家，导致现在一个人待在异乡，连吃了半个月的面，最后两天甚至连菜叶都没有，迫不得已去拿隔壁阿婆的菜。</p><p>无心评价对错。</p><blockquote><p>村里不给外村人发配菜，外村人家里弹尽粮绝，隔壁阿婆蔬菜满园。</p></blockquote><p>怎么个选法也不必多说吧。反正我家还有火锅吃。</p><p>前几天还看到站在KFC门口点外卖的段子，愣是让外卖小哥站着血赚配送费，没想到自己到了KFC门口时，也活成了段子…</p><p><strong>日子也没啥过头，天天歌舞升平，看片吃肉</strong></p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/2020030276ae2c9ca5514.png"/><p>这一个月看的电影，怕是比我前几年加起来看的都多。在家里把公立里<strong>祖传</strong>的投影仪架起来，投在家里那面潮的不行的破墙上，看着还挺舒服哈哈哈。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/2020030247e74e47f31b9.jpg" alt="你永远不知道墙上会出现什么东西"/><blockquote><p>恐怖直播</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> meting </tag>
            
            <tag> netease </tag>
            
            <tag> type </tag>
            
            <tag> server </tag>
            
            <tag> 时候 </tag>
            
            <tag> 疫情 </tag>
            
            <tag> 网课 </tag>
            
            <tag> 外村 </tag>
            
            <tag> kfc </tag>
            
            <tag> 滴滴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一月January</title>
      <link href="/2020/02/03/%E4%B8%80%E6%9C%88Jan/"/>
      <url>/2020/02/03/%E4%B8%80%E6%9C%88Jan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>[Meting]<br>[Music server=”netease” id=”208902” type=”song”/]<br>[/Meting]</p><blockquote><p>刚刚在翻以前写的博客时，突然想起来自己还没有写一月份的博客</p></blockquote><p>习惯性的想要给文章找一首歌，但因为这两天一直在家里，基本上就没怎么听歌，歌单里最新收藏的是蔡健雅的红色高跟鞋，没什么寓意，就是觉得熟悉，便收藏了。</p><p>三号早上考完了大物，自信满满地走出考场，结果到头来只有那么点分数，可能我是真的不配学物理，当然，汇编，数据结构，Java我大概也是都不配学的。</p><p>算了，好歹都过了，我就不强求了。</p><p>这个月随缘做项目，其实也不知道为了什么，可能就是为了开心吧，感觉这个寒假连游戏都没代码有意思，靠，这还是我吗，我震惊了。</p><p>根据一本electron的入门指导书做了一个简单的markdown编辑器，修修改改，甚至还想着用vue重写，但是应该是会懒得写了，也不一定是吧，说不定我开心我就写了呢？</p><blockquote><p>Neeto Markdown Editor</p></blockquote><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/02/202002033efdd0d63160f.png"/><p>其实我写的还是挺漂亮的对吧…基本的功能我还是都做完了的呢。但是为什么没人给我⭐..//小声逼逼</p><p>刚做完markdown编辑器，冠状病毒就爆发了，前前后后去检查了好几次，被人用枪测了好几次体温，尽管如此，我还是不放心，花了两百大洋去乐清医院挂了号，拍了CT，最后当然是p事没有，有时候会肉疼自己的两百块钱，但一想到不测的话就会心慌好久，就没那么肉疼了。</p><p>之后又看到丁香园出的疫情地图，信息很全，正好手边也在看node js，就准备整一个疫情数据的接口，然后开放开源//收割⭐，走上人生巅峰（大雾）。</p><p>不过确实靠着这个项目拿到了目前为止最多的⭐（7个），每天早上爬起来看到⭐数目变多，api使用数增加就感到特别的满足，可能这就是<strong>程序员</strong>吧？</p><blockquote><p>WuHan-nCoV-2019-DataAPI</p></blockquote><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/02/20200203c2dc608ffec63.png"/><p>手头还有两个在做的项目，我真的是精力充沛…希望不会秃的太早吧</p><p>武汉加油，温州加油，我想吃糯米饭（哭腔）</p>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> meting </tag>
            
            <tag> netease </tag>
            
            <tag> type </tag>
            
            <tag> server </tag>
            
            <tag> 汇编 </tag>
            
            <tag> Java </tag>
            
            <tag> electron </tag>
            
            <tag> markdown </tag>
            
            <tag> node </tag>
            
            <tag> 疫情 </tag>
            
            <tag> 逼逼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WuHan-nCoV-2019疫情数据接口</title>
      <link href="/2020/01/29/ncov/"/>
      <url>/2020/01/29/ncov/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="nCov-DataCollect"><a href="#nCov-DataCollect" class="headerlink" title="nCov-DataCollect"></a>nCov-DataCollect</h1><blockquote><p>本接口又复活辣，3.2更新，请移步GitHub [button color=”info” icon=”” url=”<a href="https://github.com/TankNee/nCoV-2019-DataAPI&quot;">https://github.com/TankNee/nCoV-2019-DataAPI&quot;</a> type=””]Github地址[/button]</p></blockquote><blockquote><p>数据来自<a href="http://t.cn/A6vBv3yL">丁香园</a></p></blockquote><p>[scode type=”red”]武汉加油，温州加油[/scode]</p><p>本项目基于nodejs-express框架构建，使用正则表达式爬取页面信息</p><h2 id="数据可视化查看地址"><a href="#数据可视化查看地址" class="headerlink" title="数据可视化查看地址"></a>数据可视化查看地址</h2><p><a href="http://ncov.tanknee.cn/admin">管理后台</a></p><blockquote><p>登录用户名 ： <code>demo</code></p><p>登录密码：<code>demo</code></p><p>模板来源：<a href="https://github.com/lin-xin/vue-manage-system">lin-xin</a></p></blockquote><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/01/20200129bfa81ed0c5c5c.png"/><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/01/202001292c6a1345064f1.png"/><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/01/202001294869760b6e94b.png"/><h2 id="api接口地址"><a href="#api接口地址" class="headerlink" title="api接口地址"></a>api接口地址</h2><h4 id="基础URL："><a href="#基础URL：" class="headerlink" title="基础URL："></a>基础URL：</h4><blockquote><p><a href="http://ncov.tanknee.cn/api/">http://ncov.tanknee.cn/api/</a></p></blockquote><h3 id="获取后台数据库中的最新数据："><a href="#获取后台数据库中的最新数据：" class="headerlink" title="获取后台数据库中的最新数据："></a>获取后台数据库中的最新数据：</h3><blockquote><p><a href="http://ncov.tanknee.cn/api/">http://ncov.tanknee.cn/api/</a></p></blockquote><h4 id="请求方法："><a href="#请求方法：" class="headerlink" title="请求方法："></a>请求方法：</h4><p> <code>GET</code></p><h4 id="返回实例"><a href="#返回实例" class="headerlink" title="返回实例:"></a>返回实例:</h4><blockquote><p>只截取了部分数据</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;sumInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1559</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">7830</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">135</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">170</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">12139</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580387755098</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;provinceInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">19270</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖北省&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖北&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">4586</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">90</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">162</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580387755098</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">176949</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;武汉&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖北&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">2261</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">54</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">129</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580387755098</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span>....</span><br></pre></td></tr></table></figure><h4 id="返回实例参数："><a href="#返回实例参数：" class="headerlink" title="返回实例参数："></a>返回实例参数：</h4><table><thead><tr><th>参数名称</th><th>参数类型</th><th>备注</th></tr></thead><tbody><tr><td>provinceName</td><td>String</td><td>省份全名</td></tr><tr><td>provinceShortName</td><td>String</td><td>省份短名</td></tr><tr><td>cityName</td><td>String</td><td>城市名称</td></tr><tr><td>confirmedCount</td><td>number</td><td>确诊人数</td></tr><tr><td>suspectedCount</td><td>number</td><td>疑似人数</td></tr><tr><td>curedCount</td><td>number</td><td>治愈人数</td></tr><tr><td>deadCount</td><td>number</td><td>死亡人数</td></tr><tr><td>addtime</td><td>number</td><td>爬取时间</td></tr></tbody></table><h3 id="获取实时数据："><a href="#获取实时数据：" class="headerlink" title="获取实时数据："></a>获取实时数据：</h3><blockquote><p><a href="http://ncov.tanknee.cn/api/realtime">http://ncov.tanknee.cn/api/realtime</a></p></blockquote><h4 id="请求方法：-1"><a href="#请求方法：-1" class="headerlink" title="请求方法："></a>请求方法：</h4><p> <code>GET</code></p><h3 id="获取疫情总和数据的全部历史数据："><a href="#获取疫情总和数据的全部历史数据：" class="headerlink" title="获取疫情总和数据的全部历史数据："></a>获取疫情总和数据的全部历史数据：</h3><blockquote><p><a href="http://ncov.tanknee.cn/api/sum">http://ncov.tanknee.cn/api/sum</a></p></blockquote><h4 id="请求方法：-2"><a href="#请求方法：-2" class="headerlink" title="请求方法："></a>请求方法：</h4><p><code>GET</code></p><h3 id="获取单一省份的最新数据："><a href="#获取单一省份的最新数据：" class="headerlink" title="获取单一省份的最新数据："></a>获取单一省份的最新数据：</h3><blockquote><p><a href="http://ncov.tanknee.cn/api/province">http://ncov.tanknee.cn/api/province</a></p></blockquote><h4 id="请求参数："><a href="#请求参数：" class="headerlink" title="请求参数："></a>请求参数：</h4><table><thead><tr><th>参数名称</th><th>参数类型</th><th>备注</th></tr></thead><tbody><tr><td>province</td><td>String</td><td>省份名称</td></tr><tr><td>all</td><td>String</td><td>是否获取全部历史消息，默认为false</td></tr></tbody></table><h4 id="请求方法：-3"><a href="#请求方法：-3" class="headerlink" title="请求方法："></a>请求方法：</h4><p> <code>POST</code></p><h4 id="返回实例："><a href="#返回实例：" class="headerlink" title="返回实例："></a>返回实例：</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;provinceInfo&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">5944</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浙江省&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浙江&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">173</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580224800003</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;citiesOfProvince&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">47028</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;温州&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浙江&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">60</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580224800003</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">47029</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;杭州&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浙江&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580224800003</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">47030</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台州&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浙江&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580224800003</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">47031</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;宁波&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浙江&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580224800003</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">47032</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;嘉兴&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浙江&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580224800003</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">47033</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;绍兴&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浙江&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580224800003</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">47034</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;金华&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浙江&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580224800003</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">47035</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;衢州&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浙江&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580224800003</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">47036</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;丽水&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浙江&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580224800003</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">47037</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;舟山&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浙江&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580224800003</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">47038</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖州&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浙江&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580224800003</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="返回实例参数：-1"><a href="#返回实例参数：-1" class="headerlink" title="返回实例参数："></a>返回实例参数：</h4><table><thead><tr><th>参数名称</th><th>参数类型</th><th>备注</th></tr></thead><tbody><tr><td>provinceName</td><td>String</td><td>省份全名</td></tr><tr><td>provinceShortName</td><td>String</td><td>省份短名</td></tr><tr><td>cityName</td><td>String</td><td>城市名称</td></tr><tr><td>confirmedCount</td><td>number</td><td>确诊人数</td></tr><tr><td>suspectedCount</td><td>number</td><td>疑似人数</td></tr><tr><td>curedCount</td><td>number</td><td>治愈人数</td></tr><tr><td>deadCount</td><td>number</td><td>死亡人数</td></tr><tr><td>addtime</td><td>number</td><td>爬取时间</td></tr></tbody></table><h3 id="获取单一城市的全部信息："><a href="#获取单一城市的全部信息：" class="headerlink" title="获取单一城市的全部信息："></a>获取单一城市的全部信息：</h3><blockquote><p><a href="http://ncov.tanknee.cn/api/city">http://ncov.tanknee.cn/api/city</a></p></blockquote><h4 id="请求参数：-1"><a href="#请求参数：-1" class="headerlink" title="请求参数："></a>请求参数：</h4><table><thead><tr><th>参数名称</th><th>参数类型</th><th>备注</th></tr></thead><tbody><tr><td>cityname</td><td>String</td><td>城市名称</td></tr><tr><td>all</td><td>String</td><td>是否获取全部历史消息，默认为false</td></tr></tbody></table><h4 id="请求方法：-4"><a href="#请求方法：-4" class="headerlink" title="请求方法："></a>请求方法：</h4><p> <code>POST</code></p><h4 id="返回实例：-1"><a href="#返回实例：-1" class="headerlink" title="返回实例："></a>返回实例：</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">46994</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cityName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;武汉&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;provinceShortName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;湖北&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;confirmedCount&quot;</span><span class="punctuation">:</span> <span class="number">1590</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;suspectedCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;curedCount&quot;</span><span class="punctuation">:</span> <span class="number">47</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deadCount&quot;</span><span class="punctuation">:</span> <span class="number">85</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;addtime&quot;</span><span class="punctuation">:</span> <span class="number">1580224800003</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h4 id="返回实例参数：-2"><a href="#返回实例参数：-2" class="headerlink" title="返回实例参数："></a>返回实例参数：</h4><table><thead><tr><th>参数名称</th><th>参数类型</th><th>备注</th></tr></thead><tbody><tr><td>provinceShortName</td><td>String</td><td>省份短名</td></tr><tr><td>cityName</td><td>String</td><td>城市名称</td></tr><tr><td>confirmedCount</td><td>number</td><td>确诊人数</td></tr><tr><td>suspectedCount</td><td>number</td><td>疑似人数</td></tr><tr><td>curedCount</td><td>number</td><td>治愈人数</td></tr><tr><td>deadCount</td><td>number</td><td>死亡人数</td></tr><tr><td>addtime</td><td>number</td><td>爬取时间</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 地址 </tag>
            
            <tag> 类型 </tag>
            
            <tag> 参数 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> addtime </tag>
            
            <tag> curedcount </tag>
            
            <tag> deadcount </tag>
            
            <tag> cityname </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Neeto - 我所期待的MD编辑器</title>
      <link href="/2020/01/21/neetoad/"/>
      <url>/2020/01/21/neetoad/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>或许，这个简陋的项目更应该被称为<code>Electron &amp;&amp; JavaScript</code> 的<strong>最佳实践</strong>！</p></blockquote><h2 id="Neeto的起源"><a href="#Neeto的起源" class="headerlink" title="Neeto的起源"></a>Neeto的起源</h2><p>最初这个项目是基于Steve Kinney的 <strong>《Electron跨平台开发实战》</strong> 一书第三章的Fire Sale项目。这本书写的挺好，通俗易懂，并且比较有借鉴价值。本来的计划是抛开那本书重新构建Neeto的架构，但有些代码我也不想做重复工作，所以就没有另开一个工程。</p><h2 id="Neeto的背景"><a href="#Neeto的背景" class="headerlink" title="Neeto的背景"></a>Neeto的背景</h2><p>这个项目用了很多node仓库里的第三方模块，没有这些模块我也很难在十天左右的开发工期里完成Neeto的编写。比较核心的有下面这几个：</p><ul><li><code>&quot;jquery&quot;: &quot;^3.4.1&quot;</code></li><li><code>&quot;mdui&quot;: &quot;^0.4.3&quot;</code>一个Google MD设计规范的UI库</li><li><code>&quot;showdown&quot;: &quot;^1.9.1&quot;</code> Neeto使用的markdown语法解析器</li><li><code>&quot;showdown-highlight&quot;: &quot;^2.1.3&quot;</code> showdown的代码语法解析插件</li><li><code>&quot;showdown-katex&quot;: &quot;^0.6.0&quot;</code>showdown的LaTeX语法解析插件</li><li><code>&quot;simplemde&quot;: &quot;^1.11.2&quot;</code> 替代原本的textarea组件，实现更加丰富的操作</li></ul><p>不过我在写Neeto时基本没有用到当下流行的第三方库：<code>Vue or React or Angular</code>，因为我想要在下个版本中用Vue重写Neeto，有很多方面都有改进的空间。并且因为我是基本上用的纯<code>JavaScript</code>写的，所以好多地方都十分的原始而简陋。我执意用原生js写的另一个目的就是尽可能熟悉js的一些用法，包括回调，异步，非阻塞性等等。</p><h2 id="Neeto的设计思路"><a href="#Neeto的设计思路" class="headerlink" title="Neeto的设计思路"></a>Neeto的设计思路</h2><p>说到思路，不得提我最喜欢的Markdown编辑器-<code>Typora</code> 毫无疑问，我相信<code>Typora</code>一定是Windows与MacOs上最优秀的编辑器，简洁，功能丰富，设计优雅。我的数据结构复习与汇编复习都是用<code>Typora</code>完成的，它是如此的完美以至于让我都快忘记了它的一些瑕疵。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://pic.tanknee.cn/blogpicbed/2020/01/20200121fafdbc463733c.png"><p>它所见即所得（WYSIWYG）的实现效果让我理所当然的觉得，一款编辑器不就应该这样吗。当你写下你的灵感，编辑器将你的灵感完整无误地渲染成你所想的样子。</p><p>因此我在改写之时，就准备将<code>Typora</code>作为Neeto最好的榜样，并且我希望能比<code>Typora</code>做的更好！</p><p>所以说，这个项目更像是补全，弥补我在<code>Typora</code>中未能得到的遗憾：</p><ul><li>自定义图片上传的图床√</li><li>云笔记功能-未实现</li><li>一次写作，多个写作平台（知乎，微信，CSDN等）完整实现效果√</li><li>Web网页管理云笔记-未实现</li><li>小程序查看云笔记-未实现</li></ul><p>可以比较清晰的看到，我所想要实现的几个需求基本上都与网络相关，而<code>Typora</code>给自己的定位就仅仅是<br><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://pic.tanknee.cn/blogpicbed/2020/01/2020012118cd17564fd0a.png"></p><p><code>Readable &amp; Writable</code> 读写是<code>Typora</code>的核心功能，可以预见，作者并不准备为<code>Typora</code>提供与网络相关的功能，在win与mac两个平台上，也仅仅只有mac可以用一个插件来上传本地图片。</p><blockquote><p>Neeto的后期计划表里也有打算实现插件系统，不过应该会是很后面</p></blockquote><p>我在这个版本<code>Version_1.0.8</code>中，使用json文件来存储图床的配置信息，这只是实验性的尝试，并不保证长期有效性</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://pic.tanknee.cn/blogpicbed/2020/01/20200121de7ec9af61ac3.png"><p>后续我会支持更多的图床，如阿里云OSS，腾讯云COS，七牛云CDN等等。</p><blockquote><p><strong>什么是图床:</strong></br><br>图床是网络图片的一种存储方式，Web页面通过一条URL来获取图片。用户将图片上传到图床之后，图床服务器返回一条JSON消息，其中包含上传图片的网络URL，使用图床给定的图片链接就可以在多个地方调用图片，而不会出现本地图片无法直接使用的尴尬场面。</p></blockquote><h2 id="一些简单的小功能的实现"><a href="#一些简单的小功能的实现" class="headerlink" title="一些简单的小功能的实现"></a>一些简单的小功能的实现</h2><h3 id="一键复制到微信公众号平台"><a href="#一键复制到微信公众号平台" class="headerlink" title="一键复制到微信公众号平台"></a>一键复制到微信公众号平台</h3><p>点击Neeto头部的菜单栏，可以看到文件菜单选项。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://pic.tanknee.cn/blogpicbed/2020/01/2020012123c54dc8bed04.png"><p>点击之后会出现复制成功的提示</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://pic.tanknee.cn/blogpicbed/2020/01/20200121c297065f7218d.png"><p>然后直接前往微信公众号后台粘贴就可以实现带格式粘贴。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://pic.tanknee.cn/blogpicbed/2020/01/20200121fcc41916a6643.png"><p>使用时需要注意的几个地方：</p><ul><li>复制时使用的图片应为网络图片，如果使用本地图片会出现上传失败的问题？</li><li>尽量使用体积小的图片。</li></ul><blockquote><p><strong>图片上传技巧</strong></br><br>可以将图片直接拖入左侧的文本编辑区域，也可以用QQ，Wechat等软件的截图工具截图后，直接在文本编辑区内粘贴，粘贴成功后顶部会出现LightTip提示上传成功。</p></blockquote><h3 id="图片拖入后上传"><a href="#图片拖入后上传" class="headerlink" title="图片拖入后上传"></a>图片拖入后上传</h3><p>这个功能是基于原书上拖入事件更改的，但我觉得是一个很有意思的部分，可以通过这一部分理解JS的处理哲学。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听drop事件--JavaScript是事件驱动的</span></span><br><span class="line">smde.<span class="property">codemirror</span>.<span class="title function_">on</span>(<span class="string">&quot;drop&quot;</span>, <span class="keyword">function</span> (<span class="params">editor, e</span>) &#123;</span><br><span class="line"><span class="comment">//获取文件对象</span></span><br><span class="line">    <span class="keyword">const</span> file = <span class="title function_">getDroppedFile</span>(e)</span><br><span class="line">    <span class="comment">//获取dataTransfer对象</span></span><br><span class="line">    <span class="keyword">var</span> df = e.<span class="property">dataTransfer</span></span><br><span class="line"><span class="comment">//处理文件</span></span><br><span class="line">    <span class="title function_">dealWithFile</span>(file, df)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">dealWithFile</span> = (<span class="params">file, df</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 文件对象数组</span></span><br><span class="line">    <span class="keyword">var</span> dropFiles = []</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(file)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">fileTypeIsSupported</span>(file)) &#123;</span><br><span class="line"><span class="comment">// 如果这个文件是图片类型的，就去处理这个文件对象</span></span><br><span class="line">        <span class="keyword">if</span> (file.<span class="property">type</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;image&quot;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取图片的File对象</span></span><br><span class="line">            <span class="keyword">if</span> (df.<span class="property">items</span> !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="comment">// Chrome有items属性，对Chrome的单独处理</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; df.<span class="property">items</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> item = df.<span class="property">items</span>[i];</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="title function_">getAsFile</span>())</span><br><span class="line">                    <span class="comment">// 用webkitGetAsEntry禁止上传目录</span></span><br><span class="line">                    <span class="keyword">if</span> (item.<span class="property">kind</span> === <span class="string">&quot;file&quot;</span> &amp;&amp; item.<span class="title function_">webkitGetAsEntry</span>().<span class="property">isFile</span>) &#123;</span><br><span class="line">                        <span class="keyword">var</span> dropFile = item.<span class="title function_">getAsFile</span>();</span><br><span class="line"><span class="comment">// 判断完这个对象之后压入数组中</span></span><br><span class="line">                        dropFiles.<span class="title function_">push</span>(dropFile);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 上传到图床</span></span><br><span class="line">            dropFiles.<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// formdata的作用是构建post的请求body部分</span></span><br><span class="line">                <span class="keyword">const</span> formdata = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">                formdata.<span class="title function_">append</span>(<span class="string">&#x27;image&#x27;</span>, file)</span><br><span class="line"><span class="comment">// loading是加载动画的一段语句，在图片上传的过程中用于占位</span></span><br><span class="line">                smde.<span class="property">codemirror</span>.<span class="property">doc</span>.<span class="title function_">replaceSelection</span>(loading)</span><br><span class="line">                <span class="keyword">if</span> (baseConfig.<span class="property">picBedUrl</span>) &#123;</span><br><span class="line">                    <span class="title function_">uploadToPicBeds</span>(formdata, baseConfig.<span class="property">picBedUrl</span>, baseConfig.<span class="property">token</span>)</span><br><span class="line">                        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                            <span class="keyword">var</span> finalUrl = <span class="string">`&lt;img src=&quot;<span class="subst">$&#123;res&#125;</span>&quot;&gt;`</span></span><br><span class="line">                            smde.<span class="property">codemirror</span>.<span class="property">doc</span>.<span class="title function_">undoSelection</span>()</span><br><span class="line">                            smde.<span class="property">codemirror</span>.<span class="property">doc</span>.<span class="title function_">replaceSelection</span>(finalUrl)</span><br><span class="line">                            <span class="title function_">rendererMarkDownToHtml</span>(smde.<span class="title function_">value</span>())</span><br><span class="line"><span class="comment">//LightTip是LuLuUI库的一个组件，我认为挺好看的，所以很多地方都用到了这个组件</span></span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">LightTip</span>().<span class="title function_">success</span>(<span class="string">&#x27;图床图片上传成功&#x27;</span>, <span class="number">2000</span>);</span><br><span class="line">                        &#125;)</span><br><span class="line">                        .<span class="title function_">catch</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                            smde.<span class="property">codemirror</span>.<span class="property">doc</span>.<span class="title function_">undoSelection</span>()</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">LightTip</span>().<span class="title function_">error</span>(<span class="string">&#x27;图床图片上传失败，请检查图床配置&#x27;</span>, <span class="number">4000</span>);</span><br><span class="line">                            finalUrl = <span class="string">`![<span class="subst">$&#123;file.name&#125;</span>](<span class="subst">$&#123;file.path&#125;</span>)`</span></span><br><span class="line">                            smde.<span class="property">codemirror</span>.<span class="property">doc</span>.<span class="title function_">replaceSelection</span>(finalUrl)</span><br><span class="line">                            <span class="title function_">rendererMarkDownToHtml</span>(smde.<span class="title function_">value</span>())</span><br><span class="line">                        &#125;)</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> finalUrl = <span class="string">`![<span class="subst">$&#123;file.name&#125;</span>](<span class="subst">$&#123;file.path&#125;</span>)`</span></span><br><span class="line">                    smde.<span class="property">codemirror</span>.<span class="property">doc</span>.<span class="title function_">undoSelection</span>()</span><br><span class="line">                    smde.<span class="property">codemirror</span>.<span class="property">doc</span>.<span class="title function_">replaceSelection</span>(finalUrl)</span><br><span class="line">                    <span class="title function_">rendererMarkDownToHtml</span>(smde.<span class="title function_">value</span>())</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">LightTip</span>().<span class="title function_">success</span>(<span class="string">&#x27;本地图片添加成功&#x27;</span>, <span class="number">2000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mainProcess.<span class="title function_">openFile</span>(currentWindow, file.<span class="property">path</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LightTip</span>().<span class="title function_">error</span>(<span class="string">&#x27;该文件类型暂时无法上传&#x27;</span>, <span class="number">4000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="直面问题"><a href="#直面问题" class="headerlink" title="直面问题"></a>直面问题</h2><p>不得不承认，有很多地方我都没有做完，甚至完成度只有$60%$,但我急于进入Vue的学习开发，就不得不将纯JavaScript的版本早点完结。</p><ul><li>左右界面的同步滚动问题，由于我一直找不到好的同步滚动解决方案，因此我采用的是两个显示部分距离顶部的长度相等，这样确实不太好很多时候都会出现奇怪的问题…</li><li>左侧UI布局不是特别的合理</li><li>很多按钮都是废弃的按钮，我已经没有什么精力去将他们一一修正了。</li><li>tasklist列表还是显示不正常</li></ul><p>如果你使用了Neeto并且有任何意见或是反馈，请及时告知我，告知的方法也很简单，点击左侧下部的小飞机按钮，填写建议还有您的联系方式即可，万分感谢</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://pic.tanknee.cn/blogpicbed/2020/01/20200121a677c9b6e7214.png"><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="MarkDown语法"><a href="#MarkDown语法" class="headerlink" title="MarkDown语法"></a>MarkDown语法</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Markdown Guide</span><br><span class="line">Emphasis</span><br><span class="line"><span class="strong">**bold**</span></span><br><span class="line"><span class="emphasis">*italics*</span></span><br><span class="line">~~strikethrough~~</span><br><span class="line">Headers</span><br><span class="line"><span class="section"># Big header</span></span><br><span class="line"><span class="section">## Medium header</span></span><br><span class="line"><span class="section">### Small header</span></span><br><span class="line"><span class="section">#### Tiny header</span></span><br><span class="line">Lists</span><br><span class="line"><span class="bullet">*</span> Generic list item</span><br><span class="line"><span class="bullet">*</span> Generic list item</span><br><span class="line"><span class="bullet">*</span> Generic list item</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> Numbered list item</span><br><span class="line"><span class="bullet">2.</span> Numbered list item</span><br><span class="line"><span class="bullet">3.</span> Numbered list item</span><br><span class="line"></span><br><span class="line">Links</span><br><span class="line">[<span class="string">Text to display</span>](<span class="link">http://www.example.com</span>)</span><br><span class="line"></span><br><span class="line">Quotes</span><br><span class="line"><span class="quote">&gt; This is a quote.</span></span><br><span class="line"><span class="quote">&gt; It can span multiple lines!</span></span><br><span class="line"></span><br><span class="line">Images   Need to upload an image? Imgur has a great interface.</span><br><span class="line">![](<span class="link">http://www.example.com/image.jpg</span>)</span><br><span class="line"></span><br><span class="line">Tables</span><br><span class="line">| Column 1 | Column 2 | Column 3 |</span><br><span class="line">| -------- | -------- | -------- |</span><br><span class="line">| John     | Doe      | Male     |</span><br><span class="line">| Mary     | Smith    | Female   |</span><br><span class="line"></span><br><span class="line">Or without aligning the columns...</span><br><span class="line"></span><br><span class="line">| Column 1 | Column 2 | Column 3 |</span><br><span class="line">| -------- | -------- | -------- |</span><br><span class="line">| John | Doe | Male |</span><br><span class="line">| Mary | Smith | Female |</span><br><span class="line"></span><br><span class="line">Displaying code</span><br><span class="line"><span class="code">`var example = &quot;hello!&quot;;`</span></span><br><span class="line"></span><br><span class="line">Or spanning multiple lines...</span><br><span class="line"></span><br><span class="line">code</span><br><span class="line">var example = &quot;hello!&quot;;</span><br><span class="line">alert(example);</span><br><span class="line">code</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><p><strong>数学公式实现</strong>：支持LaTeX语法</p><p>$\alpha, \beta, \Beta, \gamma, \Gamma, \pi, \Pi, \phi, \varphi, \mu, \Phi$</p><p>$\cos(2 \theta) = \cos ^ 2 \theta - \sin ^ 2 \theta$</p><p>$\lim_{x \to \infty}^ (e^(-x)) = 0$</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://pic.tanknee.cn/blogpicbed/2020/01/202001219ab3dd2c8994b.png"><blockquote><p><strong>写在最后</strong></br><br>说实话吧，好长一段时间里我都听不喜欢前端的，因为在我的刻板前端不就是切图吗，然后写点小动画，有什么前途，但是说来容易做时难啊，真正放开手去做的时候才能切身感受到前端也已经不仅仅是前端了，不过，还是要两头兼顾，前后端都要掌握。</p></blockquote><blockquote><p>最后一些屁话，应该没有人真的会看到这里吧。说真的，大学越活越糊涂我是真的有点难受，学习也整不起来，技术也学不明白，身体也没有很好//PS:本武汉（回来的）人已经14天未见异常了，所以我不是患者！！但是我好像有点感冒…</p></blockquote><h2 id="如果你对Neeto感兴趣"><a href="#如果你对Neeto感兴趣" class="headerlink" title="如果你对Neeto感兴趣"></a>如果你对Neeto感兴趣</h2><p>可以前往<a href="https://neeto.cn">Neeto官网</a> 查看源码和更多信息，项目已经在GitHub和Gitea开源了，如果可以的话，能为我点个Star吗！！！！<strong>这对我真的很重要</strong>(cxx语气)</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 操作 </tag>
            
            <tag> 时候 </tag>
            
            <tag> 汇编 </tag>
            
            <tag> 文件 </tag>
            
            <tag> 类型 </tag>
            
            <tag> 按钮 </tag>
            
            <tag> 图床 </tag>
            
            <tag> markdown </tag>
            
            <tag> 对象 </tag>
            
            <tag> length </tag>
            
            <tag> 列表 </tag>
            
            <tag> node </tag>
            
            <tag> neeto </tag>
            
            <tag> file </tag>
            
            <tag> typora </tag>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Neeto - 为补全缺憾而生的Markdown编辑器</title>
      <link href="/2020/01/09/neeto/"/>
      <url>/2020/01/09/neeto/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是一篇不断更新的文章</p><hr><blockquote><p>考察了很多的markdown编辑器，有做得很棒的，比如typora，我个人很喜欢这个编辑器，但是有几个我无法忍受的问题：</p></blockquote><blockquote><ul><li>没有云文件系统</li><li>没有图床的支持</li></ul></blockquote><p>然后其他的比较完整的markdown编辑如MWeb和熊掌记，都只有mac版，而我的主力是win所以基本不可用。</p><p>正好最近学了electron和js，然后买了一本Electron跨平台开发，里面有几张讲到了文本编辑器的制作，我也就准备自己做一个满足个人需求的文本编辑器。</p><p>[button color=”info” icon=”” url=”<a href="https://github.com/TankNee/Neeto&quot;">https://github.com/TankNee/Neeto&quot;</a> type=””]GitHub地址[/button]</p><p>[button color=”success” icon=”” url=”<a href="https://git.tanknee.cn/tanknee/ElectronTest_MarkDownEditer&quot;">https://git.tanknee.cn/tanknee/ElectronTest_MarkDownEditer&quot;</a> type=””]Gitea地址[/button]</p><p>[button color=”dark” icon=”” url=”<a href="https://neeto.cn&quot;">https://neeto.cn&quot;</a> type=””]GitPage[/button]</p><h3 id="ScreenShot："><a href="#ScreenShot：" class="headerlink" title="ScreenShot："></a>ScreenShot：</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/01/202001103a1ef34bc448f.png"/><h3 id="语法演示："><a href="#语法演示：" class="headerlink" title="语法演示："></a>语法演示：</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/01/202001101a30d18c5aba9.png"/><h3 id="LaTex语法支持"><a href="#LaTex语法支持" class="headerlink" title="LaTex语法支持"></a>LaTex语法支持</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/01/202001102b462e1b49196.png"/><h3 id="Running-Shot"><a href="#Running-Shot" class="headerlink" title="Running Shot"></a>Running Shot</h3><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/01/202001166f58171ef1c23.gif" alt="Running Shot"></p><h2 id="Neeto-在1-X版本中发展设想"><a href="#Neeto-在1-X版本中发展设想" class="headerlink" title="Neeto 在1.X版本中发展设想"></a>Neeto 在1.X版本中发展设想</h2><h3 id="将来必定会实现的功能："><a href="#将来必定会实现的功能：" class="headerlink" title="将来必定会实现的功能："></a>将来必定会实现的功能：</h3><ul><li><input disabled="" type="checkbox"> 括号的自动补全</li><li><input checked="" disabled="" type="checkbox"> LaTex公式解析</li><li><input checked="" disabled="" type="checkbox"> 图片粘贴后上传到图床，并用返回的链接替换输入</li><li><input disabled="" type="checkbox"> 实现云笔记功能，但不保证实现云协作</li><li><input disabled="" type="checkbox"> 实现网页端的后台管理系统，应该将会使用Java构建后台</li></ul><h3 id="将来有可能实现的功能："><a href="#将来有可能实现的功能：" class="headerlink" title="将来有可能实现的功能："></a>将来有可能实现的功能：</h3><ul><li><input disabled="" type="checkbox"> 主题系统</li><li><input disabled="" type="checkbox"> 文件系统</li><li><input disabled="" type="checkbox"> 设置界面</li></ul><h3 id="将来应该不会实现的部分："><a href="#将来应该不会实现的部分：" class="headerlink" title="将来应该不会实现的部分："></a>将来应该不会实现的部分：</h3><ul><li><input disabled="" type="checkbox"> 云协作</li><li><input disabled="" type="checkbox"> 插件系统</li><li><input disabled="" type="checkbox"> 实时渲染–这个我暂时也没有找到合理的解决方式。</li></ul><h2 id="关于后台"><a href="#关于后台" class="headerlink" title="关于后台"></a>关于后台</h2><p>今天1.9，已经写了一部分后端，但是由于其他的项目，所以暂时还没有发不出来，不过已经在路上了。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> type </tag>
            
            <tag> 文件 </tag>
            
            <tag> 地址 </tag>
            
            <tag> Java </tag>
            
            <tag> button </tag>
            
            <tag> 图床 </tag>
            
            <tag> 云协 </tag>
            
            <tag> electron </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020 新世界的船票</title>
      <link href="/2019/12/31/2020_newWorld/"/>
      <url>/2019/12/31/2020_newWorld/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-nBIyGbwJ" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="528272281" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191231304a09d78bd0b.jpg"/><blockquote><p>我是旧世界的残党，新世界没有能载我的船</p><p>——海贼王481集</p></blockquote><p>十年前的小学三年级，那时常有写日记的作业，学校发的日记本是泛黄的绿格子本，一页约莫只有百来个格子，最顶头是填日期的地方，我仍记得我歪歪扭扭地在年份的空里写下2010，却又感觉不甚熟悉。</p><h2 id="一晃眼，已经十年了"><a href="#一晃眼，已经十年了" class="headerlink" title="一晃眼，已经十年了"></a>一晃眼，已经十年了</h2><p>初二的时候吧，在寝室里，蛋蛋问我以后会去读什么专业，虽然我也不知道那时候怎么会突然提起这个话题，我脱口而出的就是软件工程。原因也很奇怪，那几天在一本杂志上看过一个人在澳洲读软件工程硕士的文章，只是单纯地觉得这个专业很酷，而且可以玩我平时很少能触及的电脑。没想到四年之后，阴差阳错还真的来到了这个专业，本是一心想学的计算机，结果报的全没上，也算是一种缘分吧。</p><p>不知道是长大了的原因还是其他的原因，这十年的记忆要比前十年的要清晰的多。我会永远地记得在楼道里上下奔走寻找我妈的教室的那段记忆，虽然这几年已经模糊了不少，但那种晕眩感和盲目无从的感觉，从未离开我那段记忆。</p><h2 id="重复轮播不停的十年"><a href="#重复轮播不停的十年" class="headerlink" title="重复轮播不停的十年"></a>重复轮播不停的十年</h2><p>两年小学，三年初中，三年高中，还有两年的大学，应该是这辈子第一次也是最后一次全在读书的十年了，你往回翻阅时，在每一年都能找到惊喜，失望，苦痛，欢愉，但是，这一年年的，又是何其的相似，无外乎上课，吃饭，寝室，所谓情绪，不过是这三点奔波间的插曲，我更像是无情的规则执行机器，按部就班地走着既定的线路。</p><p>每段学习的日子都会碰上几个难以忘怀的人，有的现在还有联系，有的热络了一段时间便沉寂下去，有的从冷落的通讯录中突然炸出，很快又冷却回去。</p><p>我真像个小孩，特别是在不承认这句话的时候，比如现在。</p><h2 id="怀疑的，自责的，但从不悔过的十年"><a href="#怀疑的，自责的，但从不悔过的十年" class="headerlink" title="怀疑的，自责的，但从不悔过的十年"></a>怀疑的，自责的，但从不悔过的十年</h2><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/201912309f083b3bc1495.png!normal"/><p>相信自己是病态的和坚定自己是正常人一样，无可苛责。到了今天，写到这里的时候，才真正的感觉到，这些年留下的到底是什么：</p><blockquote><p>人们从历史中得到的唯一教训，就是得不到任何教训</p><p>——黑格尔</p></blockquote><p>本来只想写2019年发生的事情，刚写完开头，就发现已经偏得离谱，索性就直接往下写了。</p><h2 id="说说今年吧"><a href="#说说今年吧" class="headerlink" title="说说今年吧"></a>说说今年吧</h2><p>大学的第一个暑假</p><p>没有学完车</p><p>没有做任何有意义的事情。</p><p>去了一趟并不那么痛快的苏州</p><p>第一次这么急着离开家来到学校，在外面呆了差不多半年，甚至直到现在也没有特别想回去的感觉，除了午夜饿肚子的时候，还有早上对着韵酒硬如纸板的手抓饼难以下咽时，会难以遏制地想起乐清的糯米饭，年糕，炒粉。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/201912300632eaa53739d.png/imgzip"/><p>种了一年的树，很多时候都难以相信自己可以这么长时间不碰手机，不过大多时候不是在玩平板就是跟软件拼手速，甚至还有睡觉种树的诡异操作。不过我相信，<strong>今年的华科树王肯定还是我</strong>！！</p><p>买的东西越来越昂贵，很多时候都超出了自己的承受范围，不过好的产品，确实可以有效提升效率。今年最满意的应该是上个月刚买的AirPods Pro，无他，省事。第二位就是过年的时候的iPad2018，虽然很多次都想要换成Air3或者Pro2018，不过着实承受不起了。</p><p>最让我受益匪浅的一件事情，是七月末，开始折腾以前认为繁琐不堪的服务器，自那之后一发不可收拾，如果没有那段时间的闲着蛋疼，应该后来就不会去参加前端项目，应该也就不会这么忙…Anyway，我认为这是有益的。</p><p>年初立的Flag不知道被我丢哪里去了，所以现在也没有办法知道自己到底有没有做到。反正暑假立下的什么学车，看书，看电影统统没有完成。这件事情告诉我们，不要乱搞什么Flag…</p> <img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191231e2f72c17f9091.jpg"/><h2 id="最后说说今天吧"><a href="#最后说说今天吧" class="headerlink" title="最后说说今天吧"></a>最后说说今天吧</h2><p>anyway，我想做的想说的基本都说了做了，今年也算是不留遗憾了。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/201912319191d0a6bf091.jpg"/><p>害</p><p>大伙儿都过得开心点，明年一定是个好年</p><p>一定是</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191230207f065ccc612.png!normal"/>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 日记 </tag>
            
            <tag> meting </tag>
            
            <tag> netease </tag>
            
            <tag> type </tag>
            
            <tag> server </tag>
            
            <tag> 操作 </tag>
            
            <tag> 时候 </tag>
            
            <tag> flag </tag>
            
            <tag> anyway </tag>
            
            <tag> 记忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冬至愉悦</title>
      <link href="/2019/12/22/%E5%86%AC%E8%87%B3%E6%84%89%E6%82%A6/"/>
      <url>/2019/12/22/%E5%86%AC%E8%87%B3%E6%84%89%E6%82%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="美好冬至的清晨，是在九点半醒来的"><a href="#美好冬至的清晨，是在九点半醒来的" class="headerlink" title="美好冬至的清晨，是在九点半醒来的"></a>美好冬至的清晨，是在九点半醒来的</h2><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/2019122225bc9c42c94a1.jpg/imgzip"/><p>我总是觉得冬至不是已经过了吗，后来想想那个好像是立冬？但是为什么过了立冬才是冬至？？这两个难道不是同一个意思吗？？？<strong>今日疑惑</strong></p><h2 id="惭愧，我拿着汤圆钱去吃了饺子"><a href="#惭愧，我拿着汤圆钱去吃了饺子" class="headerlink" title="惭愧，我拿着汤圆钱去吃了饺子"></a>惭愧，我拿着汤圆钱去吃了饺子</h2><p>我是南方人的叛徒，我认罪。</p><p>这是2019年的倒数第九天，也是我来学校的<strong>第一百二十六天</strong>，二十一世纪10年代的最后一年还有不到百分之三的余额，大家也都别冲值了，<strong>不会变强的</strong>,只会变<strong>秃</strong>。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/2019122250775b904e8ec.jpg/imgzip"/><h2 id="前几天在网上遇见一个自称患了抑郁的网友"><a href="#前几天在网上遇见一个自称患了抑郁的网友" class="headerlink" title="前几天在网上遇见一个自称患了抑郁的网友"></a>前几天在网上遇见一个自称患了抑郁的网友</h2><p>我希望他是假的，但我也希望他能好起来，不管是哪种情况。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/201912226c646cba1c6f0.png"/><p>害，说到出去看看，我都多久没有出学校大门了。</p><h2 id="最近受某位脸大的朋友影响，开始点评吃过的饭菜？"><a href="#最近受某位脸大的朋友影响，开始点评吃过的饭菜？" class="headerlink" title="最近受某位脸大的朋友影响，开始点评吃过的饭菜？"></a>最近受某位脸大的朋友影响，开始点评吃过的饭菜？</h2><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191222be7fc949d8158.jpg/imgzip"/><p>冬至，年近，归程不远</p><p>大家冬至快乐</p>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 冬至 </tag>
            
            <tag> 立冬 </tag>
            
            <tag> 归程 </tag>
            
            <tag> 惭愧 </tag>
            
            <tag> 叛徒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完成经典算法的C语言实现</title>
      <link href="/2019/12/12/547/"/>
      <url>/2019/12/12/547/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>[button color=”success” icon=”” url=”<a href="https://git.tanknee.cn/tanknee/DataStruct&quot;">https://git.tanknee.cn/tanknee/DataStruct&quot;</a> type=””]全文源码git地址[/button]</p><h2 id="基于磁盘的带替换选择的合并排序"><a href="#基于磁盘的带替换选择的合并排序" class="headerlink" title="基于磁盘的带替换选择的合并排序"></a>基于磁盘的带替换选择的合并排序</h2><p>先替换选择，再进行外部合并排序。</p><h3 id="替换选择"><a href="#替换选择" class="headerlink" title="替换选择"></a>替换选择</h3><p>先从源文件中读取M个数据，然后将M个数据中的最小值输出到输出文件中，再从源文件读取下一个数据。直到死区放满了或者源文件读完了再更换输出文件，直到全部处理完成，源文件与输出文件的指针交换，进行合并排序。</p><h3 id="合并排序"><a href="#合并排序" class="headerlink" title="合并排序"></a>合并排序</h3><p>从两个有数据的文件中读取第一个数据，然后比较大小，将较小的打印在输出文件上，直到这个顺串打印完成。当两个文件全部输出完后进行下一次合并排序。</p><p>合并排序结束的条件是输出文件中只有一个是有数据的，另一个没有数据。</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> INF (~(0x1 &lt;&lt; 31)) <span class="comment">// 最大值(即0X7FFFFFFF)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM(N) N * 2 + 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> runN 3</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = runN;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DiskMerge</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swapArray</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">// 插入排序</span></span><br><span class="line"><span class="comment">//这里使用排序来替代原本的构建堆，其目的都是找出最小的元素，因此我认为效果是一致的，所以为了方便我选择使用插入排序。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 插入排序的主要思想是排过序的前一部分是永远有序的，只需要将当前元素放置到正确位置就好</span></span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; length; i++) <span class="comment">//可以选择直接从第一个元素开始</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = A[i];</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; A[j - <span class="number">1</span>] &gt; temp; j--) <span class="comment">// 第一个j=i的元素是还没有被排序的待排元素！所以要从第i-1个元素开始排序</span></span><br><span class="line">        &#123;</span><br><span class="line">            A[j] = A[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 退出上一个循环的原因要么是找到了该放的正确位置，要么是到了数组的第一位。</span></span><br><span class="line">        <span class="comment">// 但是不管是那种情况，此时j就是正确位置的下标！</span></span><br><span class="line">        A[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fa1 fa2是输入磁带</span></span><br><span class="line"><span class="comment"> * fb1 fb2是输出磁带</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DiskMergeSort</span><span class="params">(FILE *fa_1, FILE *fa_2, FILE *fb_1, FILE *fb_2)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义缓冲区</span></span><br><span class="line">    <span class="type">int</span> tempBuff[runN] = &#123;INF, INF, INF&#125;;</span><br><span class="line">    <span class="comment">// 死区，存放不符合要求的元素</span></span><br><span class="line">    <span class="type">int</span> deadSpace[runN] = &#123;INF, INF, INF&#125;;</span><br><span class="line">    <span class="comment">//数据缓存</span></span><br><span class="line">    <span class="type">int</span> dataCache[<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 读入三个初始数据</span></span><br><span class="line">    <span class="keyword">while</span> (!feof(fa_1) &amp;&amp; j &lt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fscanf</span>(fa_1, <span class="string">&quot;%d&quot;</span>, tempBuff + j);</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    insertSort(tempBuff, runN);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 循环继续的条件是输入磁盘的指针没有达到末尾，并且当前顺串没有完结,并且死区没有放满</span></span><br><span class="line">        <span class="comment">// 当tempBuff的第一个元素都是INF时，说明队列已经清空了。</span></span><br><span class="line">        <span class="keyword">while</span> (!feof(fa_1) &amp;&amp; tempBuff[<span class="number">0</span>] != INF &amp;&amp; index != <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*  把最小的记录写道输出磁盘上，再从输入磁盘读入下一个记录，如果它比刚刚写的记录要大，那么就把他加入到数组中，否则就放入死区。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">            insertSort(tempBuff, runN);</span><br><span class="line">            <span class="built_in">fprintf</span>(fb_1, <span class="string">&quot;%d &quot;</span>, tempBuff[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">fscanf</span>(fa_1, <span class="string">&quot;%d&quot;</span>, dataCache);</span><br><span class="line">            <span class="comment">// 如果读入的值比刚刚打印的那个值要大，那么就将这个数据放入到队列中</span></span><br><span class="line">            <span class="keyword">if</span> (dataCache[<span class="number">0</span>] &gt; tempBuff[<span class="number">0</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                tempBuff[<span class="number">0</span>] = dataCache[<span class="number">0</span>];</span><br><span class="line">                insertSort(tempBuff, runN);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//将打印了的那个位置置为最大正数</span></span><br><span class="line">                tempBuff[<span class="number">0</span>] = INF;</span><br><span class="line">                insertSort(tempBuff, runN);</span><br><span class="line">                <span class="comment">//如果这个读入的值比打印的值还要小，那么就将这个数据放入死区中</span></span><br><span class="line">                deadSpace[index++] = dataCache[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果此时输入磁盘已经读取完了，那么就将当前队列中的所有数据导入到该磁盘中</span></span><br><span class="line">        <span class="keyword">if</span> (feof(fa_1))</span><br><span class="line">        &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (tempBuff[index] != INF &amp;&amp; index &lt; <span class="number">3</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(fb_1, <span class="string">&quot;%d &quot;</span>, tempBuff[index]);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//队列打印完成之后，将死区的元素放入到另一个输出磁盘中</span></span><br><span class="line">            FILE *tempFp = fb_1;</span><br><span class="line">            fb_1 = fb_2;</span><br><span class="line">            fb_2 = tempFp;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//重新构建队列，然后把它输入到输出磁盘中去</span></span><br><span class="line">            insertSort(deadSpace, runN);</span><br><span class="line">            <span class="keyword">while</span> (deadSpace[index] != INF)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(fb_1, <span class="string">&quot;%d &quot;</span>, deadSpace[index]);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// swapPoint(fb_1,fb_2);</span></span><br><span class="line">        <span class="built_in">fprintf</span>(fb_1, <span class="string">&quot;%d &quot;</span>, INF);</span><br><span class="line">        FILE *tempFp = fb_1;</span><br><span class="line">        fb_1 = fb_2;</span><br><span class="line">        fb_2 = tempFp;</span><br><span class="line">        <span class="comment">// 将死区内存储的数据转移到队列中</span></span><br><span class="line">        swapArray(tempBuff, deadSpace, runN);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; runN; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            deadSpace[i] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fa_1);</span><br><span class="line">    fclose(fa_2);</span><br><span class="line">    fclose(fb_1);</span><br><span class="line">    fclose(fb_2);</span><br><span class="line">    <span class="comment">// 将a1 a2中的文件合并排序到b1，b2中</span></span><br><span class="line">    fa_1 = fopen(<span class="string">&quot;SortSource\\TA1.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    fa_2 = fopen(<span class="string">&quot;SortSource\\TA2.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    fb_1 = fopen(<span class="string">&quot;SortSource\\TB1.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    fb_2 = fopen(<span class="string">&quot;SortSource\\TB2.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    <span class="comment">//下面进行合并排序</span></span><br><span class="line">    DiskMerge(fb_1, fb_2, fa_1, fa_2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并部分</span></span><br><span class="line"><span class="comment"> * fa1 fa2是输入磁带</span></span><br><span class="line"><span class="comment"> * fb1 fb2是输出磁带</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DiskMerge</span><span class="params">(FILE *fa1, FILE *fa2, FILE *fb1, FILE *fb2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> temp2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抹去输出磁盘上的全部内容</span></span><br><span class="line">    fb1 = fopen(<span class="string">&quot;SortSource\\TA1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    fb2 = fopen(<span class="string">&quot;SortSource\\TA2.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="comment">// 重新打开输出磁盘</span></span><br><span class="line">    fb1 = fopen(<span class="string">&quot;SortSource\\TA1.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    fb2 = fopen(<span class="string">&quot;SortSource\\TA2.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    <span class="comment">// 选择当前要输出的磁盘</span></span><br><span class="line">    FILE *outp = fb1;</span><br><span class="line">    <span class="comment">//用于交换的临时变量</span></span><br><span class="line">    FILE *tempPoint;</span><br><span class="line">    <span class="comment">// 输入输出磁盘的标志</span></span><br><span class="line">    <span class="comment">//1 - TB对应输入  -1 - TA对应输入</span></span><br><span class="line">    <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 读取元素</span></span><br><span class="line">    <span class="built_in">fscanf</span>(fa1, <span class="string">&quot;%d&quot;</span>, &amp;temp1);</span><br><span class="line">    <span class="built_in">fscanf</span>(fa2, <span class="string">&quot;%d&quot;</span>, &amp;temp2);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果两个输入磁盘都没有读到文件末尾那么就一直进行，直到全部数据都被合并完成</span></span><br><span class="line">        <span class="keyword">while</span> (!feof(fa1) || !feof(fa2))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//当读取到分割符号时，或者是读取到文件末尾，就将另一个输入磁盘顺串全部输出到输出磁盘上</span></span><br><span class="line">            <span class="keyword">if</span> (temp1 == INF || feof(fa1))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!feof(fa1))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">fscanf</span>(fa1, <span class="string">&quot;%d&quot;</span>, &amp;temp1);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (temp2 != INF &amp;&amp; !feof(fa2))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">fprintf</span>(outp, <span class="string">&quot;%d &quot;</span>, temp2);</span><br><span class="line">                    <span class="built_in">fscanf</span>(fa2, <span class="string">&quot;%d&quot;</span>, &amp;temp2);</span><br><span class="line">                &#125;</span><br><span class="line">                outp = fb2;</span><br><span class="line">                <span class="keyword">if</span> (temp2 == INF &amp;&amp; !feof(fa2))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">fprintf</span>(outp,<span class="string">&quot;%d &quot;</span>,INF);</span><br><span class="line">                    <span class="built_in">fscanf</span>(fa2, <span class="string">&quot;%d&quot;</span>, &amp;temp2);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (feof(fa1) &amp;&amp; feof(fa2))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (feof(fa1))</span><br><span class="line">                &#123;</span><br><span class="line">                    temp1 = INF;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp2 == INF || feof(fa2))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!feof(fa2))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">fscanf</span>(fa2, <span class="string">&quot;%d&quot;</span>, &amp;temp2);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (temp1 != INF &amp;&amp; !feof(fa1))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">fprintf</span>(outp, <span class="string">&quot;%d &quot;</span>, temp1);</span><br><span class="line">                    <span class="built_in">fscanf</span>(fa1, <span class="string">&quot;%d&quot;</span>, &amp;temp1);</span><br><span class="line">                &#125;</span><br><span class="line">                outp = fb2;</span><br><span class="line">                <span class="keyword">if</span> (temp1 == INF &amp;&amp; !feof(fa1))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">fprintf</span>(outp,<span class="string">&quot;%d &quot;</span>,INF);</span><br><span class="line">                    <span class="built_in">fscanf</span>(fa1, <span class="string">&quot;%d&quot;</span>, &amp;temp1);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (feof(fa1) &amp;&amp; feof(fa2))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (feof(fa2))</span><br><span class="line">                &#123;</span><br><span class="line">                    temp2 = INF;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将较小的那个数放到当前输出磁盘中去，然后读取下一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (temp1 &gt; temp2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(outp, <span class="string">&quot;%d &quot;</span>, temp2);</span><br><span class="line">                <span class="built_in">fscanf</span>(fa2, <span class="string">&quot;%d&quot;</span>, &amp;temp2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (temp1 &lt; temp2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(outp, <span class="string">&quot;%d &quot;</span>, temp1);</span><br><span class="line">                <span class="built_in">fscanf</span>(fa1, <span class="string">&quot;%d&quot;</span>, &amp;temp1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当两个文件都读取完成了，那么就关闭文件，完成文件的写入操作</span></span><br><span class="line">        fclose(fb1);</span><br><span class="line">        fclose(fb2);</span><br><span class="line">        <span class="comment">//接下来就是重新打开外部文件，并且此时要将原本的输入磁盘和输出磁盘交换。也就是输入变成了输出，输出变成了输入</span></span><br><span class="line">        <span class="comment">//下面这一段是将原本输入磁盘全部抹去，因为它们将要被当作输出磁盘使用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入输出磁盘的标志</span></span><br><span class="line">        <span class="comment">//1 - TB对应输入  -1 - TA对应输入</span></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//清除当前的输入磁盘，并把它赋给输出磁盘指针</span></span><br><span class="line">            fb1 = fopen(<span class="string">&quot;SortSource\\TB1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">            fb2 = fopen(<span class="string">&quot;SortSource\\TB2.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">            fb1 = fopen(<span class="string">&quot;SortSource\\TB1.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">            fb2 = fopen(<span class="string">&quot;SortSource\\TB2.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开输入文件，创建指针赋值给输入指针</span></span><br><span class="line">            fa1 = fopen(<span class="string">&quot;SortSource\\TA1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">            fa2 = fopen(<span class="string">&quot;SortSource\\TA2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 与上面类似</span></span><br><span class="line">            fb1 = fopen(<span class="string">&quot;SortSource\\TA1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">            fb2 = fopen(<span class="string">&quot;SortSource\\TA2.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">            fb1 = fopen(<span class="string">&quot;SortSource\\TA1.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">            fb2 = fopen(<span class="string">&quot;SortSource\\TA2.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line"></span><br><span class="line">            fa1 = fopen(<span class="string">&quot;SortSource\\TB1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">            fa2 = fopen(<span class="string">&quot;SortSource\\TB2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        flag *= <span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> temp3 = <span class="built_in">fscanf</span>(fa1, <span class="string">&quot;%d&quot;</span>, &amp;temp1);</span><br><span class="line">        <span class="type">int</span> temp4 = <span class="built_in">fscanf</span>(fa2, <span class="string">&quot;%d&quot;</span>, &amp;temp2);</span><br><span class="line">        outp = fb1;</span><br><span class="line">        <span class="keyword">if</span> (fa1 != <span class="literal">NULL</span> &amp;&amp; temp4 == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp3 == <span class="number">-1</span> &amp;&amp; fa2 != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swapArray</span><span class="params">(<span class="type">int</span> A[], <span class="type">int</span> B[], <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A[i] = B[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE *fa_1, *fa_2, *fb_1, *fb_2;</span><br><span class="line">    fa_1 = fopen(<span class="string">&quot;SortSource\\TA1.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    fa_2 = fopen(<span class="string">&quot;SortSource\\TA2.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    fb_1 = fopen(<span class="string">&quot;SortSource\\TB1.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    fb_2 = fopen(<span class="string">&quot;SortSource\\TB2.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">    DiskMergeSort(fa_1, fa_2, fb_1, fb_2);</span><br><span class="line">    <span class="comment">//关闭文件流</span></span><br><span class="line">    fclose(fa_1);</span><br><span class="line">    fclose(fa_2);</span><br><span class="line">    fclose(fb_1);</span><br><span class="line">    fclose(fb_2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>一共五十个数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3326</span> <span class="number">8497</span> <span class="number">13428</span> <span class="number">12105</span> <span class="number">29791</span> <span class="number">18956</span> <span class="number">18729</span> <span class="number">16025</span> <span class="number">27748</span> <span class="number">17760</span> <span class="number">11586</span> <span class="number">3912</span> <span class="number">1443</span> <span class="number">20730</span> <span class="number">6316</span> <span class="number">26020</span> <span class="number">28423</span> <span class="number">11436</span> <span class="number">9791</span> <span class="number">8752</span> <span class="number">13264</span> <span class="number">28739</span> <span class="number">8677</span> <span class="number">26431</span> <span class="number">6875</span> <span class="number">32184</span> <span class="number">511</span> <span class="number">15554</span> <span class="number">2852</span> <span class="number">25515</span> <span class="number">4100</span> <span class="number">9823</span> <span class="number">6537</span> <span class="number">17420</span> <span class="number">1131</span> <span class="number">24515</span> <span class="number">9169</span> <span class="number">4892</span> <span class="number">6604</span> <span class="number">13112</span> <span class="number">7404</span> <span class="number">17044</span> <span class="number">23362</span> <span class="number">7802</span> <span class="number">28284</span> <span class="number">11555</span> <span class="number">12819</span> <span class="number">14790</span> <span class="number">5013</span> <span class="number">22046</span> </span><br></pre></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">511</span> <span class="number">1131</span> <span class="number">1443</span> <span class="number">2852</span> <span class="number">3326</span> <span class="number">3912</span> <span class="number">4100</span> <span class="number">4892</span> <span class="number">5013</span> <span class="number">6316</span> <span class="number">6537</span> <span class="number">6604</span> <span class="number">6875</span> <span class="number">7404</span> <span class="number">7802</span> <span class="number">8497</span> <span class="number">8677</span> <span class="number">8752</span> <span class="number">9169</span> <span class="number">9791</span> <span class="number">9823</span> <span class="number">11436</span> <span class="number">11555</span> <span class="number">11586</span> <span class="number">12105</span> <span class="number">12819</span> <span class="number">13112</span> <span class="number">13264</span> <span class="number">13428</span> <span class="number">14790</span> <span class="number">15554</span> <span class="number">16025</span> <span class="number">17044</span> <span class="number">17420</span> <span class="number">17760</span> <span class="number">18729</span> <span class="number">18956</span> <span class="number">20730</span> <span class="number">22046</span> <span class="number">23362</span> <span class="number">24515</span> <span class="number">25515</span> <span class="number">26020</span> <span class="number">26431</span> <span class="number">27748</span> <span class="number">28284</span> <span class="number">28423</span> <span class="number">28739</span> <span class="number">29791</span> <span class="number">32184</span> </span><br></pre></td></tr></table></figure><h2 id="AVL树的插入"><a href="#AVL树的插入" class="headerlink" title="AVL树的插入"></a>AVL树的插入</h2><ol><li>左旋转</li><li>右旋转</li><li>左右旋转</li><li>右左旋转</li></ol><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a><strong>完全二叉树</strong></h3><p>   <strong>定义</strong>：一棵二叉树中，只有最下面两层结点的度可以小于2，并且最下一层的叶结点集中在靠左的若干位置上。这样的二叉树称为完全二叉树。<br>   <strong>特点</strong>：叶子结点只能出现在最下层和次下层，且最下层的叶子结点集中在树的左部。显然，一棵满二叉树必定是一棵完全二叉树，而完全二叉树未必是满二叉树。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><h5 id="四种情况"><a href="#四种情况" class="headerlink" title="四种情况"></a>四种情况</h5><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/281624280475098.jpg"/><h6 id="LL"><a href="#LL" class="headerlink" title="LL:"></a>LL:</h6><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/2019121791f18225ea726.png"/><h6 id="RR"><a href="#RR" class="headerlink" title="RR:"></a>RR:</h6><h6 id=""><a href="#" class="headerlink" title=""></a><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/2019121749c6e03aa3bae.png"/></h6><h6 id="LR"><a href="#LR" class="headerlink" title="LR:"></a>LR:</h6><h6 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191217e0e0645dae78a.png"/></h6><p>相当于进行了一次RR旋转一次LL旋转。</p><h6 id="RL"><a href="#RL" class="headerlink" title="RL:"></a>RL:</h6><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191217d6db06ae2e947.png"/><p>相当于先进行了LL旋转在进行了RR旋转。</p><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) (a &gt; b) ? (a) : (b)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AVL树的结构体定义</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVLTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span>   </span><br><span class="line">    <span class="type">int</span> data;   <span class="comment">//节点存储的值</span></span><br><span class="line">    <span class="type">int</span> height; <span class="comment">//当前节点的高度</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AVLTreeNode</span> *<span class="title">leftChild</span>;</span>  <span class="comment">//左儿子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AVLTreeNode</span> *<span class="title">rightChild</span>;</span> <span class="comment">//右儿子</span></span><br><span class="line">&#125;Node,*AVLTree;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * @param data 存储的数据</span></span><br><span class="line"><span class="comment"> * @param left 左儿子</span></span><br><span class="line"><span class="comment"> * @param right 右儿子</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">static</span> Node *<span class="title function_">createAVLTreeNode</span><span class="params">(<span class="type">int</span> data,Node *left,Node *right)</span>&#123;</span><br><span class="line">    <span class="comment">// 为这个新的节点开辟内存空间</span></span><br><span class="line">    Node *node;</span><br><span class="line">    <span class="keyword">if</span> (((node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node))) == <span class="literal">NULL</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为这个node赋初值</span></span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    <span class="comment">// 空子树的高度为0</span></span><br><span class="line">    node-&gt;height = <span class="number">0</span>;</span><br><span class="line">    node-&gt;leftChild = left;</span><br><span class="line">    node-&gt;rightChild = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取节点的高度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getHeightOfNode</span><span class="params">(Node *node)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (node==<span class="literal">NULL</span>) ? <span class="number">0</span> : node-&gt;height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * LL：左左对应的情况(左单旋转)。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 返回值：旋转后的根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> Node* <span class="title function_">leftLeftRotation</span><span class="params">(AVLTree k2)</span>&#123;</span><br><span class="line">    AVLTree k1;</span><br><span class="line"></span><br><span class="line">    k1 = k2-&gt;leftChild;</span><br><span class="line">    <span class="comment">// k2与k1的右子树进行互换</span></span><br><span class="line">    k2-&gt;leftChild = k1-&gt;rightChild;</span><br><span class="line">    k1-&gt;rightChild = k2;</span><br><span class="line"></span><br><span class="line">    k2-&gt;height = MAX( getHeightOfNode(k2-&gt;leftChild), getHeightOfNode(k2-&gt;rightChild)) + <span class="number">1</span>;</span><br><span class="line">    k1-&gt;height = MAX( getHeightOfNode(k1-&gt;leftChild), k2-&gt;height) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 旋转完成之后的根节点是k1，即k1上浮了而原本的k2下沉为k1的儿子了</span></span><br><span class="line">    <span class="keyword">return</span> k1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * RR：右右对应的情况(右单旋转)。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 返回值：旋转后的根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> Node* <span class="title function_">rightRightRotation</span><span class="params">(AVLTree k2)</span>&#123;</span><br><span class="line">    AVLTree k1;</span><br><span class="line"></span><br><span class="line">    k1 = k2-&gt;rightChild;</span><br><span class="line">    <span class="comment">// k2与k1的右子树进行互换</span></span><br><span class="line">    k2-&gt;rightChild = k1-&gt;leftChild;</span><br><span class="line">    k1-&gt;leftChild = k2;</span><br><span class="line"></span><br><span class="line">    k2-&gt;height = MAX( getHeightOfNode(k2-&gt;leftChild), getHeightOfNode(k2-&gt;rightChild)) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//此时的k2为k1的左儿子，所以只需要比较k2和k1的右儿子的高度就好了</span></span><br><span class="line">    k1-&gt;height = MAX( getHeightOfNode(k1-&gt;rightChild), k2-&gt;height) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 旋转完成之后的根节点是k1，即k1上浮了而原本的k2下沉为k1的儿子了</span></span><br><span class="line">    <span class="keyword">return</span> k1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * LR</span></span><br><span class="line"><span class="comment"> * 相当于进行了一次RR旋转一次LL旋转。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">static</span> Node *<span class="title function_">leftRightRotation</span><span class="params">(Node *k3)</span>&#123;</span><br><span class="line">    <span class="comment">//先对k3的左子树进行RR旋转，再对旋转后的k3进行LL旋转</span></span><br><span class="line">    k3-&gt;leftChild = rightRightRotation(k3-&gt;leftChild);</span><br><span class="line">    <span class="keyword">return</span> leftLeftRotation(k3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * RL</span></span><br><span class="line"><span class="comment"> * 相当于进行了一次LL旋转一次RR旋转。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">static</span> Node *<span class="title function_">rightLeftRotation</span><span class="params">(Node *k3)</span>&#123;</span><br><span class="line">    <span class="comment">//先对k3的右子树进行LL旋转，再对旋转后的k3进行RR旋转</span></span><br><span class="line">    k3-&gt;rightChild = leftLeftRotation(k3-&gt;rightChild);</span><br><span class="line">    <span class="keyword">return</span> rightRightRotation(k3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入要插入的树</span></span><br><span class="line"><span class="comment"> * 传入要插入的数据</span></span><br><span class="line"><span class="comment"> * 返回更新后的树的根节点</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">Node *<span class="title function_">insertIntoAVLTree</span><span class="params">(AVLTree tree,<span class="type">int</span> data)</span>&#123;</span><br><span class="line">    <span class="comment">// 如果树是一个空树</span></span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">// 那么就建立一个空节点</span></span><br><span class="line">        tree = createAVLTreeNode(data,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">// 如果创建失败的话</span></span><br><span class="line">        <span class="keyword">if</span> (tree == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Create Node Failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data &lt; tree-&gt;data)<span class="comment">//如果要插入的数值比根节点的值要小，那么就插入到其左子树中</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 然后递归调用插入方法，直到找到一个空节点再插入！</span></span><br><span class="line">        tree-&gt;leftChild = insertIntoAVLTree(tree-&gt;leftChild,data);</span><br><span class="line">        <span class="comment">// 由于是插入到左子树中，因此只可能是左子树的高度大于右子树的高度</span></span><br><span class="line">        <span class="keyword">if</span> (getHeightOfNode(tree-&gt;leftChild) - getHeightOfNode(tree-&gt;rightChild) == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果需要插入的值根节点的左子树还要小那么说明插入到了左子树的左侧，那就可以判断此时的不平衡状态为左左LL，调用LL旋转即可</span></span><br><span class="line">            <span class="keyword">if</span> (data &lt; tree-&gt;leftChild-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                tree-&gt;leftChild = leftLeftRotation(tree-&gt;leftChild);</span><br><span class="line">            &#125;<span class="keyword">else</span>   <span class="comment">// 否则就说明大于这个节点的值，插入到在左子树的右儿子上，调用LR旋转</span></span><br><span class="line">            &#123;</span><br><span class="line">                tree-&gt;leftChild = leftRightRotation(tree-&gt;leftChild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (data &gt; tree-&gt;data)</span><br><span class="line">    &#123;<span class="comment">//如果要插入的数值比根节点的值要大，那么就插入到其由子树中</span></span><br><span class="line">        tree-&gt;rightChild = insertIntoAVLTree(tree-&gt;rightChild,data);</span><br><span class="line">        <span class="keyword">if</span> (getHeightOfNode(tree-&gt;rightChild) - getHeightOfNode(tree-&gt;leftChild) == <span class="number">2</span>)<span class="comment">// 由于插入到右子树中那么就是只有可能右子树的高度大于左子树的高度</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (data &gt; tree-&gt;rightChild-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                tree-&gt;rightChild = rightRightRotation(tree-&gt;rightChild);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tree-&gt;rightChild = rightLeftRotation(tree-&gt;rightChild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Don&#x27;t Insert The Same Node&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新根节点的高度</span></span><br><span class="line">    <span class="type">int</span> temp = MAX(getHeightOfNode(tree-&gt;leftChild),getHeightOfNode(tree-&gt;rightChild));</span><br><span class="line">    <span class="keyword">if</span> (((MAX(getHeightOfNode(tree-&gt;leftChild),getHeightOfNode(tree-&gt;rightChild))) == <span class="number">0</span>) &amp;&amp; (tree-&gt;leftChild != <span class="literal">NULL</span> || tree-&gt;rightChild != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 其子节点全部都是叶子节点</span></span><br><span class="line">        <span class="comment">// 说明两个子树至少存在一个，那么这个根节点的高度就是1</span></span><br><span class="line">        tree-&gt;height = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (tree-&gt;leftChild == <span class="literal">NULL</span> &amp;&amp; tree-&gt;rightChild == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果两个子树都不存在那么说明这个节点就是叶子节点，直接返回就好</span></span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        tree-&gt;height = (MAX(getHeightOfNode(tree-&gt;leftChild),getHeightOfNode(tree-&gt;rightChild))) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *root = createAVLTreeNode(<span class="number">10</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    Node *left = createAVLTreeNode(<span class="number">6</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    Node *right = createAVLTreeNode(<span class="number">13</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    root-&gt;leftChild = left;</span><br><span class="line">    root-&gt;rightChild = right;</span><br><span class="line">    root = insertIntoAVLTree(root,<span class="number">5</span>);</span><br><span class="line">    root = insertIntoAVLTree(root,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试用例-1"><a href="#测试用例-1" class="headerlink" title="测试用例"></a>测试用例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Node *root = createAVLTreeNode(<span class="number">10</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">Node *left = createAVLTreeNode(<span class="number">6</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">Node *right = createAVLTreeNode(<span class="number">13</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">root-&gt;leftChild = left;</span><br><span class="line">root-&gt;rightChild = right;</span><br><span class="line">root = insertIntoAVLTree(root,<span class="number">5</span>);</span><br><span class="line">root = insertIntoAVLTree(root,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191212a7a1d1c29cc12.png"/><h4 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h4><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="C:%5CUsers%5Cu2018%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1576112863289.png" alt="1576112863289"></p><h4 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/201912121b5a6cb33ceab.png"/><h2 id="图的拓扑排序"><a href="#图的拓扑排序" class="headerlink" title="图的拓扑排序"></a>图的拓扑排序</h2><h4 id="在图论中，拓扑排序是一个有向无环图的所有顶点的线性序列"><a href="#在图论中，拓扑排序是一个有向无环图的所有顶点的线性序列" class="headerlink" title="在图论中，拓扑排序是一个有向无环图的所有顶点的线性序列"></a>在图论中，拓扑排序是一个有向无环图的所有顶点的线性序列</h4><p>且该序列必须满足以下两个条件：</p><ul><li>每个顶点出现且只出现一次</li><li>若存在一条从顶点A到顶点B的路径那么在序列中，A就在B的前面！</li></ul><p>因此只有有向无环图才会有拓扑排序，非有向无环图是没有拓扑排序的！</p><h4 id="求拓扑排序的方法："><a href="#求拓扑排序的方法：" class="headerlink" title="求拓扑排序的方法："></a>求拓扑排序的方法：</h4><ol><li>从有向无环图中选取一个入度为0(没有前驱)的顶点，并输出</li><li>从这个图中删除这个顶点以及所有它指向其他顶点的有向边。也就是删除所有的出边！</li><li>重复1，2直到图为空或者图中不再存在没有入度的顶点，如果到最后是第二种情况，那么就说明有向图中必定存在环（类似于循环结构，有出有入）</li></ol><p>由于一个图中，在同一个时间点，可能存在有多个入度为零的顶点，因此一个有向无环图可以有多个不同的拓扑排序序列！</p><h3 id="源代码-2"><a href="#源代码-2" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 5</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">ENode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> index;                 <span class="comment">// 该边的顶点的位置</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">ENode</span> *<span class="title">nextEdge</span>;</span> <span class="comment">// 指向下一条弧的指针</span></span><br><span class="line">&#125; ENode, *PENode;<span class="comment">// _ENode 的变量别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表中表的顶点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">VNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> index;          <span class="comment">// 顶点信息</span></span><br><span class="line">    ENode *firstEdge; <span class="comment">// 指向第一条依附该顶点的弧</span></span><br><span class="line">&#125; VNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LGraph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> vexNum; <span class="comment">// 图的顶点的数目</span></span><br><span class="line">    <span class="type">int</span> edgNum; <span class="comment">// 图的边的数目</span></span><br><span class="line">    VNode vexs[MAX];</span><br><span class="line">&#125; LGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 边的数据</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> start; <span class="comment">// 起始顶点</span></span><br><span class="line">    <span class="type">int</span> end;   <span class="comment">// 结束顶点</span></span><br><span class="line">&#125; EData;</span><br><span class="line"><span class="type">static</span> EData gData[] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>, <span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LinkToTheEnd</span><span class="params">(ENode *<span class="built_in">list</span>, ENode *node)</span>&#123;</span><br><span class="line">    ENode *p = <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;nextEdge)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;nextEdge;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;nextEdge = node;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一张图</span></span><br><span class="line">LGraph *<span class="title function_">createLinkedGraph</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ENode *node;</span><br><span class="line">    LGraph *pG;</span><br><span class="line">    <span class="type">int</span> start,end;</span><br><span class="line">    <span class="keyword">if</span> ((pG = (LGraph *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LGraph))) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">memset</span>(pG, <span class="number">0</span>, <span class="keyword">sizeof</span>(LGraph));</span><br><span class="line">    pG-&gt;vexNum = MAX;</span><br><span class="line">    pG-&gt;edgNum = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pG-&gt;vexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pG-&gt;vexs[i].index = i;</span><br><span class="line">        pG-&gt;vexs[i].firstEdge = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化&quot;邻接表&quot;的边</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pG-&gt;edgNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 读取边的起始顶点,结束顶点</span></span><br><span class="line">        start = gData[i].start;</span><br><span class="line">        end = gData[i].end;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化node1</span></span><br><span class="line">        node = (ENode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ENode));</span><br><span class="line">        <span class="built_in">memset</span>(node,<span class="number">0</span>,<span class="keyword">sizeof</span>(ENode));</span><br><span class="line">        node-&gt;index = end;</span><br><span class="line">        <span class="comment">// 将node1链接到&quot;p1所在链表的末尾&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (pG-&gt;vexs[start].firstEdge == <span class="literal">NULL</span>)</span><br><span class="line">            pG-&gt;vexs[start].firstEdge = node;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            LinkToTheEnd(pG-&gt;vexs[start].firstEdge, node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pG;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取图的出度数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">createInDegree</span><span class="params">(LGraph *g,<span class="type">int</span> InDegree[])</span>&#123;</span><br><span class="line">    ENode *p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;vexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = g-&gt;vexs[i].firstEdge;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            InDegree[p-&gt;index]++;</span><br><span class="line">            p = p-&gt;nextEdge;   </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新维护入度数组</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * g    图指针</span></span><br><span class="line"><span class="comment"> * InDegree 入度数组</span></span><br><span class="line"><span class="comment"> * node 需要改变的节点指针</span></span><br><span class="line"><span class="comment"> * 删除节点后把它在入度数组中置为-1</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">updateInDegree</span><span class="params">(LGraph *g,<span class="type">int</span> InDegree[],<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    InDegree[index] = <span class="number">-1</span>;</span><br><span class="line">    ENode *p;</span><br><span class="line">    p = g-&gt;vexs[index].firstEdge;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        InDegree[p-&gt;index]--;</span><br><span class="line">        p = p-&gt;nextEdge;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TopologicalSort 拓扑排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TopologicalSort</span><span class="params">(LGraph *g)</span>&#123;</span><br><span class="line">    ENode *node;</span><br><span class="line">    <span class="type">int</span> InDegree[g-&gt;vexNum];</span><br><span class="line">    <span class="built_in">memset</span>(InDegree,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>)*g-&gt;vexNum);</span><br><span class="line">    createInDegree(g,InDegree);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;vexNum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (InDegree[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                j = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,j);</span><br><span class="line">        updateInDegree(g,InDegree,j);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    LGraph *g;</span><br><span class="line">    g = createLinkedGraph();</span><br><span class="line">    TopologicalSort(g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试用例-2"><a href="#测试用例-2" class="headerlink" title="测试用例"></a>测试用例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> EData gData[] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>, <span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191212f4ba4f94e68be.png"/><h4 id="测试结果-2"><a href="#测试结果-2" class="headerlink" title="测试结果"></a>测试结果</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191212f3bef494a1615.png"/><h2 id="最小编辑距离"><a href="#最小编辑距离" class="headerlink" title="最小编辑距离"></a>最小编辑距离</h2><p><a href="https://www.cnblogs.com/hapjin/p/7467035.html"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/20191126885babad4dcc4.png"/></a></p><p>在有的文章中，替换的代价是2，而在有的文章中，替换的代价是1，本文按照代价为1的来计算。不过个人认为代价为二更加合理。</p><h3 id="动态规划表的初始化"><a href="#动态规划表的初始化" class="headerlink" title="动态规划表的初始化"></a>动态规划表的初始化</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/20191126cff68df72c86c.png"/><ul><li>D(0,j)=j，空串和长度为j的Y子串间的最小编辑距离（添加或删除对应的次数）</li><li>D(i,0)=i，长度为i的X子串和空串间的最小编辑距离添加或删除对应的次数）</li></ul><p>而最终的表的结果是：</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/201911260e9bdb95d8b6f.png"/><p>在三个中取最小值作为矩阵的元素！也就是为了找出变成另一个字符串的最小代价</p><h3 id="源代码-3"><a href="#源代码-3" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> min(a, b) (a &lt; b ? a : b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * res 字符1--原始字符串</span></span><br><span class="line"><span class="comment"> * des 字符2--目标字符串</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">minEditDistance</span><span class="params">(<span class="type">char</span> *res, <span class="type">char</span> *des)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//首先初始化动态表--填充相对于空字符的编辑距离，也就是字符长度</span></span><br><span class="line">    <span class="type">int</span> dis[MAX][MAX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= (<span class="type">int</span>)<span class="built_in">strlen</span>(des); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[<span class="number">0</span>][i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= (<span class="type">int</span>)<span class="built_in">strlen</span>(res); j++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[j][<span class="number">0</span>] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环遍历整个数组，计算每一个编辑距离</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= (<span class="type">int</span>)<span class="built_in">strlen</span>(res); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= (<span class="type">int</span>)<span class="built_in">strlen</span>(des); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果在该位置的两个元素相同，那么到此的最小编辑距离就等同于不包含这两个元素的最小编辑距离</span></span><br><span class="line">            <span class="keyword">if</span> (res[i<span class="number">-1</span>] == des[j<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[i][j] = dis[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 相对而言的！向下走的意思就是多出了一个多余元素，在相对于上面那一格的最小编辑距离而言需要将这个多出来的元素删掉</span></span><br><span class="line"><span class="comment">                 * 同理，向下走就是目标串多了一个元素，要在左侧编辑的基础下再多加一个元素</span></span><br><span class="line"><span class="comment">                 * 向右下角走也是差不多的道理，既有一个多余元素，而且目标串也多了一个元素，所以要使用替换操作。</span></span><br><span class="line"><span class="comment">                 * */</span></span><br><span class="line">                <span class="type">int</span> delEd = dis[i][j<span class="number">-1</span>]+<span class="number">1</span>;<span class="comment">//往下走就是删除 </span></span><br><span class="line">                <span class="type">int</span> insEd = dis[i<span class="number">-1</span>][j]+<span class="number">1</span>;<span class="comment">//往右走是插入</span></span><br><span class="line">                <span class="type">int</span> subEd = dis[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;<span class="comment">//向右下角走--对角线走就是替换 在这里替换的代价是1</span></span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> minEd = min(min(delEd,insEd),subEd);</span><br><span class="line">                dis[i][j] = minEd;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> m = <span class="number">0</span>; m &lt; MAX; m++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n = <span class="number">0</span>; n &lt; MAX; n++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dis[m][n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[(<span class="type">int</span>)<span class="built_in">strlen</span>(res)][(<span class="type">int</span>)<span class="built_in">strlen</span>(des)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Min Distance of %s to %s is %d \n&quot;</span>,<span class="string">&quot;sunny&quot;</span>,<span class="string">&quot;snowy&quot;</span>,minEditDistance(<span class="string">&quot;sunny&quot;</span>,<span class="string">&quot;snowy&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Min Distance of %s to %s is %d&quot;</span>,<span class="string">&quot;me&quot;</span>,<span class="string">&quot;ame&quot;</span>,minEditDistance(<span class="string">&quot;me&quot;</span>,<span class="string">&quot;ame&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试用例-3"><a href="#测试用例-3" class="headerlink" title="测试用例"></a>测试用例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Min Distance of %s to %s is %d \n&quot;</span>,<span class="string">&quot;sunny&quot;</span>,<span class="string">&quot;snowy&quot;</span>,minEditDistance(<span class="string">&quot;sunny&quot;</span>,<span class="string">&quot;snowy&quot;</span>));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Min Distance of %s to %s is %d&quot;</span>,<span class="string">&quot;me&quot;</span>,<span class="string">&quot;ame&quot;</span>,minEditDistance(<span class="string">&quot;me&quot;</span>,<span class="string">&quot;ame&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="测试结果-3"><a href="#测试结果-3" class="headerlink" title="测试结果"></a>测试结果</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/201912126e56ba59f90a4.png"/><h4 id="表格表示"><a href="#表格表示" class="headerlink" title="表格表示"></a>表格表示</h4><table><thead><tr><th align="center"></th><th align="center">·</th><th align="center">s</th><th align="center">n</th><th align="center">o</th><th align="center">w</th><th align="center">y</th></tr></thead><tbody><tr><td align="center"><strong>·</strong></td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td></tr><tr><td align="center"><strong>s</strong></td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td></tr><tr><td align="center"><strong>u</strong></td><td align="center">2</td><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td></tr><tr><td align="center"><strong>n</strong></td><td align="center">3</td><td align="center">2</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td></tr><tr><td align="center"><strong>n</strong></td><td align="center">4</td><td align="center">3</td><td align="center">2</td><td align="center">2</td><td align="center">3</td><td align="center">4</td></tr><tr><td align="center"><strong>y</strong></td><td align="center">5</td><td align="center">4</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td></tr></tbody></table><p>所以最终的结论是<code>sunny</code>到<code>snowy</code>的最小编辑距离为<code>3</code> 。</p><table><thead><tr><th></th><th>·</th><th>a</th><th>m</th><th>e</th></tr></thead><tbody><tr><td>·</td><td>0</td><td>1</td><td>2</td><td>3</td></tr><tr><td>m</td><td>1</td><td>1</td><td>1</td><td>2</td></tr><tr><td>e</td><td>2</td><td>2</td><td>2</td><td>1</td></tr></tbody></table><p>所以最终的结论是<code>me</code>到<code>ame</code>的最小编辑距离为<code>1</code> 。</p><h2 id="霍夫曼编码"><a href="#霍夫曼编码" class="headerlink" title="霍夫曼编码"></a>霍夫曼编码</h2><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/20191126b29c6c7635916.png"/><p>由此可以得到字符编码的前缀码，不过使用前缀码的前提是每个字符编码都不是其他编码的前缀！因此每个字符都要放在树的叶子节点上。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/20191126059412da1b1d2.png"/><p>这样做就确保了编码没有<strong>二义性</strong>。</p><h4 id="编码的比特数："><a href="#编码的比特数：" class="headerlink" title="编码的比特数："></a>编码的比特数：</h4><p>$$<br>c_i在d_i的深度出现了f_i次，那么这个字符所占用的比特数为：<br>\begin{equation*}</p><p>\sum_{i=1}^Nd_if_i</p><p>\end{equation*}<br>$$</p><p>其中深度的数值等于其编码的位数！</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/201911260b2c7c30a1bbe.png"/><h4 id="Huffman算法"><a href="#Huffman算法" class="headerlink" title="Huffman算法"></a>Huffman算法</h4><p>算法对一个由树组成的森林进行，该森林中一共有C片叶子，也就是有C个字符需要编码。<strong>一棵树的权重等于它的树叶的频率之和</strong>。任取最小权重的两棵树$T_1$,$T_2$,并以这两棵树为子树形成新的树，将这样的过程进行<code>C-1</code>次，最终得到的就是Huffman编码的最优树。</p><blockquote><p>为什么需要进行<code>C-1</code>次：</p><p>​    因为森林中最开始有<code>C</code>棵树，也就是一共有<code>C</code>棵只有一个节点的树，每一次选取都会让两棵树合并成一棵树，树的总数减少一，因此从<code>C</code>到<code>1</code>也就需要进行<code>C-1</code>次</p></blockquote><h4 id="示例图："><a href="#示例图：" class="headerlink" title="示例图："></a>示例图：</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/201911269a7d3ff4605c5.png"/><p>该算法每一次选取子树都是在当前条件下选取权重最小的子树，因此该算法是贪婪算法。</p><h3 id="源代码-4"><a href="#源代码-4" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdfix.h&gt;</span></span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 哈夫曼编码树</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HuffmanTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> con[<span class="number">2</span>];                       <span class="comment">// 节点的内容</span></span><br><span class="line">    <span class="type">int</span> f;                          <span class="comment">//节点的频率</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HuffmanTree</span> *<span class="title">leftChild</span>;</span>  <span class="comment">//左儿子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HuffmanTree</span> *<span class="title">rightChild</span>;</span> <span class="comment">//右儿子</span></span><br><span class="line">&#125; * Node;</span><br><span class="line"><span class="comment">// 创建一个新的节点</span></span><br><span class="line">Node <span class="title function_">createNode</span><span class="params">(<span class="type">char</span> con[], <span class="type">int</span> f, Node left, Node right)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 先创建一个指针</span></span><br><span class="line">    Node newNode;</span><br><span class="line">    <span class="keyword">if</span> ((newNode = (Node)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node))) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(newNode, <span class="number">0</span>, <span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="comment">// strcpy(newNode-&gt;con,con);</span></span><br><span class="line">    <span class="keyword">if</span> (con)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(newNode-&gt;con,con,<span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(newNode-&gt;con,<span class="number">0</span>,<span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// newNode-&gt;con = con;</span></span><br><span class="line">    newNode-&gt;f = f;</span><br><span class="line">    newNode-&gt;leftChild = left;</span><br><span class="line">    newNode-&gt;rightChild = right;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * tree 树的数组</span></span><br><span class="line"><span class="comment"> * legth 数组的长度</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">Node <span class="title function_">huffman</span><span class="params">(Node tree[], <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    Node tempNode, node1, node2,parent;</span><br><span class="line">    <span class="comment">//如果这个数组里面只剩下了两个元素，那么就说明已经排序完成了</span></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">2</span>)</span><br><span class="line">    &#123;   </span><br><span class="line">        node1 = tree[<span class="number">0</span>];</span><br><span class="line">        node2 = tree[<span class="number">1</span>];</span><br><span class="line">        parent = createNode(<span class="literal">NULL</span>,node1-&gt;f+node2-&gt;f,node1,node2);</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 给这个节点数组排序，找出频率最小的两个点</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tempNode = tree[i];</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; tempNode-&gt;f &lt; tree[j - <span class="number">1</span>]-&gt;f; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[j] = tree[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        tree[j] = tempNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 频率最小的两个节点</span></span><br><span class="line">    node1 = tree[<span class="number">0</span>];</span><br><span class="line">    node2 = tree[<span class="number">1</span>];</span><br><span class="line">    parent = createNode(<span class="literal">NULL</span>,node1-&gt;f+node2-&gt;f,node1,node2);</span><br><span class="line">    <span class="comment">// 重新构建一个数组</span></span><br><span class="line">    Node newArray[length<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        newArray[i] = tree[i+<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    newArray[length<span class="number">-2</span>] = parent;</span><br><span class="line">    parent = huffman(newArray,length<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    Node node_a, node_e, node_i, node_s, <span class="type">node_t</span>, node_sp, node_nl,result;</span><br><span class="line">    node_a = createNode(<span class="string">&quot;a&quot;</span>, <span class="number">10</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    node_e = createNode(<span class="string">&quot;e&quot;</span>, <span class="number">15</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    node_i = createNode(<span class="string">&quot;i&quot;</span>, <span class="number">12</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    node_s = createNode(<span class="string">&quot;s&quot;</span>, <span class="number">3</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">node_t</span> = createNode(<span class="string">&quot;t&quot;</span>, <span class="number">4</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    node_sp = createNode(<span class="string">&quot;sp&quot;</span>, <span class="number">13</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    node_nl = createNode(<span class="string">&quot;nl&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    Node nodeArray[] = &#123;node_a, node_e, node_i, node_s, <span class="type">node_t</span>, node_sp, node_nl&#125;;</span><br><span class="line">    result = huffman(nodeArray, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试用例-4"><a href="#测试用例-4" class="headerlink" title="测试用例"></a>测试用例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Node node_a, node_e, node_i, node_s, <span class="type">node_t</span>, node_sp, node_nl,result;</span><br><span class="line">node_a = createNode(<span class="string">&quot;a&quot;</span>, <span class="number">10</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">node_e = createNode(<span class="string">&quot;e&quot;</span>, <span class="number">15</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">node_i = createNode(<span class="string">&quot;i&quot;</span>, <span class="number">12</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">node_s = createNode(<span class="string">&quot;s&quot;</span>, <span class="number">3</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="type">node_t</span> = createNode(<span class="string">&quot;t&quot;</span>, <span class="number">4</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">node_sp = createNode(<span class="string">&quot;sp&quot;</span>, <span class="number">13</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">node_nl = createNode(<span class="string">&quot;nl&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">Node nodeArray[] = &#123;node_a, node_e, node_i, node_s, <span class="type">node_t</span>, node_sp, node_nl&#125;;</span><br><span class="line">result = huffman(nodeArray, <span class="number">7</span>);  </span><br></pre></td></tr></table></figure><h4 id="测试结果-4"><a href="#测试结果-4" class="headerlink" title="测试结果"></a>测试结果</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191212c67a2475a36a9.png"/><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/2019121281724f0d5dd17.png"/><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191212e0efaba6f983a.png"/><h4 id="图的表示-1"><a href="#图的表示-1" class="headerlink" title="图的表示"></a>图的表示</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191212b3269fcedb2eb.jpg"/>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作 </tag>
            
            <tag> 文件 </tag>
            
            <tag> length </tag>
            
            <tag> node </tag>
            
            <tag> 字符 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 节点 </tag>
            
            <tag> int </tag>
            
            <tag> temp </tag>
            
            <tag> 变量 </tag>
            
            <tag> tree- </tag>
            
            <tag> leftchild </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitea--Git with a cup of tea</title>
      <link href="/2019/12/11/gitea_introduct/"/>
      <url>/2019/12/11/gitea_introduct/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Gitea–Git-with-a-cup-of-tea"><a href="#Gitea–Git-with-a-cup-of-tea" class="headerlink" title="Gitea–Git with a cup of tea"></a>Gitea–Git with a cup of tea</h1><h2 id="Gitea是一款开源的代码托管软件"><a href="#Gitea是一款开源的代码托管软件" class="headerlink" title="Gitea是一款开源的代码托管软件"></a>Gitea是一款开源的代码托管软件</h2><p>它来自于同样开源的gogs，是其一个分支，由于社区的开发贡献者与原gogs的开发者产生了意见上的分歧，社区开发者fork了gogs并不断迭代完善至今，其间还有很多有意思的事情，详情可以看这篇<a href="https://blog.wolfogre.com/posts/gogs-vs-gitea/#%E5%80%BC%E5%BE%97%E7%8E%A9%E5%91%B3%E7%9A%84%E7%82%B9">wolfogre</a>. </p><blockquote><h2 id="为什么会有-Gitea"><a href="#为什么会有-Gitea" class="headerlink" title="为什么会有 Gitea"></a>为什么会有 Gitea</h2><p>克隆一个现有的项目，然后改头换面、自立门户、重新发行，这在开源的世界上不算什么新鲜事。但这种情况的发生往往事出有因，比如原项目不维护了，原项目拒绝实现某些新特性，新项目针对特定用户群做了优化，等等等等。</p><p>但 Gogs 仍在维护，Gitea 也没有实现什么新功能，针对的用户群也是一模一样的，那为什么还会有 Gitea 呢？Gitea 的官方博客里给出了<a href="https://blog.wolfogre.com/redirect/v3/AzYDIqKRxBOSkNTeRNalmvESAwM8Cv46xcVaFgY7bjsveG6Qxf8EMjAxNsX_AjEyxZEWdWzMFMw7L3jFMRIDAzwK_jrFxVoWBjtuQQYW3Dsh_cU8Bk0KxTsGOwrMbQrMOy94xQ">解释</a>，翻译成中文如下：</p><hr><p>Gitea 是一个开源社区驱动的 Gogs 克隆，后者是一个备受欢迎的 Git 自托管服务。我们是一个日益增长的群体——之前是 Gogs 的用户和贡献者，但发现了 Gogs 令人沮丧的“单一维护者”管理模式，所以决定作出努力，建立一个更加开放、更加高效的管理模式。</p><p>在此之前，我们尝试说服 Unknown 给社区中更多的人“写权限”。他理所当然地认为 Gogs 是自己的生物，不希望它在自己掌控之外生长。所以为了有效地让代码走向自由，重新克隆一份是必须的。</p></blockquote><p>gogs是一个国人的产品，不得不说，确实是很优秀的个人作品，不过相对而言，我更喜欢gitea的UI风格和界面，具体的差异我暂时也还没有感受出来。</p><h3 id="我的Gitea站点"><a href="#我的Gitea站点" class="headerlink" title="我的Gitea站点"></a><a href="https://git.tanknee.cn/">我的Gitea站点</a></h3><p>下面是Gitea的安装与使用</p><h2 id="安装Gitea"><a href="#安装Gitea" class="headerlink" title="安装Gitea"></a>安装Gitea</h2><p>首先是要有一台可用的服务器。</p><p>这边我用的是宝塔面板，所以创建网站会比较轻松。用宝塔面板创建一个网站</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191211b793028b9360e.png"/><p>然后用Xshell或其他类似软件链接服务器，并<code>cd</code>定位到所要安装的文件夹。</p><p>这边我采用的是Binary Install，二进制安装。输入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -O gitea https://dl.gitea.io/gitea/1.10.1/gitea-1.10.1-linux-amd64</span><br><span class="line"><span class="built_in">chmod</span> +x gitea</span><br></pre></td></tr></table></figure><p>很快就会完成安装包的下载。</p><p>然后可以启动服务，测试站点的使用情况。使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gitea web</span><br></pre></td></tr></table></figure><p>然后就可以启动了。当然，你也可以在自己本地的Linux机器上安装。</p><p>当你选择在云服务器安装时，记得在阿里云/腾讯云上打开防火墙的3000端口，还有宝塔面板的3000端口。</p><h2 id="Gitea域名配置"><a href="#Gitea域名配置" class="headerlink" title="Gitea域名配置"></a>Gitea域名配置</h2><p>当然你不会希望Gitea永远使用IP来访问，那么你就需要一个域名。解析过程不再赘述。直接修改ngnix的配置文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    listen <span class="number">443</span> ssl http2;</span><br><span class="line">    server_name yourdomain.com;</span><br><span class="line">    </span><br><span class="line">    #SSL-START SSL相关配置，请勿删除或修改下一行带注释的<span class="number">404</span>规则</span><br><span class="line">    #error_page <span class="number">404</span>/<span class="number">404.</span>html;</span><br><span class="line">    </span><br><span class="line">    #如果你不需要https那么删除下面这一部分就可以了（删到SSL-END）</span><br><span class="line">    </span><br><span class="line">    #HTTP_TO_HTTPS_START</span><br><span class="line">    if ($server_port !~ <span class="number">443</span>)<span class="punctuation">&#123;</span></span><br><span class="line">        rewrite ^(/.*)$ https<span class="punctuation">:</span><span class="comment">//$host$1 permanent;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    #HTTP_TO_HTTPS_END</span><br><span class="line">    ssl_certificate ;#--这里填你的ssl证书地址</span><br><span class="line">    ssl_certificate_key ;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256<span class="punctuation">:</span>HIGH<span class="punctuation">:</span>!aNULL<span class="punctuation">:</span>!MD5<span class="punctuation">:</span>!RC4<span class="punctuation">:</span>!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared<span class="punctuation">:</span>SSL<span class="punctuation">:</span><span class="number">10</span>m;</span><br><span class="line">    ssl_session_timeout <span class="number">10</span>m;</span><br><span class="line">    error_page <span class="number">497</span>  https<span class="punctuation">:</span><span class="comment">//$host$request_uri;</span></span><br><span class="line"></span><br><span class="line">    #SSL-END</span><br><span class="line">    </span><br><span class="line">    #重定向到Gitea</span><br><span class="line">    client_max_body_size <span class="number">20</span>m;</span><br><span class="line">    location / <span class="punctuation">&#123;</span></span><br><span class="line">        #默认的端口是<span class="number">3000</span></span><br><span class="line">        proxy_pass http<span class="punctuation">:</span><span class="comment">//localhost:3000; </span></span><br><span class="line">    <span class="punctuation">&#125;</span>    </span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后记得在gitea安装时配置好URL即可。</p><h2 id="Gitea的使用"><a href="#Gitea的使用" class="headerlink" title="Gitea的使用"></a>Gitea的使用</h2><h3 id="安装的时候还是有几个坑的"><a href="#安装的时候还是有几个坑的" class="headerlink" title="安装的时候还是有几个坑的"></a>安装的时候还是有几个坑的</h3><p>比如SSH地址如果你不更改那么就会默认为LocalHost，不太雅观，记得修改</p><p>还有就是如果你使用root用户启动的Gitea，那么ssh的默认前缀就会是root，例如这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@git.tanknee.cn:tanknee/Xxxxx.git</span><br></pre></td></tr></table></figure><p>十分的不友好，所以我建议新建一个git用户，然后再切换到git用户启动Gitea安装，就可以达到这种效果了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@git.tanknee.cn:tanknee/Xxxxx.git</span><br></pre></td></tr></table></figure><h3 id="添加git用户"><a href="#添加git用户" class="headerlink" title="添加git用户"></a>添加git用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd git</span><br><span class="line">su -l git //切换用户</span><br></pre></td></tr></table></figure><h3 id="长期后台运行"><a href="#长期后台运行" class="headerlink" title="长期后台运行"></a>长期后台运行</h3><p>一种做法是将Gitea作为系统服务，开机自启动，另一种做法是用nohup，挂在后台。效果一致，但我觉得第一种相对会好一点。</p><h4 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a><a href="https://docs.gitea.io/en-us/linux-service/">开机自启动</a></h4><h4 id="nohup挂后台"><a href="#nohup挂后台" class="headerlink" title="nohup挂后台"></a>nohup挂后台</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ./gitea web &amp;</span><br></pre></td></tr></table></figure><p>其中 &amp;代表一直挂在后台。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>从gitlab转投到gitea之后服务器的负载小了很多，效果明显。</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191209e567191ff5ea2.png" alt="gitlab"></p><h3 id="前后对比"><a href="#前后对比" class="headerlink" title="前后对比"></a>前后对比</h3><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191209732606f328592.png" alt="gitea启用之后"></p><h3 id="负载对比"><a href="#负载对比" class="headerlink" title="负载对比"></a>负载对比</h3><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/201912113f383d0a855d5.png" alt="负载"></p><p>还是很好的一款开源代码托管平台。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> server </tag>
            
            <tag> 宝塔 </tag>
            
            <tag> 文件 </tag>
            
            <tag> ssl </tag>
            
            <tag> 域名 </tag>
            
            <tag> 地址 </tag>
            
            <tag> gitea </tag>
            
            <tag> gogs </tag>
            
            <tag> git </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十一月November</title>
      <link href="/2019/12/01/%E5%8D%81%E4%B8%80%E6%9C%88Nov/"/>
      <url>/2019/12/01/%E5%8D%81%E4%B8%80%E6%9C%88Nov/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-hfTZKCCr" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="18299006" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><p>[scode type=”red”]这是十一月的倒数第二天（21点13分），还有不到二十八个小时，2019年的十一月就要结束了。[/scode]</p><p>这个让我<strong>期待的，恐惧的，令人头大</strong>的十一月。</p><p>经历了三场结课考试，三次寒风中的早起物理实验，关于物理实验，我一直不是很明白为什么我的物理实验课总是在一年中最寒冷的几个月。</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/11/2019112950c9f0d183a5e.jpeg/imgzip" alt="凌晨七点的绝望坡"></p><p>[scode type=”blue”]原本包含期许的公选课，也在这个忙碌的十三周完结了。虽然我至今仍然对那一次没有去成中操观星耿耿于怀。[/scode]</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/11/20191129d5d6f659a6f00.jpeg" alt="我是真的真的很想去了"></p><p>[scode type=”blue”]陪伴了我七个多月的airpods Ⅱ也在前几天出给了文华学院的一个女生，甚至还第一次被陌生人加了微信？[/scode]</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/11/20191129e0bceaf3064a4.jpeg/imgzip" alt="受宠若惊/大雾"></p><p>[scode type=”blue”]二十四号去参加了上大学以来第三次五公里跑[/scode]</p><p>但是这一次却没有等来第三块奖牌，本以为本科四年能凑齐八块奖牌召唤神龙的，可惜了，要在华科读研才能拿到第八块了（大雾。<img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/11/201911297bc15632cd234.jpeg" alt="我恨"></p><p>期待了很久很久的airpods pro终于在上个月的月末发布了，然后我又纠结了很久很久，辗转apple官网和拼多多，最后还是剁手收入囊中了，害，我真是一个败家的人。</p><p>我买的真的不是<strong>mac</strong></p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/11/20191129e4f53adcd50eb.png/imgzip" alt="最后还是推掉了"></p><p>追了整整一个多月的LOL S9也是在面向对象考试的前一天完结了，平心而论，少了几分激动，多了几分理所当然哈哈哈，本来在群里早就说好了夺冠就去下单airpods结果还是因为没有抢到而不了了之</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/11/20191129b4720608a4e07.jpg/imgzip"/><blockquote><p>不过最后还是败了，去pdd买了哈哈哈哈哈哈。</p></blockquote><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/11/2019112935d637183c3b5.gif" alt=""></p><blockquote><p>写到这里的时候突然想起在中旬的时候在家里的爷爷碰上了交通事故，所幸并不严重（应该不是很严重，不过还是住了很多天医院，而且做了一个小手术，而我本准备在出事的那天打电话给爷爷却由于一直忙于复习，忘了这件事，真的是很惭愧很惭愧。</p></blockquote><p>wisco那边的项目也开始推进了，虽然直到现在我对前端依旧是一窍不通，甚至还有点畏惧花里胡哨的CSS语法，我真的是对平面设计没有任何天赋的人。</p><p>这个月没有认识更多的人，而是感觉，自己开始去认识那些一直在身边的人，虽然有时候有那么一点点的尴尬，无奈，但是都还挺好，毕竟我知道:</p><p>[scode type=”green”]<strong>没有任何一场相逢是恰到好处。</strong>[/scode]</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/11/20191129e82220820cd47.jpeg/imgzip" alt="华科的天"></p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/11/20191129cd2285d4657c2.jpeg/imgzip"><p>[scode type=”green”]<strong>华科的天也太好看了吧</strong>[/scode]</p><hr><p>[scode type=”blue”]下面是前几个月的总结[/scode]<br>[post cid=”525” /]<br>[post cid=”519” /]</p>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 每月纪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构入门？这一篇就够了</title>
      <link href="/2019/11/28/datastruct_review/"/>
      <url>/2019/11/28/datastruct_review/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><h3 id="运行时间的计算分析"><a href="#运行时间的计算分析" class="headerlink" title="运行时间的计算分析"></a>运行时间的计算分析</h3><p>上界：$O(f(N))$</p><p>下界：$Ω(g(N))$</p><p>准确表达则为：$Θ(h(N))$</p><p>也就是说都是一个关于N的函数！</p><p>这么做的目的是为了比较两个算法的<strong>相对增长速率</strong></p><h4 id="求解算法时间复杂度的步骤"><a href="#求解算法时间复杂度的步骤" class="headerlink" title="求解算法时间复杂度的步骤"></a>求解算法时间复杂度的步骤</h4><ol><li>找出算法中的基本语句；</li></ol><p>　　算法中执行次数最多的那条语句就是基本语句，通常是最内层循环的循环体。</p><ol start="2"><li>计算基本语句的执行次数的数量级；</li></ol><p>　　只需计算基本语句执行次数的数量级，这就意味着只要保证基本语句执行次数的函数中的最高次幂正确即可，可以忽略所有低次幂和最高次幂的系数。这样能够简化算法分析，并且使注意力集中在最重要的一点上：增长率。</p><ol start="3"><li>用大Ο记号表示算法的时间性能。</li></ol><p>　　将基本语句执行次数的数量级放入大Ο记号中。</p><ol start="4"><li>可以忽略末尾带上的常数项</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求数组中的子序列的和的最大值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">MaxSubsequenceSum</span><span class="params">(<span class="type">const</span> <span class="type">int</span> A[],<span class="type">int</span> N)</span>&#123;</span><br><span class="line">    <span class="type">int</span> maxSum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> tempSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; N;i++)&#123;</span><br><span class="line">        tempSum += A[i];</span><br><span class="line">        <span class="keyword">if</span>(tempSum &gt; maxSum)&#123;</span><br><span class="line">            maxSum = tempSum;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tempSum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            tempSum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度函数的运算规则"><a href="#复杂度函数的运算规则" class="headerlink" title="复杂度函数的运算规则"></a>复杂度函数的运算规则</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191123190408.png"/><h2 id="抽象数据类型ADT"><a href="#抽象数据类型ADT" class="headerlink" title="抽象数据类型ADT"></a>抽象数据类型ADT</h2><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><p>表分为两种，顺序表与链表。其中顺序表要求系统给其分配的内存单元是连续的，因此，顺序表的访问时间可以做到线性时间，第二种是链表，链表不要求连续的内存空间，但其中的每一块都是与其他链表节点耦合的。</p><h4 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h4><p>即数组，内存地址连续。</p><p>访问时为线性访问，速度较快。插入删除时代价较大，因为需要更改其后所有元素的信息才能维持当前的顺序表。</p><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p>在C语言中是通过建立结构体然后存储指针的方式来进行访问的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 邻接表中表的顶点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">VNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> index;          <span class="comment">// 顶点信息</span></span><br><span class="line">    ENode *firstEdge; <span class="comment">// 指向第一条依附该顶点的弧</span></span><br><span class="line">&#125; VNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LGraph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> vexNum; <span class="comment">// 图的顶点的数目</span></span><br><span class="line">    <span class="type">int</span> edgNum; <span class="comment">// 图的边的数目</span></span><br><span class="line">    VNode vexs[MAX];</span><br><span class="line">&#125; LGraph;</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://git.tanknee.cn/snippets/1">代码片段</a></p></blockquote><h5 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h5><h5 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h5><h5 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h5><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>特点：先进后出<code>FILO</code></p><p>只需要一个指针就可以利用链表来实现栈的数据结构，在栈中只有栈顶可以出入数据，栈底的数据只有等其他数据都出去了才能被弹出</p><p>两个栈操作：<code>PUSH</code> <code>POP</code></p><p>实例：使用栈数据结构来实现后缀表达式</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191123165051.png"/><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>特点：先进先出<code>FIFO</code></p><p>对于队列而言，有两个口可以与外界交换数据，分别是队列头和队列尾部。</p><p>只允许在队列尾部入队，在队列头部出队。</p><p>两个操作：<code>Enqueue</code> <code>Dequeue</code></p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><blockquote><p><a href="https://tanknee.cn/2019/10/21/524">之前写的二叉树博客</a></p></blockquote><blockquote><p><a href="D:\OneDrive\文档\博客本地草稿存档\课内\数据结构\DataStruct.md">本地</a></p></blockquote><h3 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h3><p>AVL树是带有平衡条件的二叉查找树。</p><p>平衡条件必须要相对容易保持，而且必须保证树的深度是$O(logN)$，那么在AVL树中，就是保证节点的左右子树的高度之差小于2，即只能为1或者0 。</p><p>下面是AVL树插入的C语言实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(a,b) (a &gt; b) ? (a) : (b)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AVL树的结构体定义</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVLTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span>   </span><br><span class="line">    <span class="type">int</span> data;   <span class="comment">//节点存储的值</span></span><br><span class="line">    <span class="type">int</span> height; <span class="comment">//当前节点的高度</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AVLTreeNode</span> *<span class="title">leftChild</span>;</span>  <span class="comment">//左儿子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AVLTreeNode</span> *<span class="title">rightChild</span>;</span> <span class="comment">//右儿子</span></span><br><span class="line">&#125;Node,*AVLTree;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * @param data 存储的数据</span></span><br><span class="line"><span class="comment"> * @param left 左儿子</span></span><br><span class="line"><span class="comment"> * @param right 右儿子</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">static</span> Node *<span class="title function_">createAVLTreeNode</span><span class="params">(<span class="type">int</span> data,Node *left,Node *right)</span>&#123;</span><br><span class="line">    <span class="comment">// 为这个新的节点开辟内存空间</span></span><br><span class="line">    Node *node;</span><br><span class="line">    <span class="keyword">if</span> (((node = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node))) == <span class="literal">NULL</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 为这个node赋初值</span></span><br><span class="line">    node-&gt;data = data;</span><br><span class="line">    <span class="comment">// 空子树的高度为0</span></span><br><span class="line">    node-&gt;height = <span class="number">0</span>;</span><br><span class="line">    node-&gt;leftChild = left;</span><br><span class="line">    node-&gt;rightChild = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取节点的高度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getHeightOfNode</span><span class="params">(Node *node)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (node==<span class="literal">NULL</span>) ? <span class="number">0</span> : node-&gt;height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * LL：左左对应的情况(左单旋转)。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 返回值：旋转后的根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> Node* <span class="title function_">leftLeftRotation</span><span class="params">(AVLTree k2)</span>&#123;</span><br><span class="line">    AVLTree k1;</span><br><span class="line"></span><br><span class="line">    k1 = k2-&gt;leftChild;</span><br><span class="line">    <span class="comment">// k2与k1的右子树进行互换</span></span><br><span class="line">    k2-&gt;leftChild = k1-&gt;rightChild;</span><br><span class="line">    k1-&gt;rightChild = k2;</span><br><span class="line"></span><br><span class="line">    k2-&gt;height = MAX( getHeightOfNode(k2-&gt;leftChild), getHeightOfNode(k2-&gt;rightChild)) + <span class="number">1</span>;</span><br><span class="line">    k1-&gt;height = MAX( getHeightOfNode(k1-&gt;leftChild), k2-&gt;height) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 旋转完成之后的根节点是k1，即k1上浮了而原本的k2下沉为k1的儿子了</span></span><br><span class="line">    <span class="keyword">return</span> k1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * RR：右右对应的情况(右单旋转)。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 返回值：旋转后的根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> Node* <span class="title function_">rightRightRotation</span><span class="params">(AVLTree k2)</span>&#123;</span><br><span class="line">    AVLTree k1;</span><br><span class="line"></span><br><span class="line">    k1 = k2-&gt;rightChild;</span><br><span class="line">    <span class="comment">// k2与k1的右子树进行互换</span></span><br><span class="line">    k2-&gt;rightChild = k1-&gt;leftChild;</span><br><span class="line">    k1-&gt;leftChild = k2;</span><br><span class="line"></span><br><span class="line">    k2-&gt;height = MAX( getHeightOfNode(k2-&gt;leftChild), getHeightOfNode(k2-&gt;rightChild)) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//此时的k2为k1的左儿子，所以只需要比较k2和k1的右儿子的高度就好了</span></span><br><span class="line">    k1-&gt;height = MAX( getHeightOfNode(k1-&gt;rightChild), k2-&gt;height) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 旋转完成之后的根节点是k1，即k1上浮了而原本的k2下沉为k1的儿子了</span></span><br><span class="line">    <span class="keyword">return</span> k1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * LR</span></span><br><span class="line"><span class="comment"> * 相当于进行了一次RR旋转一次LL旋转。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">static</span> Node *<span class="title function_">leftRightRotation</span><span class="params">(Node *k3)</span>&#123;</span><br><span class="line">    <span class="comment">//先对k3的左子树进行RR旋转，再对旋转后的k3进行LL旋转</span></span><br><span class="line">    k3-&gt;leftChild = rightRightRotation(k3-&gt;leftChild);</span><br><span class="line">    <span class="keyword">return</span> leftLeftRotation(k3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * RL</span></span><br><span class="line"><span class="comment"> * 相当于进行了一次LL旋转一次RR旋转。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">static</span> Node *<span class="title function_">rightLeftRotation</span><span class="params">(Node *k3)</span>&#123;</span><br><span class="line">    <span class="comment">//先对k3的右子树进行LL旋转，再对旋转后的k3进行RR旋转</span></span><br><span class="line">    k3-&gt;rightChild = leftLeftRotation(k3-&gt;rightChild);</span><br><span class="line">    <span class="keyword">return</span> rightRightRotation(k3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入要插入的树</span></span><br><span class="line"><span class="comment"> * 传入要插入的数据</span></span><br><span class="line"><span class="comment"> * 返回更新后的树的根节点</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">Node *<span class="title function_">insertIntoAVLTree</span><span class="params">(AVLTree tree,<span class="type">int</span> data)</span>&#123;</span><br><span class="line">    <span class="comment">// 如果树是一个空树</span></span><br><span class="line">    <span class="keyword">if</span> (tree == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="comment">// 那么就建立一个空节点</span></span><br><span class="line">        tree = createAVLTreeNode(data,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">// 如果创建失败的话</span></span><br><span class="line">        <span class="keyword">if</span> (tree == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Create Node Failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data &lt; tree-&gt;data)<span class="comment">//如果要插入的数值比根节点的值要小，那么就插入到其左子树中</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 然后递归调用插入方法，直到找到一个空节点再插入！</span></span><br><span class="line">        tree-&gt;leftChild = insertIntoAVLTree(tree-&gt;leftChild,data);</span><br><span class="line">        <span class="comment">// 由于是插入到左子树中，因此只可能是左子树的高度大于右子树的高度</span></span><br><span class="line">        <span class="keyword">if</span> (getHeightOfNode(tree-&gt;leftChild) - getHeightOfNode(tree-&gt;rightChild) == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果需要插入的值根节点的左子树还要小那么说明插入到了左子树的左侧，那就可以判断此时的不平衡状态为左左LL，调用LL旋转即可</span></span><br><span class="line">            <span class="keyword">if</span> (data &lt; tree-&gt;leftChild-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                tree-&gt;leftChild = leftLeftRotation(tree-&gt;leftChild);</span><br><span class="line">            &#125;<span class="keyword">else</span>   <span class="comment">// 否则就说明大于这个节点的值，插入到在左子树的右儿子上，调用LR旋转</span></span><br><span class="line">            &#123;</span><br><span class="line">                tree-&gt;leftChild = leftRightRotation(tree-&gt;leftChild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; tree-&gt;data)</span><br><span class="line">    &#123;<span class="comment">//如果要插入的数值比根节点的值要大，那么就插入到其由子树中</span></span><br><span class="line">        tree-&gt;rightChild = insertIntoAVLTree(tree-&gt;rightChild,data);</span><br><span class="line">        <span class="keyword">if</span> (getHeightOfNode(tree-&gt;rightChild) - getHeightOfNode(tree-&gt;leftChild) == <span class="number">2</span>)<span class="comment">// 由于插入到右子树中那么就是只有可能右子树的高度大于左子树的高度</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (data &gt; tree-&gt;rightChild-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                tree-&gt;rightChild = rightRightRotation(tree-&gt;rightChild);</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                tree-&gt;rightChild = rightLeftRotation(tree-&gt;rightChild);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Don&#x27;t Insert The Same Node&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新根节点的高度</span></span><br><span class="line">    <span class="keyword">if</span> (((MAX(getHeightOfNode(tree-&gt;leftChild),getHeightOfNode(tree-&gt;rightChild))) == <span class="number">0</span>) &amp;&amp; (tree-&gt;leftChild != <span class="literal">NULL</span> || tree-&gt;rightChild != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 其子节点全部都是叶子节点</span></span><br><span class="line">        <span class="comment">// 说明两个子树至少存在一个，那么这个根节点的高度就是1</span></span><br><span class="line">        tree-&gt;height = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (tree-&gt;leftChild == <span class="literal">NULL</span> &amp;&amp; tree-&gt;rightChild == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果两个子树都不存在那么说明这个节点就是叶子节点，直接返回就好</span></span><br><span class="line">        <span class="keyword">return</span> tree;</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        tree-&gt;height = (MAX(getHeightOfNode(tree-&gt;leftChild),getHeightOfNode(tree-&gt;rightChild))) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Node *root = createAVLTreeNode(<span class="number">10</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    Node *left = createAVLTreeNode(<span class="number">6</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    Node *right = createAVLTreeNode(<span class="number">13</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">    root-&gt;leftChild = left;</span><br><span class="line">    root-&gt;rightChild = right;</span><br><span class="line">    root = insertIntoAVLTree(root,<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 此时接着插入值为3的节点就会破坏AVL树的平衡条件</span></span><br><span class="line">    root = insertIntoAVLTree(root,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伸展树"><a href="#伸展树" class="headerlink" title="伸展树"></a>伸展树</h3><h3 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h3><p>B-树是为了磁盘存储而设计的一种<strong>多叉树</strong>，是多叉平衡查找树</p><h4 id="用阶数来定义B-树："><a href="#用阶数来定义B-树：" class="headerlink" title="用阶数来定义B-树："></a>用阶数来定义B-树：</h4><p>B 树又叫平衡多路查找树。一棵m阶的B 树具有以下性质：</p><ol><li><p>每个节点的子节点个数为<br>$$<br>M/2 ≤ N ≤ M<br>$$</p></li><li><p>并且B树的全部叶子节点在同一高度上</p></li><li><p>根节点至少有两个子树</p></li><li><p>由$N$ 个子树的节点一定含有$N-1$个关键字</p></li><li><p><code>Ki (i=1...n)</code>为关键字，且关键字按顺序升序排序<code>K(i-1)&lt; Ki</code>。 </p></li><li><p><code>Pi</code>为指向子树根的接点，且指针<code>P(i-1)</code>指向子树中所有结点的关键字均小于<code>Ki</code>，但都大于<code>K(i-1)</code>。–指针域的定义</p></li></ol><h3 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h3><p>先序遍历，后序遍历。其中的前/后都是儿子节点相对于父节点而言的！</p><ul><li>先序遍历：对根节点的处理在儿子节点的处理之前</li><li>后序遍历：对儿子节点的处理在根节点的处理之前</li><li>中序遍历：先遍历左子树再遍历根节点最后遍历右子树。可以生成自然的中缀表达式</li></ul><p>树中很重要的一个思想就是递归，因为树，树的子节点，等等结构都是相似的，因此同一种规律/算法就可以不断的反复套用。在遍历，插入，增删查改中都会用到递归的思想。</p><h2 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h2><h3 id="散列的定义"><a href="#散列的定义" class="headerlink" title="散列的定义"></a>散列的定义</h3><p>散列表的实现被称为<strong>散列</strong>（Hashing）</p><p>散列是一种以常熟平均时间执行插入删除查找的技术。但是散列表中的元素之间的排列顺序是随机的，因此是无法通过线性时间来打印散列表</p><p><strong>散列函数</strong>：其作用就是将关键字尽可能合适的映射到不同的存储单元中去。</p><p>但是毫无疑问，由于存储单元的数目是有限的而关键字的个数是无穷的，在后期的散列分配映射过程中肯定会遇到冲突现象，因此需要解决冲突。</p><p>当关键字是整数时，可以通过对单元个数取模来实现散列函数的确定，但是如果散列表的大小为10，而关键字多是以0结尾，那么这种情况下散列分配的结果就不够理想，因此，在设计散列表的大小时应该尽量采用素数大小！</p><h3 id="解决散列冲突问题"><a href="#解决散列冲突问题" class="headerlink" title="解决散列冲突问题"></a>解决散列冲突问题</h3><p>如果当一个元素被插入时另一个元素已经存在，即两个元素的散列值相同，那么就会产生一个冲突！</p><h4 id="分离链接法"><a href="#分离链接法" class="headerlink" title="分离链接法"></a>分离链接法</h4><p>分离链接法的做法是将散列到同一个散列值的所有元素都保留到一个表中，并且这些表都有表头，如果空间较为局促，那也可以不使用表头</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191123202857.png"/><p><strong>填装因子</strong>$λ$为散列表中的元素个数与散列表大小的比值</p><ul><li>装填因子Load factor $λ$=元素个数<strong>/</strong>哈希表的大小=链表的平均长度</li><li>输入规模的大小不用N，而用<em>λ</em></li></ul><ol><li>平均情况分析（<em>λ</em>=O(1),O(1)）<ul><li>不成功的查找: <em>λ</em> 次比较（ 1+<em>λ</em> ）</li><li>成功查找：1+<em>λ</em>/2（ 1+<em>λ</em> ）</li><li>插入：1+<em>λ</em></li><li>删除：1+<em>λ</em>/2（ 1+<em>λ</em> ）</li></ul></li><li>最坏情况分析(<em>λ</em>=O(N),所有元素哈希到同一链表，O(N))<ul><li>不成功的查找</li><li>成功查找</li><li>插入</li><li>删除</li></ul></li></ol><p>分离链接法的一般法则是使得表的大小尽量与预料的元素个数差不多，即尽量让$λ≈1$,是表的大小尽量是一个素数，且各个冲突处理链表尽可能短。</p><p>缺点是分离链接法浪费了大量时间在分配内存空间上。</p><h4 id="开放定址法"><a href="#开放定址法" class="headerlink" title="开放定址法"></a>开放定址法</h4><p>在开放定址法中，不使用指针，而是用了另一种方式，它在遇到冲突时，选择在散列表中寻找其他没有被使用的单元，直到选中了空单元才停止。<br>$$<br>h_i(X) = (Hash(X)+F(i)) \mod TableSize<br>$$<br>因此开放定址法的空间需求相对分离链接法要更大一般而言$λ≤0.5$。</p><h5 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h5><p>在线性探测法中，函数F是i的线性函数，即F的最高次数为1次，典型情况为<br>$$<br>F(i) = i<br>$$<br>这相当于逐个探测每个散列表单元，并且必要时可以返回循环遍历整个散列表直到查到一个可用的空单元。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/98142ddfb49eb8bd6e16a0048314a26.jpg"/><p>容易看出，如果插入的关键字的散列结果较为接近，那么就会出现一次聚集现象。</p><p>如果表有超过一半可以被使用的话，那么线性探测法就是一个较好的办法，然而如果$λ = 0.5$，那么平均插入操作只需要探测2.5次，而对于成功的操作只需要探测1.5次。因此我们在使用线性探测法使应该尽量使填充因子小于0.5！</p><h5 id="平方探测法"><a href="#平方探测法" class="headerlink" title="平方探测法"></a>平方探测法</h5><p>该方式是消除线性探测法中一次聚集问题的冲突解决办法。平方探测法的冲突函数是二次函数，其较为主流的选择为<br>$$<br>F(i) = i^2<br>$$<br><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/b8bc2d6c07c5ccf509c04dcf381899e.jpg"/></p><p><strong>规律</strong>：使用平方探测法，当表有一半是空的时，并且表的大小为素数，那么我们总能保证此时可以插入一个新的元素。</p><p>在开放定址散列表中，标准的删除操作是无法施行的，因为相应的单元可能已经发生了冲突，其元素已经被挪到了其他位置上了。</p><h2 id="优先队列-堆"><a href="#优先队列-堆" class="headerlink" title="优先队列-堆"></a>优先队列-堆</h2><p>在传统的队列结构<code>Queue</code>中，各个元素都是没有指定的优先级的，都遵循严格的先入先出原则，但是这样的原则并不是永远都是合适的，当我们遇到了CPU处理事件的类似问题时，就会出现优先级的考虑，优先级相对较高的问题应该更快更早被考虑和解决。</p><p>因此为了应对这个需求，我们更不应该直接使用线性结构–数组，因为如果使用数组的话最坏情况可能会达到$O(N)$,也就是需要出队的那个元素在最末尾，我们需要多次比较才能找到那个元素！于是我们应该采用二叉堆。</p><h3 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h3><p>二叉堆又有最大堆与最小堆的不同类型。其分别对应了最大优先队列和最小优先队列。</p><p>二叉堆是一颗被完全填满的二叉树，但是并不是完全二叉树，它在最底层是有可能存在没有完全放满叶子的情况，因此一颗高度为<code>h</code>的二叉树，它的总结点数应该为：2<sup>h</sup>到2<sup>h+1</sup>-1​</p><p>并且如果用数组来存储二叉堆，其根节点与子节点有这样的性质：</p><ul><li>如果根节点为<code>i</code>，那么它的左儿子的下标就是<code>2*i+1</code>右儿子的下标就是<code>2*i+2</code></li><li>下标为<code>length/2 -1</code>的堆元素肯定存在有左儿子</li></ul><h4 id="二叉堆的构造"><a href="#二叉堆的构造" class="headerlink" title="二叉堆的构造"></a>二叉堆的构造</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapAdjust</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> root,<span class="type">int</span> length)</span> &#123;</span><br><span class="line">       <span class="comment">// 以 root节点为根节点，遍历这个长度为length的数组，判断其是否满足大顶堆的要求，而且我们只需要判断根节点和其两个子节点是否满足就好了，其他的事情交给循环来做</span></span><br><span class="line">       <span class="comment">//这里放一个length是为了保证访问数组的时候不会越界</span></span><br><span class="line">       <span class="type">int</span> child;  <span class="comment">// 子节点的值</span></span><br><span class="line">       <span class="type">int</span> father; <span class="comment">// 父节点的值</span></span><br><span class="line">       <span class="keyword">for</span>(father = arr[root];<span class="number">2</span>*root+<span class="number">1</span> &lt; length;root = child)&#123;</span><br><span class="line">           <span class="comment">//只要它的左儿子是存在的，那么就开始构造/重构堆</span></span><br><span class="line">           child = <span class="number">2</span>*root+<span class="number">1</span>; <span class="comment">// 以root节点为根节点的左子树的下标</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// 如果这个根节点的左子树不是这个堆的最后一个元素并且左子树小于右子树。那么就把下标指向右子树</span></span><br><span class="line">           <span class="comment">// 因为小的元素要下沉就必须要跟两个子树中较大的那个进行交换，否则如果跟较小的节点进行交换的话可能还需要交换两次！</span></span><br><span class="line">           <span class="keyword">if</span> (child != length-<span class="number">1</span> &amp;&amp; arr[child] &lt; arr[child+<span class="number">1</span>]) &#123;</span><br><span class="line">               child++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 如果此时的父节点小于子树中的那个较大者，就与之交换！</span></span><br><span class="line">           <span class="keyword">if</span> (father &lt; arr[child]) &#123;</span><br><span class="line">               arr[root] = arr[child]; <span class="comment">// 父节点的原有值已经记录在father这个变量内了！</span></span><br><span class="line">               <span class="comment">//交换之后还需要接着对这个以儿子节点为根节点的子树进行堆判断，也就是进入下一个循环</span></span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">// 说明该节点符合大顶堆的标准，退出for循环</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 由于当前下标为root的节点值可能是废弃的，即已经被交换过，所以这个节点位置的应有值是该移动节点的值，即最初始的父节点</span></span><br><span class="line">       arr[root] = father;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="二叉堆的插入算法"><a href="#二叉堆的插入算法" class="headerlink" title="二叉堆的插入算法"></a>二叉堆的插入算法</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191125162336.png"/><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="comment">// 插入排序的主要思想是排过序的前一部分是永远有序的，只需要将当前元素放置到正确位置就好</span></span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; length; i++)<span class="comment">//可以选择直接从第一个元素开始</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = A[i];</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; A[j<span class="number">-1</span>] &gt; temp; j--)<span class="comment">// 第一个j=i的元素是还没有被排序的待排元素！所以要从第i-1个元素开始排序</span></span><br><span class="line">        &#123;</span><br><span class="line">            A[j] = A[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 退出上一个循环的原因要么是找到了该放的正确位置，要么是到了数组的第一位。</span></span><br><span class="line">        <span class="comment">// 但是不管是那种情况，此时j就是正确位置的下标！</span></span><br><span class="line">        A[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> length)</span>&#123;</span><br><span class="line">    <span class="comment">// int A[5] = &#123;7,6,5,9,3&#125;;</span></span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> increment = length/<span class="number">2</span>; increment &gt; <span class="number">0</span>; increment /= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = increment; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = A[i];</span><br><span class="line">            <span class="comment">// 从下标为increment 的元素开始，由于每次的间隔已知，且开头已知，那么由后向前找较为的方便</span></span><br><span class="line">            <span class="comment">// 确保每个元素在这个增量间隔序列中的位置是正确的！</span></span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt;= increment; j -= increment)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp &lt; A[j - increment])</span><br><span class="line">                &#123;</span><br><span class="line">                    A[j] = A[j - increment];</span><br><span class="line">                &#125;<span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            A[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123; <span class="number">50</span>, <span class="number">10</span>, <span class="number">90</span>, <span class="number">30</span>, <span class="number">70</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="number">60</span>, <span class="number">20</span> &#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;排序之前：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line">heapSort(arr);</span><br><span class="line"> </span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;排序之后：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">// Create a big top heap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length/<span class="number">2</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            heapAdjust(arr, i, arr.length);<span class="comment">//从中间到开头的所有元素都进行堆的标准判断，确保生成一个完整的堆</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将堆顶最大的那个元素和后面的元素进行交换，然后再生成大顶堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 交换堆顶和队列中最后一个元素的值</span></span><br><span class="line">            exchange(arr, <span class="number">0</span>, i);</span><br><span class="line">            <span class="comment">// 判断这个队列是否能构成大顶堆不能的话就调整</span></span><br><span class="line">            <span class="comment">// 这里调整的实质是：只有堆顶一个元素需要调整，因此只需要将堆顶的元素下沉到相应的位置就好了不需要调整太多元素！！</span></span><br><span class="line">            heapAdjust(arr, <span class="number">0</span>, i);<span class="comment">//只排序前i个元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapAdjust</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> root,<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="comment">// 以 root节点为根节点，遍历这个长度为length的数组，判断其是否满足大顶堆的要求，而且我们只需要判断根节点和其两个子节点是否满足就好了，其他的事情交给循环来做</span></span><br><span class="line">        <span class="comment">//这里放一个length是为了保证访问数组的时候不会越界</span></span><br><span class="line">        <span class="type">int</span> child;  <span class="comment">// 子节点的值</span></span><br><span class="line">        <span class="type">int</span> father; <span class="comment">// 父节点的值</span></span><br><span class="line">        <span class="keyword">for</span>(father = arr[root];<span class="number">2</span>*root+<span class="number">1</span> &lt; length;root = child)&#123;</span><br><span class="line">            <span class="comment">//只要它的左儿子是存在的，那么就开始构造/重构堆</span></span><br><span class="line">            child = <span class="number">2</span>*root+<span class="number">1</span>; <span class="comment">// 以root节点为根节点的左子树的下标</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果这个根节点的左子树不是这个堆的最后一个元素并且左子树小于右子树。那么就把下标指向右子树</span></span><br><span class="line">            <span class="comment">// 因为小的元素要下沉就必须要跟两个子树中较大的那个进行交换，否则如果跟较小的节点进行交换的话可能还需要交换两次！</span></span><br><span class="line">            <span class="keyword">if</span> (child != length-<span class="number">1</span> &amp;&amp; arr[child] &lt; arr[child+<span class="number">1</span>]) &#123;</span><br><span class="line">                child++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果此时的父节点小于子树中的那个较大者，就与之交换！</span></span><br><span class="line">            <span class="keyword">if</span> (father &lt; arr[child]) &#123;</span><br><span class="line">                arr[root] = arr[child]; <span class="comment">// 父节点的原有值已经记录在father这个变量内了！</span></span><br><span class="line">                <span class="comment">//交换之后还需要接着对这个以儿子节点为根节点的子树进行堆判断，也就是进入下一个循环</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 说明该节点符合大顶堆的标准，退出for循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 由于当前下标为root的节点值可能是废弃的，即已经被交换过，所以这个节点位置的应有值是该移动节点的值，即最初始的父节点</span></span><br><span class="line">        arr[root] = father;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exchange</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> began,<span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[began];</span><br><span class="line">        arr[began] = arr[end];</span><br><span class="line">        arr[end] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Max_ 10</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 归并排序中的合并算法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Merge</span><span class="params">(<span class="type">int</span> <span class="built_in">array</span>[], <span class="type">int</span> left, <span class="type">int</span> m, <span class="type">int</span> right)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> aux[Max_] = &#123;<span class="number">0</span>&#125;;  <span class="comment">// 临时数组 （若不使用临时数组，将两个有序数组合并为一个有序数组比较麻烦）</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">//第一个数组索引</span></span><br><span class="line">    <span class="type">int</span> j; <span class="comment">//第二个数组索引</span></span><br><span class="line">    <span class="type">int</span> k; <span class="comment">//临时数组索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = left, j = m+<span class="number">1</span>, k = <span class="number">0</span>; k &lt;= right-left; k++) <span class="comment">// 分别将 i, j, k 指向各自数组的首部。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//若 i 到达第一个数组的尾部，将第二个数组余下元素复制到 临时数组中</span></span><br><span class="line">        <span class="keyword">if</span> (i == m+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            aux[k] = <span class="built_in">array</span>[j++];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若 j 到达第二个数组的尾部，将第一个数组余下元素复制到 临时数组中</span></span><br><span class="line">        <span class="keyword">if</span> (j == right+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            aux[k] = <span class="built_in">array</span>[i++];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果第一个数组的当前元素 比 第二个数组的当前元素小，将 第一个数组的当前元素复制到 临时数组中</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>[i] &lt; <span class="built_in">array</span>[j])</span><br><span class="line">        &#123;</span><br><span class="line">            aux[k] = <span class="built_in">array</span>[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果第二个数组的当前元素 比 第一个数组的当前元素小，将 第二个数组的当前元素复制到 临时数组中</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            aux[k] = <span class="built_in">array</span>[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将有序的临时数组 元素 刷回 被排序的数组 array 中，</span></span><br><span class="line">    <span class="comment">//i = left , 被排序的数组array 的起始位置</span></span><br><span class="line">    <span class="comment">//j = 0， 临时数组的起始位置</span></span><br><span class="line">    <span class="keyword">for</span> (i = left, j = <span class="number">0</span>; i &lt;= right; i++, j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">array</span>[i] = aux[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MergeSort</span><span class="params">(<span class="type">int</span> <span class="built_in">array</span>[], <span class="type">int</span> start, <span class="type">int</span> end)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 先拆分，直到拆分到最小部分才结束，也就是只剩下一个元素的时候开始递归返回</span></span><br><span class="line">    <span class="comment">// 排序是在合并的时候发生的，通过下标来控制拆分后的元素位置，然后将需要排序的元素输出到临时数组中，最后重新覆盖原始数组中的元素列</span></span><br><span class="line">    <span class="keyword">if</span> (start &lt; end)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        i = (end + start) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 对前半部分进行排序</span></span><br><span class="line">        MergeSort(<span class="built_in">array</span>, start, i);</span><br><span class="line">        <span class="comment">// 对后半部分进行排序</span></span><br><span class="line">        MergeSort(<span class="built_in">array</span>, i + <span class="number">1</span>, end);</span><br><span class="line">        <span class="comment">// 合并前后两部分</span></span><br><span class="line">        Merge(<span class="built_in">array</span>, start, i, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;   <span class="comment">//测试数据</span></span><br><span class="line">    <span class="type">int</span> arr_test[Max_] = &#123; <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span> &#125;;</span><br><span class="line">    MergeSort( arr_test, <span class="number">0</span>, Max_<span class="number">-1</span> );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>快排的核心思想就是哨兵，通过两个pivot来实现将所给的数组中的所有元素排序(大致排序，只按照与标兵的大小比较)，最后哨兵会和的时候就是标兵元素的正确存放地址，此时左边为小于标兵的元素，右边是大于标兵的元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">/*****************************************************</span></span><br><span class="line"><span class="comment">File name：Quicksort</span></span><br><span class="line"><span class="comment">Author：Zhengqijun    Version:1.0    Date: 2016/11/04</span></span><br><span class="line"><span class="comment">Description: 对数组进行快速排序</span></span><br><span class="line"><span class="comment">Funcion List: 实现快速排序算法</span></span><br><span class="line"><span class="comment">*****************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************</span></span><br><span class="line"><span class="comment"> *函数名：display</span></span><br><span class="line"><span class="comment"> *作用：打印数组元素</span></span><br><span class="line"><span class="comment"> *参数：array - 打印的数组，maxlen - 数组元素个数</span></span><br><span class="line"><span class="comment"> *返回值：无</span></span><br><span class="line"><span class="comment"> **************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">display</span><span class="params">(<span class="type">int</span> <span class="built_in">array</span>[], <span class="type">int</span> maxlen)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; maxlen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-3d&quot;</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/************************************</span></span><br><span class="line"><span class="comment"> *函数名：QuickSort</span></span><br><span class="line"><span class="comment"> *作用：快速排序算法</span></span><br><span class="line"><span class="comment"> *参数：</span></span><br><span class="line"><span class="comment"> *返回值：无</span></span><br><span class="line"><span class="comment"> ************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QuickSort</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> low, <span class="type">int</span> high)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = low;</span><br><span class="line">        <span class="type">int</span> j = high;</span><br><span class="line">        <span class="type">int</span> k = arr[low];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 此时的K就是这次快速排序的基准值</span></span><br><span class="line">            <span class="comment">// 通过不断地左右探测，找到大于k的放在右边，小于k的放在左边。</span></span><br><span class="line">            <span class="comment">// 每次只找到第一个大于或者小于k的数，然后直接交换，再去寻找另一边的元素</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= k) <span class="comment">// 从右向左找第一个小于k的数</span></span><br><span class="line">            &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &lt; j)<span class="comment">// 确保上面的循环是因为arr[i] &lt; k而退出的也就是找到了第一个小于k的数</span></span><br><span class="line">            &#123;</span><br><span class="line">                arr[i++] = arr[j];<span class="comment">//然后把这个数放入到arr[i]中</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt; k) <span class="comment">// 从左向右找第一个大于等于k的数</span></span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[j--] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">// 当i == j时就是k应该放的位置。</span></span><br><span class="line">        <span class="comment">// 此时左边全部都是小于k的元素，因为所有大于k的元素都被交换到当时k所在的位置了，所有大于k的元素都被放到右侧了</span></span><br><span class="line"></span><br><span class="line">        arr[i] = k;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归调用</span></span><br><span class="line">        QuickSort(arr, low, i );  <span class="comment">// 排序k左边。排序当前数组的最低位到i位</span></span><br><span class="line">        QuickSort(arr, i + <span class="number">1</span>, high); <span class="comment">// 排序k右边，排序当前数组i之后的所有元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">array</span>[BUF_SIZE] = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4564</span>,<span class="number">2345</span>,<span class="number">11</span>,<span class="number">23</span>,<span class="number">3423</span>,<span class="number">4352</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> maxlen = BUF_SIZE;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前的数组\n&quot;</span>);</span><br><span class="line">    display(<span class="built_in">array</span>, maxlen);</span><br><span class="line"></span><br><span class="line">    QuickSort(<span class="built_in">array</span>, <span class="number">0</span>, maxlen - <span class="number">1</span>); <span class="comment">// 快速排序</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的数组\n&quot;</span>);</span><br><span class="line">    display(<span class="built_in">array</span>, maxlen);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="桶式排序"><a href="#桶式排序" class="headerlink" title="桶式排序"></a>桶式排序</h3><p>桶排的原理就是归类！基数排序也是类似的原理。直接将元素放入到以该元素的数值为下标的数组单元中，不过实际操作时数组单元记录的是相同大小元素的个数！而在打印的时候只需要将<strong>数组下标</strong>打印<strong>数组元素值</strong>次就好了。</p><h4 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 桶排序</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] bucketSort(<span class="type">int</span>[] A, <span class="type">int</span> max) &#123;</span><br><span class="line">        <span class="type">int</span>[] B = <span class="keyword">new</span> <span class="title class_">int</span>[max + <span class="number">1</span>];<span class="comment">// 0-max 总共max+1个数</span></span><br><span class="line">        <span class="type">int</span>[] reArray = <span class="keyword">new</span> <span class="title class_">int</span>[A.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            B[A[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; B.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= B[i]; j++) &#123;</span><br><span class="line">                <span class="comment">// i 是被排序的数的大小 B[i] 是大小为i的被排序数的个数</span></span><br><span class="line">                reArray[k] = i;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reArray;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="C语言实现："><a href="#C语言实现：" class="headerlink" title="C语言实现："></a>C语言实现：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bucketSort</span><span class="params">(<span class="type">int</span> A[],<span class="type">int</span> length,<span class="type">int</span> max)</span>&#123;</span><br><span class="line">    <span class="type">int</span> B[max+<span class="number">1</span>];<span class="comment">// 根据A中元素的最大值来确定B的元素个数</span></span><br><span class="line">    <span class="built_in">memset</span>(B,<span class="number">0</span>,(max+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">int</span>));<span class="comment">//使用memset时记得引用string.h头文件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; length;i++)&#123;</span><br><span class="line">        B[A[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; max+<span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= B[i]; j++) &#123;</span><br><span class="line">            <span class="comment">// i 是被排序的数的大小 B[i] 是大小为i的被排序数的个数</span></span><br><span class="line">            A[k] = i;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h3><h3 id="排序分析"><a href="#排序分析" class="headerlink" title="排序分析"></a>排序分析</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191125222652.png"/><h2 id="图论算法"><a href="#图论算法" class="headerlink" title="图论算法"></a>图论算法</h2><p>图由顶点和边组成，一个图中也包含很多条边和很多个顶点。</p><p>根据边是否有向，可以将图分为<strong>有向图</strong>与<strong>无向图</strong>。</p><h3 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191125165904.png"/><p>图有两种表示形式：<strong>邻接数组</strong>和<strong>邻接表</strong>。</p><h4 id="前者是用二维数组来实现图："><a href="#前者是用二维数组来实现图：" class="headerlink" title="前者是用二维数组来实现图："></a>前者是用<strong>二维数组</strong>来实现图：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Graph[Vertex1][Vertex2] = weight</span><br></pre></td></tr></table></figure><p>其中数组的两个下标为这条边的两个顶点，其中存储的值为这条边的权重</p><h4 id="后者是用链表的方式来实现图："><a href="#后者是用链表的方式来实现图：" class="headerlink" title="后者是用链表的方式来实现图："></a>后者是用<strong>链表</strong>的方式来实现图：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 5</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">ENode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> index;                 <span class="comment">// 该边的顶点的位置</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">ENode</span> *<span class="title">nextEdge</span>;</span> <span class="comment">// 指向下一条弧的指针</span></span><br><span class="line">&#125; ENode, *PENode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表中表的顶点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">VNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> index;          <span class="comment">// 顶点信息</span></span><br><span class="line">    ENode *firstEdge; <span class="comment">// 指向第一条依附该顶点的弧</span></span><br><span class="line">&#125; VNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LGraph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> vexNum; <span class="comment">// 图的顶点的数目</span></span><br><span class="line">    <span class="type">int</span> edgNum; <span class="comment">// 图的边的数目</span></span><br><span class="line">    VNode vexs[MAX];</span><br><span class="line">&#125; LGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 边的数据</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> start; <span class="comment">// 起始顶点</span></span><br><span class="line">    <span class="type">int</span> end;   <span class="comment">// 结束顶点</span></span><br><span class="line">&#125; EData;</span><br><span class="line"><span class="type">static</span> EData gData[] = &#123;<span class="comment">//硬编码的图的数据</span></span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>, <span class="number">5</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LinkToTheEnd</span><span class="params">(ENode *<span class="built_in">list</span>, ENode *node)</span>&#123;</span><br><span class="line">    ENode *p = <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;nextEdge)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;nextEdge;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;nextEdge = node;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一张图</span></span><br><span class="line">LGraph *<span class="title function_">createLinkedGraph</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ENode *node;</span><br><span class="line">    LGraph *pG;</span><br><span class="line">    <span class="type">int</span> start,end;</span><br><span class="line">    <span class="keyword">if</span> ((pG = (LGraph *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LGraph))) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">memset</span>(pG, <span class="number">0</span>, <span class="keyword">sizeof</span>(LGraph));</span><br><span class="line">    pG-&gt;vexNum = MAX;</span><br><span class="line">    pG-&gt;edgNum = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pG-&gt;vexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pG-&gt;vexs[i].index = i;</span><br><span class="line">        pG-&gt;vexs[i].firstEdge = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化&quot;邻接表&quot;的边</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pG-&gt;edgNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 读取边的起始顶点,结束顶点</span></span><br><span class="line">        start = gData[i].start;</span><br><span class="line">        end = gData[i].end;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化node1</span></span><br><span class="line">        node = (ENode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ENode));</span><br><span class="line">        <span class="built_in">memset</span>(node,<span class="number">0</span>,<span class="keyword">sizeof</span>(ENode));</span><br><span class="line">        node-&gt;index = end;</span><br><span class="line">        <span class="comment">// 将node1链接到&quot;p1所在链表的末尾&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (pG-&gt;vexs[start].firstEdge == <span class="literal">NULL</span>)</span><br><span class="line">            pG-&gt;vexs[start].firstEdge = node;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            LinkToTheEnd(pG-&gt;vexs[start].firstEdge, node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pG;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    LGraph *g;</span><br><span class="line">    g = createLinkedGraph();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p>拓扑排序的核心还是图的构建以及入度数组的维护。</p><p>只要每次都找出入度为0的顶点，然后将其输出，再更新入度数组就可以找出图的拓扑排序方式了！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 5</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">ENode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> index;                 <span class="comment">// 该边的顶点的位置</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">ENode</span> *<span class="title">nextEdge</span>;</span> <span class="comment">// 指向下一条弧的指针</span></span><br><span class="line">&#125; ENode, *PENode;<span class="comment">// _ENode 的变量别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表中表的顶点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">VNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> index;          <span class="comment">// 顶点信息</span></span><br><span class="line">    ENode *firstEdge; <span class="comment">// 指向第一条依附该顶点的弧</span></span><br><span class="line">&#125; VNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LGraph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> vexNum; <span class="comment">// 图的顶点的数目</span></span><br><span class="line">    <span class="type">int</span> edgNum; <span class="comment">// 图的边的数目</span></span><br><span class="line">    VNode vexs[MAX];</span><br><span class="line">&#125; LGraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 边的数据</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">EData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> start; <span class="comment">// 起始顶点</span></span><br><span class="line">    <span class="type">int</span> end;   <span class="comment">// 结束顶点</span></span><br><span class="line">&#125; EData;</span><br><span class="line"><span class="type">static</span> EData gData[] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>, <span class="number">4</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>, <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LinkToTheEnd</span><span class="params">(ENode *<span class="built_in">list</span>, ENode *node)</span>&#123;</span><br><span class="line">    ENode *p = <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;nextEdge)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;nextEdge;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;nextEdge = node;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一张图</span></span><br><span class="line">LGraph *<span class="title function_">createLinkedGraph</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ENode *node;</span><br><span class="line">    LGraph *pG;</span><br><span class="line">    <span class="type">int</span> start,end;</span><br><span class="line">    <span class="keyword">if</span> ((pG = (LGraph *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LGraph))) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">memset</span>(pG, <span class="number">0</span>, <span class="keyword">sizeof</span>(LGraph));</span><br><span class="line">    pG-&gt;vexNum = MAX;</span><br><span class="line">    pG-&gt;edgNum = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pG-&gt;vexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pG-&gt;vexs[i].index = i;</span><br><span class="line">        pG-&gt;vexs[i].firstEdge = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始化&quot;邻接表&quot;的边</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pG-&gt;edgNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 读取边的起始顶点,结束顶点</span></span><br><span class="line">        start = gData[i].start;</span><br><span class="line">        end = gData[i].end;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化node1</span></span><br><span class="line">        node = (ENode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ENode));</span><br><span class="line">        <span class="built_in">memset</span>(node,<span class="number">0</span>,<span class="keyword">sizeof</span>(ENode));</span><br><span class="line">        node-&gt;index = end;</span><br><span class="line">        <span class="comment">// 将node1链接到&quot;p1所在链表的末尾&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (pG-&gt;vexs[start].firstEdge == <span class="literal">NULL</span>)</span><br><span class="line">            pG-&gt;vexs[start].firstEdge = node;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            LinkToTheEnd(pG-&gt;vexs[start].firstEdge, node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pG;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取图的出度数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">createInDegree</span><span class="params">(LGraph *g,<span class="type">int</span> InDegree[])</span>&#123;</span><br><span class="line">    ENode *p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;vexNum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = g-&gt;vexs[i].firstEdge;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (p)</span><br><span class="line">        &#123;</span><br><span class="line">            InDegree[p-&gt;index]++;</span><br><span class="line">            p = p-&gt;nextEdge;   </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新维护入度数组</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * g    图指针</span></span><br><span class="line"><span class="comment"> * InDegree 入度数组</span></span><br><span class="line"><span class="comment"> * node 需要改变的节点指针</span></span><br><span class="line"><span class="comment"> * 删除节点后把它在入度数组中置为-1</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">updateInDegree</span><span class="params">(LGraph *g,<span class="type">int</span> InDegree[],<span class="type">int</span> index)</span>&#123;</span><br><span class="line">    InDegree[index] = <span class="number">-1</span>;</span><br><span class="line">    ENode *p;</span><br><span class="line">    p = g-&gt;vexs[index].firstEdge;</span><br><span class="line">    <span class="keyword">while</span> (p)</span><br><span class="line">    &#123;</span><br><span class="line">        InDegree[p-&gt;index]--;</span><br><span class="line">        p = p-&gt;nextEdge;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TopologicalSort 拓扑排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TopologicalSort</span><span class="params">(LGraph *g)</span>&#123;</span><br><span class="line">    ENode *node;</span><br><span class="line">    <span class="type">int</span> InDegree[g-&gt;vexNum];</span><br><span class="line">    <span class="built_in">memset</span>(InDegree,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>)*g-&gt;vexNum);</span><br><span class="line">    createInDegree(g,InDegree);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g-&gt;vexNum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (InDegree[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                j = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,j);</span><br><span class="line">        updateInDegree(g,InDegree,j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    LGraph *g;</span><br><span class="line">    g = createLinkedGraph();</span><br><span class="line">    TopologicalSort(g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><h4 id="图的搜索方法"><a href="#图的搜索方法" class="headerlink" title="图的搜索方法"></a>图的搜索方法</h4><ul><li><p>宽度优先BFS（breath-first-search）–队列实现</p><p>逐层遍历</p><p>访问节点v，再依次访问和v邻接的节点（或v的下一层节点）</p></li><li><p>深度优先DFS（depth-first-search）–堆栈实现：递归</p><p>先序遍历</p><p>访问节点v，对v的邻接节点递归DFS</p></li></ul><h4 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h4><p>求两个顶点间的最短路径，是一种贪婪算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dijkstra</span> &#123;</span><br><span class="line">    <span class="comment">//定义顶点Vertex类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Vertex</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">infinite_dis</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">private</span> String name;   <span class="comment">//节点名字</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> known;  <span class="comment">//此节点是否已知  </span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> adjuDist;   <span class="comment">//此节点距离  </span></span><br><span class="line">        <span class="keyword">private</span> Vertex parent;   <span class="comment">//当前从初始化节点到此节点的最短路径下的父亲节点</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Vertex</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.known = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.adjuDist = infinite_dis;</span><br><span class="line">            <span class="built_in">this</span>.parent = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Vertex</span><span class="params">(String name)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>();</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Vertex <span class="title function_">getParent</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParent</span><span class="params">(Vertex parent)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.getName() == ((Vertex)obj).getName()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.name == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;name of Vertex to be compared cannot be null!&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">        <span class="comment">//此有向边的起始点</span></span><br><span class="line">        <span class="keyword">private</span> Vertex startVertex;</span><br><span class="line">        <span class="comment">//此有向边的终点</span></span><br><span class="line">        <span class="keyword">private</span> Vertex endVertex;</span><br><span class="line">        <span class="comment">//此有向边的权值</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> weight;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(Vertex startVertex,Vertex endVertex,<span class="type">int</span> weight)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.startVertex = startVertex;</span><br><span class="line">            <span class="built_in">this</span>.endVertex = endVertex;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Vertex&gt; vertexList; <span class="comment">//图的顶点集</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Vertex,List&lt;Edge&gt; &gt; ver_edgeList_map;  <span class="comment">//图的每个顶点对应的有向边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dijkstra</span><span class="params">(List&lt;Vertex&gt; vertexList, Map&lt;Vertex, List&lt;Edge&gt;&gt; ver_edgeList_map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vertexList = vertexList;</span><br><span class="line">        <span class="built_in">this</span>.ver_edgeList_map = ver_edgeList_map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(Vertex v)</span>&#123;</span><br><span class="line">        v.setParent(<span class="literal">null</span>);</span><br><span class="line">        v.setAdjuDist(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateChildren</span><span class="params">(Vertex v)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (v==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ver_edgeList_map.get(v)==<span class="literal">null</span> || ver_edgeList_map.get(v).size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Vertex&gt; childrenList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Vertex&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Edge e:ver_edgeList_map.get(v))&#123;</span><br><span class="line">            <span class="type">Vertex</span> <span class="variable">childVertex</span> <span class="operator">=</span> e.getEndVertex();</span><br><span class="line">            <span class="keyword">if</span> (!childVertex.isKnown())&#123;</span><br><span class="line">                childVertex.setKnown(<span class="literal">true</span>);</span><br><span class="line">                childVertex.setAdjuDist(v.getAdjuDist()+e.getWeight());</span><br><span class="line">                childVertex.setParent(v);</span><br><span class="line">                childrenList.add(childVertex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nowDist</span> <span class="operator">=</span> v.getAdjuDist() + e.getWeight();</span><br><span class="line">            <span class="keyword">if</span> (nowDist &gt;= childVertex.getAdjuDist())&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                childVertex.setAdjuDist(nowDist);</span><br><span class="line">                childVertex.setParent(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Vertex vc:childrenList)&#123;</span><br><span class="line">            updateChildren(vc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dijkstraTravasal</span><span class="params">(<span class="type">int</span> startIndex,<span class="type">int</span> destIndex)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Vertex</span> <span class="variable">start</span> <span class="operator">=</span> vertexList.get(startIndex);</span><br><span class="line">            <span class="type">Vertex</span> <span class="variable">dest</span>  <span class="operator">=</span> vertexList.get(destIndex);</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;[&quot;</span> + dest.getName() + <span class="string">&quot;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">            setRoot(start);</span><br><span class="line"></span><br><span class="line">            updateChildren(vertexList.get(startIndex));</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">shortest_length</span> <span class="operator">=</span> dest.getAdjuDist();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((dest.getParent()!=<span class="literal">null</span>)&amp;&amp;(!dest.equals(start)))&#123;</span><br><span class="line">                path = <span class="string">&quot;[&quot;</span> + dest.getParent().getName() +<span class="string">&quot;] --&gt; &quot;</span>+path;</span><br><span class="line">                dest = dest.getParent();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span>+vertexList.get(startIndex).getName()+<span class="string">&quot;] to [&quot;</span>+</span><br><span class="line">                vertexList.get(destIndex).getName()+<span class="string">&quot;] dijkstra shortest path:: &quot;</span>+path);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;shortest length::&quot;</span> + shortest_length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Vertex v1= <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;v1&quot;</span>);</span><br><span class="line">        Vertex v2= <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;v2&quot;</span>);</span><br><span class="line">        Vertex v3= <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;v3&quot;</span>);</span><br><span class="line">        Vertex v4= <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;v4&quot;</span>);</span><br><span class="line">        Vertex v5= <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;v5&quot;</span>);</span><br><span class="line">        Vertex v6= <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;v6&quot;</span>);</span><br><span class="line">        Vertex v7= <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;v7&quot;</span>);</span><br><span class="line">        List&lt;Vertex&gt; verList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Dijkstra.Vertex&gt;();</span><br><span class="line">        verList.add(v1);</span><br><span class="line">        verList.add(v2);</span><br><span class="line">        verList.add(v3);</span><br><span class="line">        verList.add(v4);</span><br><span class="line">        verList.add(v5);</span><br><span class="line">        verList.add(v6);</span><br><span class="line">        verList.add(v7);</span><br><span class="line"></span><br><span class="line">        Map&lt;Vertex, List&lt;Edge&gt;&gt; vertex_edgeList_map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Vertex, List&lt;Edge&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;Edge&gt; v1List = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Dijkstra.Edge&gt;();</span><br><span class="line">        v1List.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(v1,v2,<span class="number">2</span>));</span><br><span class="line">        v1List.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(v1,v4,<span class="number">1</span>));</span><br><span class="line">        List&lt;Edge&gt; v2List = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Dijkstra.Edge&gt;();</span><br><span class="line">        v2List.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(v2,v4,<span class="number">3</span>));</span><br><span class="line">        v2List.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(v2,v5,<span class="number">10</span>));</span><br><span class="line">        List&lt;Edge&gt; v3List = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Dijkstra.Edge&gt;();</span><br><span class="line">        v3List.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(v3,v1,<span class="number">4</span>));</span><br><span class="line">        v3List.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(v3,v6,<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;Edge&gt; v4List = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Dijkstra.Edge&gt;();</span><br><span class="line">        v4List.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(v4,v3,<span class="number">2</span>));</span><br><span class="line">        v4List.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(v4,v5,<span class="number">2</span>));</span><br><span class="line">        v4List.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(v4,v6,<span class="number">8</span>));</span><br><span class="line">        v4List.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(v4,v7,<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;Edge&gt; v5List = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Dijkstra.Edge&gt;();</span><br><span class="line">        v5List.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(v5,v7,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;Edge&gt; v6List = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Dijkstra.Edge&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;Edge&gt; v7List = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Dijkstra.Edge&gt;();</span><br><span class="line">        v7List.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(v7,v6,<span class="number">1</span>));</span><br><span class="line">        vertex_edgeList_map.put(v1, v1List);</span><br><span class="line">        vertex_edgeList_map.put(v2, v2List);</span><br><span class="line">        vertex_edgeList_map.put(v3, v3List);</span><br><span class="line">        vertex_edgeList_map.put(v4, v4List);</span><br><span class="line">        vertex_edgeList_map.put(v5, v5List);</span><br><span class="line">        vertex_edgeList_map.put(v6, v6List);</span><br><span class="line">        vertex_edgeList_map.put(v7, v7List);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Dijkstra</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dijkstra</span>(verList, vertex_edgeList_map);</span><br><span class="line">        g.dijkstraTravasal(<span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>C语言实现Dijkstra算法：<a href="https://git.tanknee.cn/snippets/4">Dijkstra</a></p><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><h4 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h4><p>求图的最小生成树</p><p>Prim算法选取新的一条边的原则是其中一个节点必须在已经选取的节点集合中，而另一个节点必须是为选取的节点。最终选定的边还必须要是全部满足条件的未选取边的权值最小值。也就是说prim算法选取的边必须是连续的，不可能是独立的一条边，因为其中的一个顶点必定是已知的。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/201911274d163f08d9227.png"/><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Prims</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ENode</span> &#123;</span><br><span class="line">        <span class="type">int</span> ivex;       <span class="comment">// 该边所指向的顶点的位置</span></span><br><span class="line">        <span class="type">int</span> weight;     <span class="comment">// 该边的权</span></span><br><span class="line">        ENode nextEdge; <span class="comment">// 指向下一条弧的指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">VNode</span> &#123;</span><br><span class="line">        <span class="type">char</span> data;          </span><br><span class="line">        ENode firstEdge;    </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">private</span> VNode[] mVexs;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Prims</span><span class="params">(<span class="type">char</span>[] vexs, EData[] edges)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">vlen</span> <span class="operator">=</span> vexs.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">elen</span> <span class="operator">=</span> edges.length;</span><br><span class="line">        mVexs = <span class="keyword">new</span> <span class="title class_">VNode</span>[vlen];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mVexs.length; i++) &#123;</span><br><span class="line">            mVexs[i] = <span class="keyword">new</span> <span class="title class_">VNode</span>();</span><br><span class="line">            mVexs[i].data = vexs[i];</span><br><span class="line">            mVexs[i].firstEdge = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化&quot;边&quot;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; elen; i++) &#123;</span><br><span class="line">            <span class="comment">// 读取边的起始顶点和结束顶点</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> edges[i].start;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> edges[i].end;</span><br><span class="line">            <span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> edges[i].weight;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取边的起始顶点和结束顶点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> getPosition(c1);</span><br><span class="line">            <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> getPosition(c2);</span><br><span class="line">            <span class="comment">// 初始化node1</span></span><br><span class="line">            <span class="type">ENode</span> <span class="variable">node1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ENode</span>();</span><br><span class="line">            node1.ivex = p2;</span><br><span class="line">            node1.weight = weight;</span><br><span class="line">            <span class="comment">// 将node1链接到&quot;p1所在链表的末尾&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(mVexs[p1].firstEdge == <span class="literal">null</span>)</span><br><span class="line">                mVexs[p1].firstEdge = node1;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                linkLast(mVexs[p1].firstEdge, node1);</span><br><span class="line">            <span class="comment">// 初始化node2</span></span><br><span class="line">            <span class="type">ENode</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ENode</span>();</span><br><span class="line">            node2.ivex = p1;</span><br><span class="line">            node2.weight = weight;</span><br><span class="line">            <span class="comment">// 将node2链接到&quot;p2所在链表的末尾&quot;</span></span><br><span class="line">            <span class="keyword">if</span>(mVexs[p2].firstEdge == <span class="literal">null</span>)</span><br><span class="line">                mVexs[p2].firstEdge = node2;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                linkLast(mVexs[p2].firstEdge, node2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(ENode list, ENode node)</span> &#123;</span><br><span class="line">        <span class="type">ENode</span> <span class="variable">p</span> <span class="operator">=</span> list;</span><br><span class="line">        <span class="keyword">while</span>(p.nextEdge!=<span class="literal">null</span>)</span><br><span class="line">            p = p.nextEdge;</span><br><span class="line">        p.nextEdge = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getPosition</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;mVexs.length; i++)</span><br><span class="line">            <span class="keyword">if</span>(mVexs[i].data==ch)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getWeight</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (start==end)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ENode</span> <span class="variable">node</span> <span class="operator">=</span> mVexs[start].firstEdge;</span><br><span class="line">        <span class="keyword">while</span> (node!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (end==node.ivex)</span><br><span class="line">                <span class="keyword">return</span> node.weight;</span><br><span class="line">            node = node.nextEdge;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prim</span><span class="params">(<span class="type">int</span> start)</span> &#123;</span><br><span class="line">        <span class="type">int</span> min,i,j,k,m,n,tmp,sum;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> mVexs.length;</span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;                   <span class="comment">// prim最小树的索引，即prims数组的索引</span></span><br><span class="line">        <span class="type">char</span>[] prims = <span class="keyword">new</span> <span class="title class_">char</span>[num];  <span class="comment">// prim最小树的结果数组</span></span><br><span class="line">        <span class="type">int</span>[] weights = <span class="keyword">new</span> <span class="title class_">int</span>[num];  <span class="comment">// 顶点间边的权值</span></span><br><span class="line">        prims[index++] = mVexs[start].data;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++ )</span><br><span class="line">            weights[i] = getWeight(start, i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(start == i)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">            min = INF;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; num) &#123;</span><br><span class="line">                <span class="keyword">if</span> (weights[j] != <span class="number">0</span> &amp;&amp; weights[j] &lt; min) &#123;</span><br><span class="line">                    min = weights[j];</span><br><span class="line">                    k = j;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            prims[index++] = mVexs[k].data;</span><br><span class="line">            weights[k] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span> ; j &lt; num; j++) &#123;</span><br><span class="line">                tmp = getWeight(k, j);</span><br><span class="line">                <span class="keyword">if</span> (weights[j] != <span class="number">0</span> &amp;&amp; tmp &lt; weights[j])</span><br><span class="line">                    weights[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">            min = INF;</span><br><span class="line">            n = getPosition(prims[i]);</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                m = getPosition(prims[j]);</span><br><span class="line">                tmp = getWeight(m, n);</span><br><span class="line">                <span class="keyword">if</span> (tmp &lt; min)</span><br><span class="line">                    min = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += min;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.printf(<span class="string">&quot;PRIM(%c)=%d: &quot;</span>, mVexs[start].data, sum);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            System.out.printf(<span class="string">&quot;%c &quot;</span>, prims[i]);</span><br><span class="line">        System.out.printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EData</span> &#123;</span><br><span class="line">        <span class="type">char</span> start; <span class="comment">// 边的起点</span></span><br><span class="line">        <span class="type">char</span> end;   <span class="comment">// 边的终点</span></span><br><span class="line">        <span class="type">int</span> weight; <span class="comment">// 边的权重</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EData</span><span class="params">(<span class="type">char</span> start, <span class="type">char</span> end, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.start = start;</span><br><span class="line">            <span class="built_in">this</span>.end = end;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">char</span>[] vexs = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>&#125;;</span><br><span class="line">       EData[] edges = &#123;</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">EData</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="number">12</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">EData</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="number">16</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">EData</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="number">14</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">EData</span>(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="number">10</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">EData</span>(<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;F&#x27;</span>,  <span class="number">7</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">EData</span>(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>,  <span class="number">3</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">EData</span>(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;E&#x27;</span>,  <span class="number">5</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">EData</span>(<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;F&#x27;</span>,  <span class="number">6</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">EData</span>(<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>,  <span class="number">4</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">EData</span>(<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>,  <span class="number">2</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">EData</span>(<span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;G&#x27;</span>,  <span class="number">8</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">EData</span>(<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>,  <span class="number">9</span>),</span><br><span class="line">       &#125;;</span><br><span class="line">       Prims pG;</span><br><span class="line">       pG = <span class="keyword">new</span> <span class="title class_">Prims</span>(vexs, edges);</span><br><span class="line">       pG.prim(<span class="number">0</span>);   <span class="comment">// prim算法生成最小生成树</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h4><p>这个算法也是一个最小生成树算法。不过它与上面的Prim算法有所不同。</p><p>Prim算法选取新的一条边的原则是其中一个节点必须在已经选取的节点集合中，而另一个节点必须是为选取的节点。最终选定的边还必须要是全部满足条件的未选取边的权值最小值。也就是说prim算法选取的边必须是连续的，不可能是独立的一条边，因为其中的一个顶点必定是已知的。</p><p>Kruskal算法是在所有的边中进行。先排序，找出未加入生成树的最小权值的边，然后判断其是否会与已选取的边构成环，如果不会那么就加入到生成树中。</p><p>很显然这个算法也是一个贪婪算法。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/201911275561670461ec5.png"/><h2 id="算法设计技巧"><a href="#算法设计技巧" class="headerlink" title="算法设计技巧"></a>算法设计技巧</h2><blockquote><p><strong>NP完全问题</strong>：NP也就是<code>Non-deterministic Polynomial</code>的缩写，非确定性多项式。</p><p>多项式时间指的是是时间复杂度为：$O(N)$  ,$O(\log(N))$等</p><p>非多项式时间是指这类算法的时间复杂度已经超过了计算机能够承受的范围了，例如$O(N!)$一类的时间复杂度。</p></blockquote><h3 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h3><p>贪婪算法是将任务分成不同的阶段，在每一个可以快速简单寻找到当前最优解的片段中，取用最优解，然后对每一个片段都重复这个过程，最终得到的就是整个任务的最优解或是次优解。</p><h4 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/20191126e5be5c33290cf.png"/><p>其中的平均完成时间的定义是：完成该任务的时间节点，而不是完成该任务的时间长度！</p><p>所以10-2为：<br>$$<br>(15+23+26+36)/4 = 25<br>$$<br>10-3为:<br>$$<br>(3+11+21+36)/4 = 17.75<br>$$<br>因此可以表明，不是是用事件单调递减的序列的解决方案必然是次优解，只有那些最小运行时间任务最先安排的解决办法才是最优解。</p><h4 id="贪婪算法的应用"><a href="#贪婪算法的应用" class="headerlink" title="贪婪算法的应用"></a>贪婪算法的应用</h4><ul><li>寻找图中的最短路径–<a href="#Dijkstra算法">Dijkstra算法</a></li><li>寻找图的最小生成树–<a href="#Prim算法">Prim算法</a></li><li>还有就是文件压缩–Huffman编码</li></ul><h4 id="Huffman编码"><a href="#Huffman编码" class="headerlink" title="Huffman编码"></a>Huffman编码</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/20191126b29c6c7635916.png"/><p>由此可以得到字符编码的前缀码，不过使用前缀码的前提是每个字符编码都不是其他编码的前缀！因此每个字符都要放在树的叶子节点上。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/20191126059412da1b1d2.png"/><p>这样做就确保了编码没有<strong>二义性</strong>。</p><h5 id="编码的比特数："><a href="#编码的比特数：" class="headerlink" title="编码的比特数："></a>编码的比特数：</h5><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/11/20191128014302433d9c0.png"/><p>其中深度的数值等于其编码的位数！</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/201911260b2c7c30a1bbe.png"/><h5 id="Huffman算法"><a href="#Huffman算法" class="headerlink" title="Huffman算法"></a>Huffman算法</h5><p>算法对一个由树组成的森林进行，该森林中一共有C片叶子，也就是有C个字符需要编码。<strong>一棵树的权重等于它的树叶的频率之和</strong>。任取最小权重的两棵树$T_1$,$T_2$,并以这两棵树为子树形成新的树，将这样的过程进行<code>C-1</code>次，最终得到的就是Huffman编码的最优树。</p><blockquote><p>为什么需要进行<code>C-1</code>次：</p><p>​    因为森林中最开始有<code>C</code>棵树，也就是一共有<code>C</code>棵只有一个节点的树，每一次选取都会让两棵树合并成一棵树，树的总数减少一，因此从<code>C</code>到<code>1</code>也就需要进行<code>C-1</code>次</p></blockquote><h5 id="示例图："><a href="#示例图：" class="headerlink" title="示例图："></a>示例图：</h5><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/201911269a7d3ff4605c5.png"/><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/20191126e2dcb161519fb.png"/><p>该算法每一次选取子树都是在当前条件下选取权重最小的子树，因此该算法是贪婪算法。</p><h5 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdfix.h&gt;</span></span></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 哈夫曼编码树</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HuffmanTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">char</span> con[<span class="number">2</span>];                       <span class="comment">// 节点的内容</span></span><br><span class="line">    <span class="type">int</span> f;                          <span class="comment">//节点的频率</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HuffmanTree</span> *<span class="title">leftChild</span>;</span>  <span class="comment">//左儿子</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">HuffmanTree</span> *<span class="title">rightChild</span>;</span> <span class="comment">//右儿子</span></span><br><span class="line">&#125; * Node;</span><br><span class="line"><span class="comment">// 创建一个新的节点</span></span><br><span class="line">Node <span class="title function_">createNode</span><span class="params">(<span class="type">char</span> con[], <span class="type">int</span> f, Node left, Node right)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 先创建一个指针</span></span><br><span class="line">    Node newNode;</span><br><span class="line">    <span class="keyword">if</span> ((newNode = (Node)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node))) == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(newNode, <span class="number">0</span>, <span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="comment">// strcpy(newNode-&gt;con,con);</span></span><br><span class="line">    <span class="keyword">if</span> (con)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(newNode-&gt;con,con,<span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(newNode-&gt;con,<span class="number">0</span>,<span class="number">2</span>*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// newNode-&gt;con = con;</span></span><br><span class="line">    newNode-&gt;f = f;</span><br><span class="line">    newNode-&gt;leftChild = left;</span><br><span class="line">    newNode-&gt;rightChild = right;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * tree 树的数组</span></span><br><span class="line"><span class="comment"> * legth 数组的长度</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">Node <span class="title function_">huffman</span><span class="params">(Node tree[], <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    Node tempNode, node1, node2,parent;</span><br><span class="line">    <span class="comment">//如果这个数组里面只剩下了两个元素，那么就说明已经排序完成了</span></span><br><span class="line">    <span class="keyword">if</span> (length == <span class="number">2</span>)</span><br><span class="line">    &#123;   </span><br><span class="line">        node1 = tree[<span class="number">0</span>];</span><br><span class="line">        node2 = tree[<span class="number">1</span>];</span><br><span class="line">        parent = createNode(<span class="literal">NULL</span>,node1-&gt;f+node2-&gt;f,node1,node2);</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 给这个节点数组排序，找出频率最小的两个点</span></span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tempNode = tree[i];</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; tempNode-&gt;f &lt; tree[j - <span class="number">1</span>]-&gt;f; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            tree[j] = tree[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        tree[j] = tempNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 频率最小的两个节点</span></span><br><span class="line">    node1 = tree[<span class="number">0</span>];</span><br><span class="line">    node2 = tree[<span class="number">1</span>];</span><br><span class="line">    parent = createNode(<span class="literal">NULL</span>,node1-&gt;f+node2-&gt;f,node1,node2);</span><br><span class="line">    <span class="comment">// 重新构建一个数组</span></span><br><span class="line">    Node newArray[length<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        newArray[i] = tree[i+<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    newArray[length<span class="number">-2</span>] = parent;</span><br><span class="line">    parent = huffman(newArray,length<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    Node node_a, node_e, node_i, node_s, <span class="type">node_t</span>, node_sp, node_nl,result;</span><br><span class="line">    node_a = createNode(<span class="string">&quot;a&quot;</span>, <span class="number">10</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    node_e = createNode(<span class="string">&quot;e&quot;</span>, <span class="number">15</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    node_i = createNode(<span class="string">&quot;i&quot;</span>, <span class="number">12</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    node_s = createNode(<span class="string">&quot;s&quot;</span>, <span class="number">3</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">node_t</span> = createNode(<span class="string">&quot;t&quot;</span>, <span class="number">4</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    node_sp = createNode(<span class="string">&quot;sp&quot;</span>, <span class="number">13</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    node_nl = createNode(<span class="string">&quot;nl&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    Node nodeArray[] = &#123;node_a, node_e, node_i, node_s, <span class="type">node_t</span>, node_sp, node_nl&#125;;</span><br><span class="line">    result = huffman(nodeArray, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h3><ul><li>分(Divide):递归解决较小的问题，基本情况直接返回就好</li><li>治(Conquer):从子问题中重构原问题的解</li></ul><h5 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h5><ul><li><p><a href="#求解算法时间复杂度的步骤">求解最大子序列的和</a></p></li><li><p><a href="#归并排序">归并排序</a></p></li><li><p><a href="#快速排序">快速排序</a></p></li><li><p>幂运算的快速求解</p></li><li><p>斐波那契数列的递归求和–性能较差</p><ul><li><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/2019112616dcd7130a2d6.png"/></li></ul></li></ul><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><h4 id="动态规划的核心思想是"><a href="#动态规划的核心思想是" class="headerlink" title="动态规划的核心思想是"></a>动态规划的核心思想是</h4><p>将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。</p><h4 id="斐波那契数列动态规划"><a href="#斐波那契数列动态规划" class="headerlink" title="斐波那契数列动态规划"></a>斐波那契数列动态规划</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> f1,f2;</span><br><span class="line">    f1 = f2 = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> f1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        result = f1 + f2;</span><br><span class="line">        f1 = f2;</span><br><span class="line">        f2 = result; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    fib(<span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最短编辑距离"><a href="#最短编辑距离" class="headerlink" title="最短编辑距离"></a>最短编辑距离</h4><p><a href="https://www.cnblogs.com/hapjin/p/7467035.html"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/20191126885babad4dcc4.png"/></a></p><p>在有的文章中，替换的代价是2，而在有的文章中，替换的代价是1，本文按照代价为1的来计算。不过个人认为代价为二更加合理。</p><h5 id="动态规划表的初始化"><a href="#动态规划表的初始化" class="headerlink" title="动态规划表的初始化"></a>动态规划表的初始化</h5><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/20191126cff68df72c86c.png"/><ul><li>D(0,j)=j，空串和长度为j的Y子串间的最小编辑距离（添加或删除对应的次数）</li><li>D(i,0)=i，长度为i的X子串和空串间的最小编辑距离添加或删除对应的次数）</li></ul><p>而最终的表的结果是：</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/2019/11/201911260e9bdb95d8b6f.png"/><p>在三个中取最小值作为矩阵的元素！也就是为了找出变成另一个字符串的最小代价</p><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><table><thead><tr><th align="center"></th><th align="center">·</th><th align="center">s</th><th align="center">n</th><th align="center">o</th><th align="center">w</th><th align="center">y</th></tr></thead><tbody><tr><td align="center"><strong>·</strong></td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td></tr><tr><td align="center"><strong>s</strong></td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td></tr><tr><td align="center"><strong>u</strong></td><td align="center">2</td><td align="center">1</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td></tr><tr><td align="center"><strong>n</strong></td><td align="center">3</td><td align="center">2</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td></tr><tr><td align="center"><strong>n</strong></td><td align="center">4</td><td align="center">3</td><td align="center">2</td><td align="center">2</td><td align="center">3</td><td align="center">4</td></tr><tr><td align="center"><strong>y</strong></td><td align="center">5</td><td align="center">4</td><td align="center">3</td><td align="center">3</td><td align="center">3</td><td align="center">3</td></tr></tbody></table><p>所以最终的结论是<code>sunny</code>到<code>snowy</code>的最小编辑距离为<code>3</code> 。</p><table><thead><tr><th></th><th>·</th><th>a</th><th>m</th><th>e</th></tr></thead><tbody><tr><td>·</td><td>0</td><td>1</td><td>2</td><td>3</td></tr><tr><td>m</td><td>1</td><td>1</td><td>1</td><td>2</td></tr><tr><td>e</td><td>2</td><td>2</td><td>2</td><td>1</td></tr></tbody></table><p>所以最终的结论是<code>me</code>到<code>ame</code>的最小编辑距离为<code>1</code> 。</p><h5 id="下面是源码"><a href="#下面是源码" class="headerlink" title="下面是源码"></a>下面是源码</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(a, b) (a &lt; b ? a : b)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 10</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * res 字符1--原始字符串</span></span><br><span class="line"><span class="comment"> * des 字符2--目标字符串</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">minEditDistance</span><span class="params">(<span class="type">char</span> *res, <span class="type">char</span> *des)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//首先初始化动态表--填充相对于空字符的编辑距离，也就是字符长度</span></span><br><span class="line">    <span class="type">int</span> dis[MAX][MAX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= (<span class="type">int</span>)<span class="built_in">strlen</span>(des); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[<span class="number">0</span>][i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= (<span class="type">int</span>)<span class="built_in">strlen</span>(res); j++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[j][<span class="number">0</span>] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环遍历整个数组，计算每一个编辑距离</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= (<span class="type">int</span>)<span class="built_in">strlen</span>(res); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= (<span class="type">int</span>)<span class="built_in">strlen</span>(des); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果在该位置的两个元素相同，那么到此的最小编辑距离就等同于不包含这两个元素的最小编辑距离</span></span><br><span class="line">            <span class="keyword">if</span> (res[i<span class="number">-1</span>] == des[j<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[i][j] = dis[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 相对而言的！向下走的意思就是多出了一个多余元素，在相对于上面那一格的最小编辑距离而言需要将这个多出来的元素删掉</span></span><br><span class="line"><span class="comment">                 * 同理，向右走就是目标串多了一个元素，要在左侧编辑的基础下再多加一个元素</span></span><br><span class="line"><span class="comment">                 * 向右下角走也是差不多的道理，既有一个多余元素，而且目标串也多了一个元素，所以要使用替换操作。</span></span><br><span class="line"><span class="comment">                 * */</span></span><br><span class="line">                <span class="type">int</span> delEd = dis[i][j<span class="number">-1</span>]+<span class="number">1</span>;<span class="comment">//往下走就是删除 </span></span><br><span class="line">                <span class="type">int</span> insEd = dis[i<span class="number">-1</span>][j]+<span class="number">1</span>;<span class="comment">//往右走是插入</span></span><br><span class="line">                <span class="type">int</span> subEd = dis[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;<span class="comment">//向右下角走--对角线走就是替换 在这里替换的代价是1</span></span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> minEd = min(min(delEd,insEd),subEd);</span><br><span class="line">                dis[i][j] = minEd;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> m = <span class="number">0</span>; m &lt; MAX; m++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n = <span class="number">0</span>; n &lt; MAX; n++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dis[m][n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[(<span class="type">int</span>)<span class="built_in">strlen</span>(res)][(<span class="type">int</span>)<span class="built_in">strlen</span>(des)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Min Distance of %s to %s is %d \n&quot;</span>,<span class="string">&quot;sunny&quot;</span>,<span class="string">&quot;snowy&quot;</span>,minEditDistance(<span class="string">&quot;sunny&quot;</span>,<span class="string">&quot;snowy&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Min Distance of %s to %s is %d&quot;</span>,<span class="string">&quot;me&quot;</span>,<span class="string">&quot;ame&quot;</span>,minEditDistance(<span class="string">&quot;me&quot;</span>,<span class="string">&quot;ame&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作 </tag>
            
            <tag> 地址 </tag>
            
            <tag> 类型 </tag>
            
            <tag> length </tag>
            
            <tag> 列表 </tag>
            
            <tag> node </tag>
            
            <tag> 字符 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 节点 </tag>
            
            <tag> int </tag>
            
            <tag> temp </tag>
            
            <tag> 变量 </tag>
            
            <tag> 查找 </tag>
            
            <tag> arr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hust 面向对象大作业</title>
      <link href="/2019/11/16/Hust-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%A4%A7%E4%BD%9C%E4%B8%9A/"/>
      <url>/2019/11/16/Hust-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%A4%A7%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/个人助理类UML类图.jpg" alt="类图"/><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/个人助理软件UML用例图.jpg"alt="用例图"/><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191210daea521a8ea44.png" style="width: 25px;height:25px;"/><h3 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h3><ol><li><p>打开个人助理软件</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191116200455.png"/></li><li><p>点击右下角的ADD按钮，进入新建任务窗口</p></li><li><p>弹出创建任务的窗口<img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191116200619.png"/></p></li><li><p>选择任务类型</p></li><li><p>填写任务内容<img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191116200725.png"/></p></li><li><p>点击确认按钮，完成任务添加</p></li><li><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191116200757.png"/></li></ol><p>[scode type=”share”]任务仓库地址：<a href="https://git.tanknee.cn/tanknee/PersonalAgency">Java</a><br>[/scode]</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> type </tag>
            
            <tag> 地址 </tag>
            
            <tag> 创建 </tag>
            
            <tag> scode </tag>
            
            <tag> Java </tag>
            
            <tag> 类型 </tag>
            
            <tag> 任务 </tag>
            
            <tag> 新建 </tag>
            
            <tag> 按钮 </tag>
            
            <tag> 窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编-2 宏汇编语言</title>
      <link href="/2019/11/16/assembly_2/"/>
      <url>/2019/11/16/assembly_2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="宏汇编语言"><a href="#宏汇编语言" class="headerlink" title="宏汇编语言"></a>宏汇编语言</h2><h3 id="常量与数值表达式"><a href="#常量与数值表达式" class="headerlink" title="常量与数值表达式"></a>常量与数值表达式</h3><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>使用<code>EQU</code>或者<code>=</code>定义常量</p><p>确定的数值，主要用于在伪代码中给标量赋初值，或者用作立即寻址中的立即数，还有位移量，比例因子等等作用</p><h4 id="数值表达式"><a href="#数值表达式" class="headerlink" title="数值表达式"></a>数值表达式</h4><p>数值表达式的最终结果实际上是与常量一样的，因为数值表达式在汇编的过程中就被计算完成了，被替换成了常量</p><ul><li>算术操作<ul><li>加减乘除</li><li>取余，取模</li><li>左移右移</li></ul></li><li>逻辑操作<ul><li>逻辑乘法</li><li>逻辑加法</li><li>按位加法</li><li>非运算</li></ul></li><li>关系操作<ul><li>关系操作后的结果是两个特殊的值<ol><li>True ：<code>0FFFFH</code></li><li>False : <code>0H</code></li></ol></li></ul></li></ul><h3 id="变量，标号与地址表达式"><a href="#变量，标号与地址表达式" class="headerlink" title="变量，标号与地址表达式"></a>变量，标号与地址表达式</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>变量是编程时定义在程序中的数据存储单元的名字</p><p>变量与常量不同，常量相对而言只是立即数的一个替代品，或者本来就是立即数，常量是没有属性的，而变量有三个属性：</p><ol><li>段属性</li><li>偏移地址属性</li><li>类型属性</li></ol><p>变量是通过伪代码来定义的，在定义变量的时候还必须要指明变量的类型属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DB--BYTE,DW--WORD,DD--DOUBLE WORDS,DF--THREE WORDS,DQ--FOUR WORDS,DT--TEN BYTES</span><br></pre></td></tr></table></figure><p>而变量还可以被定义为多种类型</p><ul><li><p>数值表达式</p></li><li><p>ASCII字符串–只有使用DB定义变量类型的时候字符串的长度才可以超过两个字节，因此定义字符串一般都是使用DB类型</p></li><li><p>地址表达式</p></li><li><p>？–表示所定义的变量还无法确定<strong>初值</strong></p></li><li><p>重复的子句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用了 n DUP(表达式);整个语句的作用就是把表达式的内容重复n遍</span><br></pre></td></tr></table></figure></li><li><p>还可以是多种不同类型组成的序列</p></li></ul><h4 id="标号"><a href="#标号" class="headerlink" title="标号"></a>标号</h4><p>标号是机器指令语句存放地址的符号表示，也可以是子程序名。</p><p>标号也有三种属性：</p><ol><li>段属性–标号所在段的段地址–相对于所属段寄存器的偏移地址</li><li>偏移地址–标号所在段的段首址到该标号所代表的存储单元的字节距离</li><li>标号的类型–<code>NEAR</code>类型与<code>FAR</code>类型<ul><li><code>NEAR</code>类型表示该标号只能在定义该标号的段内被使用</li><li><code>FAR</code>无限制</li></ul></li></ol><h5 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Loop:mov al,[si]</span><br><span class="line">subs proc far</span><br><span class="line">subs endp</span><br><span class="line"></span><br><span class="line">sub2 proc;默认没有定义类型的话就是为near类型</span><br><span class="line">sub2 endp</span><br></pre></td></tr></table></figure><h4 id="地址表达式"><a href="#地址表达式" class="headerlink" title="地址表达式"></a>地址表达式</h4><p>地址表达式其实是对地址进行运算，转移等，而不是类似于数值表达式直接变为一个常数</p><p>寻址方式均是地址表达式：</p><ol><li>寄存器寻址</li><li>寄存器间接寻址</li><li>变址寻址</li><li>基址加变址寻址</li><li>立即寻址</li><li>直接寻址</li></ol><p>如果地址表达式中出现了变量和标号，那么是取它们的<strong>偏移地址</strong>来进行运算而<strong>不是用内容</strong>进行运算！</p><h5 id="1-属性定义算符"><a href="#1-属性定义算符" class="headerlink" title="1.属性定义算符"></a>1.属性定义算符</h5><ol><li>类型运算符        <code>PTR</code></li><li>定义类型运算符  <code>THIS</code></li></ol><h5 id="2-属性分离算符"><a href="#2-属性分离算符" class="headerlink" title="2.属性分离算符"></a>2.属性分离算符</h5><ol><li>取段址算符  <code>SEG</code></li><li>取偏移地址算符  <code>OFFSET</code></li><li>取类型算符  <code>TYPE</code>,这个运算符返回的是一个值，即操作数的类型的字节数，如果是标号，那么就返回<code>0FFFFH</code></li></ol><h5 id="3-其他算符"><a href="#3-其他算符" class="headerlink" title="3.其他算符"></a>3.其他算符</h5><ol><li>获取存储单元个数运算符  <code>LENGTH</code></li><li>获取变量所含数据存储空间大小运算符 <code>SIZE</code>=&gt;<code>(LENGTH 变量)*(TYPE 变量)</code></li><li>字符分离运算符 <code>HIGH</code> <code>LOW</code></li></ol><h3 id="常用机器指令语句"><a href="#常用机器指令语句" class="headerlink" title="常用机器指令语句"></a>常用机器指令语句</h3><p><a href="https://doc.tanknee.cn/#/Code/assembly">机器指令大全</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作 </tag>
            
            <tag> 汇编 </tag>
            
            <tag> 地址 </tag>
            
            <tag> 类型 </tag>
            
            <tag> 字符 </tag>
            
            <tag> 变量 </tag>
            
            <tag> mov </tag>
            
            <tag> 偏移 </tag>
            
            <tag> 标号 </tag>
            
            <tag> 算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编-1 寻址方式</title>
      <link href="/2019/11/16/assembly_1/"/>
      <url>/2019/11/16/assembly_1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><blockquote><p>汇编进行数据操作运算时第一步是要找到对应的操作数。</p><blockquote><p>操作数分为源操作数与目的操作数，一般来说改变的是目的操作数，源操作数在操作或者运算之后是不会发生变化的</p></blockquote><p>操作数有多个存放地址：</p><ul><li>寄存器</li><li>主存储器</li><li>I/O设备端口处</li></ul></blockquote><h3 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h3><p>顾名思义，就是直接通过寄存器来寻找操作数，操作数存放在寄存器中而不是主存或者端口中</p><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov ax,bx</span><br></pre></td></tr></table></figure><p>将<code>BX</code>中的内容赋值赋到<code>AX</code>中去，而寻找内容的方式，就是去<code>AX</code>这个CPU自带的通用寄存器<code>EAX</code>中寻找<code>低16位</code>的寄存器<code>AX</code>。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h4><p>操作数的位数决定了操作的类型，例如，16位的寄存器就代表整个操作是字类型，8位代表字节类型</p><blockquote><ol><li><code>32位 - 双字</code></li><li><code>16位 - 字</code></li><li><code>8位 - 字节</code></li></ol></blockquote><p>相对其他的寻址方式，寄存器由于是CPU内部的存储单元，所以响应速度更快。</p><h3 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h3><p>寄存器间接寻址本质上不是去往寄存器里寻找所需要的操作数，而是去<strong>主存储器</strong>中找对应的操作数！在这种方式里，寄存器相对而言只是一个<strong>跳板</strong>的作用,提供偏移地址！</p><h4 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov ax,[bx]</span><br></pre></td></tr></table></figure><h4 id="内在的逻辑与顺序"><a href="#内在的逻辑与顺序" class="headerlink" title="内在的逻辑与顺序"></a>内在的逻辑与顺序</h4><ol><li>读取给定的寄存器的内容</li><li>以该内容为偏移地址<code>EA</code></li><li>选取对应的段首</li><li>组合之后得到物理地址<code>PA</code></li></ol><h4 id="一些默认规定"><a href="#一些默认规定" class="headerlink" title="一些默认规定"></a>一些默认规定</h4><ol><li>除了<code>EBP，BP，ESP</code>三个寄存器默认选取的段寄存器是<code>SS</code>之外，其他的<code>32位/16位寄存器</code>选取的段寄存器都默认位<code>DS</code></li></ol><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>这里的寄存器可以选择任意的32位的寄存器(<code>EDI,ESI,EBP,ESP</code>等等都是可以使用的)</p><p>或者是四个十六位存储器：<code>BX,DI,SI,BP</code>(少了一个<code>SP</code>，多了一个<code>BX</code>)</p><p><strong>但是不可以选择八位的存储器，因为八位存储器只能存储一个字节的内容，而偏移地址至少需要16位两个字节的内容，所以不能使用。</strong></p><h3 id="变址寻址"><a href="#变址寻址" class="headerlink" title="变址寻址"></a>变址寻址</h3><p>变址寻址所搜寻的操作数存放于主存储器中，而事实上，除了寄存器（直接）寻址以为，介绍的全部的寻址方式均是在主存储器中寻找操作数！</p><h4 id="举例：-2"><a href="#举例：-2" class="headerlink" title="举例："></a>举例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式[R*F+V]V[R*F][R*F]+V</span><br></pre></td></tr></table></figure><p>除了带有运算符的两个数外，其他的运算全部都是加法运算，只要全部加起来就好了。</p><p>其中<code>F</code> 为比例因子，<code>R</code>为寄存器， <code>V</code>为偏移量。而整个运算操作的对象是R寄存器中的内容！！</p><p>寄存器中的内容读取并不需要通过<code>段地址：偏移地址</code>的方式，因为寄存器的地址都早已经被读取入计算机，因此相对而言速度更快！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov al,[ebx*2+4]</span><br></pre></td></tr></table></figure><h4 id="内在逻辑与顺序"><a href="#内在逻辑与顺序" class="headerlink" title="内在逻辑与顺序"></a>内在逻辑与顺序</h4><ol><li>读取出<code>ebx</code>中的内容</li><li>运算整个表达式<code>ebx*2+4</code></li><li>以这个表达式为偏移地址，选取对应的段地址生成物理地址</li></ol><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h4><ul><li>当选取的运算的寄存器是EBP或者16位寄存器时，比例因子<code>F</code>只能为1，并且缩略不写</li><li><code>V</code>偏移量不能过长，否则会被截断</li><li>关于偏移量：<ul><li>由于在内存中默认的单元是字而不是字节！因此一般而言需要跳转到下一个单元时需要改变两个字节，而不是一个字节，当有相对应的操作时也应该乘以二！</li></ul></li></ul><h3 id="基址加变址寻址"><a href="#基址加变址寻址" class="headerlink" title="基址加变址寻址"></a>基址加变址寻址</h3><p>相当于上面的变址寻址多了一个基址罢了</p><h4 id="举例：-3"><a href="#举例：-3" class="headerlink" title="举例："></a>举例：</h4><h5 id="格式：V-BR-IR-F-V-IR-F-BR"><a href="#格式：V-BR-IR-F-V-IR-F-BR" class="headerlink" title="格式：V[BR][IR*F]    V[IR*F+BR]"></a>格式：<code>V[BR][IR*F]    V[IR*F+BR]</code></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov al,4[ebx*2+ecx]</span><br></pre></td></tr></table></figure><p>原理：将变址寄存器<code>IR</code>的内容乘以比例因子<code>F</code>，再与基址寄存器<code>BR</code>的内容还有偏移量<code>V</code>相加，得到的结果作为整个的偏移地址。然后<strong>再根据基址寄存器寻找默认的段寄存器</strong>。</p><h4 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h4><p>当使用的基址寄存器为BX或者BP中的一个时，IR只能选择SI或者DI，而且根据变址寻址的规则，当选用16位的寄存器时，比例系数只能为1！</p><h4 id="默认段寄存器的选用："><a href="#默认段寄存器的选用：" class="headerlink" title="默认段寄存器的选用："></a>默认段寄存器的选用：</h4><ul><li><code>BX - DS</code></li><li><code>BP - SS</code></li><li><code>ESP,EBP - SS</code></li><li><code>其他的32位寄存器全部使用DS作为默认的段寄存器</code></li></ul><h3 id="立即寻址"><a href="#立即寻址" class="headerlink" title="立即寻址"></a>立即寻址</h3><p>实际上立即寻址并不用到任何一个主存储器或者寄存器，因为它的操作数已经直接被读入到操作码中，这应该是最快的操作方式？</p><h4 id="举例：-4"><a href="#举例：-4" class="headerlink" title="举例："></a>举例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov word ptr [si],12H</span><br></pre></td></tr></table></figure><p>其中的<code>12H</code>就是立即数，它会直接赋值给以<code>si寄存器</code>的内容为偏移地址的内存块（这里的目的操作数使用的是寄存器间接寻址）</p><h4 id="注意：-3"><a href="#注意：-3" class="headerlink" title="注意："></a>注意：</h4><ul><li>其中有一块代码是<code>word ptr</code>是为了指定操作数的类型为字类型，也就是有两个字节，两块内存单元，即以<code>[SI]</code>为首地址向下寻找一个字单元，然后放入对应的立即数！</li><li>操作的时候会将<code>12H</code>翻译成<code>0012H</code>以适应字类型的操作要求，这里的翻译原因就是前面的<code>word ptr</code>，当使用的是<code>byte ptr</code>时就不会翻译了</li><li>其中当遇到负数时会有翻译成补码的要求，而实际上所有的立即数的操作都是以补码的形式进行的，只不过无符号数和正数的补码与原码相同罢了！</li></ul><h3 id="直接寻址"><a href="#直接寻址" class="headerlink" title="直接寻址"></a>直接寻址</h3><p>这个直接寻址有点类似于上面的寄存器间接寻址，只不过把寄存器的内容换成了立即数，相当于：立即数（间接）寻址。</p><h4 id="举例：-5"><a href="#举例：-5" class="headerlink" title="举例："></a>举例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov ds:[20H],cl</span><br></pre></td></tr></table></figure><p>相当于把立即数当作偏移地址，然后去指定的段寄存器中寻找需要的操作数。这里的操作数是存放于主存储器中！</p><h4 id="注意：-4"><a href="#注意：-4" class="headerlink" title="注意："></a>注意：</h4><p>当使用直接寻址给内存单元赋值/运算的时候需要指定操作类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sub word ptr ds:[1000H],55AAH</span><br></pre></td></tr></table></figure><p>这里就是指定了为偏移地址为<code>1000H</code>，段寄存器为<code>DS</code>的那个内存单元进行减法操作，操作类型（或者说是范围）是字类型，也就是操作对象是两个字节！</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>而已上六种寻址方式可以分为三大类：寄存器方式，存储器方式以及立即数方式。</p><ul><li>寄存器：寄存器寻址</li><li>存储器方式：<ol><li>寄存器间接寻址</li><li>变址寻址</li><li>基址加变址寻址</li><li>直接寻址</li></ol></li><li>立即数方式：立即寻址</li></ul><h4 id="操作数来源"><a href="#操作数来源" class="headerlink" title="操作数来源"></a>操作数来源</h4><p>双操作数的指令中的目的操作数与源操作数的类型必须是以下几种：</p><ol><li>寄存器对寄存器</li><li>寄存器对存储器</li><li>存储器对寄存器</li><li>立即方式对寄存器–立即方式只能用于源操作数</li><li>立即方式对存储器–立即方式只能用于源操作数</li></ol><p>其中绝对不能两个操作数均来自存储器！</p><h4 id="操作数类型"><a href="#操作数类型" class="headerlink" title="操作数类型"></a>操作数类型</h4><h5 id="不确定类型的操作数："><a href="#不确定类型的操作数：" class="headerlink" title="不确定类型的操作数："></a>不确定类型的操作数：</h5><ul><li>寄存器间接寻址</li><li>立即数</li><li>直接寻址</li></ul><h5 id="一些规定："><a href="#一些规定：" class="headerlink" title="一些规定："></a>一些规定：</h5><ul><li>两个操作数至少要有一个操作数的类型是明确的</li><li>如果两个操作数的类型都是明确的，那么两个操作数的类型必须都要相同（均是字类型，或者均是字节类型等等）</li><li>如果都不明确那么必须要指定一个操作数的类型！</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作 </tag>
            
            <tag> 汇编 </tag>
            
            <tag> 对象 </tag>
            
            <tag> mov </tag>
            
            <tag> 偏移 </tag>
            
            <tag> SS </tag>
            
            <tag> 寄存器 </tag>
            
            <tag> 存储器 </tag>
            
            <tag> 字节 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FuckTheRegulation</title>
      <link href="/2019/11/15/FuckTheRegulation/"/>
      <url>/2019/11/15/FuckTheRegulation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>[Meting]<br>[Music server=”netease” id=”1338149101” type=”song”/]<br>[/Meting]</p><p>真的是期待了很久的<strong>海上钢琴师</strong>,今天首映,也不管不顾下个星期要考我一无所知的汇编,下午就直接跑去看了.</p><p>看的途中一直在想,如果我要写一篇影评,我到底会怎么写?我真的能把一部电影,一个人物,一句台词,真真切切的表达出来吗?</p><p><strong>对不起,我觉得我不能</strong>,抱歉,我总是喜欢说对不起<img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191115210539.png/imgzip"/></p><p>小柠檬第一次弹完钢琴之后对船长说的第一句话就是:<strong>Fuck The Regulation!</strong>,莫名其妙,我对影片的前半段留有的最深的印象就是这句话,以至于最后1900走下悬梯,站在悬梯的中央,望着纽约的林立高楼时,我都在期待着他再次说出<strong>Fuck The Regulation!</strong>.</p><h4 id="可惜他没有"><a href="#可惜他没有" class="headerlink" title="可惜他没有"></a>可惜他没有</h4><p>纽约是上帝的钢琴,完美到找不出一个狭缝塞进一只薄薄唱片.</p><p>完美到大海上最好的钢琴师都不敢奢望坐上那条钢琴凳</p><p>扔掉帽子走回了弗吉尼亚号.</p><p>其实也挺好.这世界有很多抉择,但没有一个抉择是非黑即白的.</p><p>脑袋里太乱了,最近事情真的很多很多,虽然我一直不想做,不想耗费全部精力在某件特定的事情上,除非这件事已经迫在眉睫.</p><p>我已经分不太清楚这种畏手畏脚的感觉是<strong>谨慎</strong>还是<strong>懦弱</strong>了.</p>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netease </tag>
            
            <tag> type </tag>
            
            <tag> 汇编 </tag>
            
            <tag> 钢琴师 </tag>
            
            <tag> 悬梯 </tag>
            
            <tag> regulation </tag>
            
            <tag> 钢琴 </tag>
            
            <tag> fuck </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/2019/11/13/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/11/13/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>[scode type=”yellow”]堆排序思路[/scode]</p><ol><li>将传入的数组看作是一个没有完成的堆</li><li>将堆整理排序成一个大顶堆</li><li>将大顶堆最大的元素，也就是堆顶，与这个堆最后的元素进行交换</li><li>然后视这个除刚刚交换的那个元素外的数组为一个堆，对它进行大顶堆标准检查，并将其整理成一个大顶堆</li><li>有一点需要注意的是每次交换之后接下来需要接着排序的堆的大小需要减一！</li><li>为了减小空间的占用，可以视交换到末尾的元素为已经出堆的元素，仅仅对这些元素之前的数组进行大顶堆检查。</li></ol><p>[scode type=”yellow”]大顶堆概念[/scode]</p><p>​    大顶堆是一个被完全填满的二叉树，除了堆底部的叶子节点以外.其父节点必定要大于它的子节点，由这个特性，我们可以构造大顶堆。</p><p>[scode type=”yellow”]堆的数列表示[/scode]</p><p>​    设其父节点的下标为<code>i</code>,那么它的左儿子的下标就是<code>2i+1</code>,其右儿子的下标就是左儿子加一也就是<code>2i+2</code>。</p><p>​    由上面这个下标的规律我们可以直接从整个堆数组的中部开始遍历整个堆，因为观察堆的结构可知，<code>length/2 - 1</code>下标的节点是必定存在有左儿子的，所以我们不用担心下标越界的问题。</p><p>[scode type=”yellow”]堆的遍历与调整[/scode]</p><p>​[scode type=”blue”]遍历的本质就是将每一个元素都访问到，这里可以用递归，也可以用循环，递归对大数据并不友好，所以应该视情况而定！</p><p>​    调整的话主要是实现父节点与子节点的比较，如果父节点小于子节点的较大者，那么就下沉。这里小于较大者的原因是：<code>因为小的元素要下沉就必须要跟两个子树中较大的那个进行交换，否则如果跟较小的节点进行交换的话可能还需要交换两次！</code>。[/scode]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyHeapSort</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHeapSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123; <span class="number">50</span>, <span class="number">10</span>, <span class="number">90</span>, <span class="number">30</span>, <span class="number">70</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="number">60</span>, <span class="number">20</span> &#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;排序之前：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line">heapSort(arr);</span><br><span class="line"> </span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;排序之后：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">// Create a big top heap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length/<span class="number">2</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            heapAdjust(arr, i, arr.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将堆顶最大的那个元素和后面的元素进行交换，然后再生成大顶堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 交换堆顶和队列中最后一个元素的值</span></span><br><span class="line">            exchange(arr, <span class="number">0</span>, i);</span><br><span class="line">            <span class="comment">// 判断这个队列是否能构成大顶堆不能的话就调整</span></span><br><span class="line">            <span class="comment">// 这里调整的实质是：只有堆顶一个元素需要调整，因此只需要将堆顶的元素下沉到相应的位置就好了不需要调整太多元素！！</span></span><br><span class="line">            heapAdjust(arr, <span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapAdjust</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> root,<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="comment">// 以 root节点为根节点，遍历这个长度为length的子树，判断其是否满足大顶堆的要求</span></span><br><span class="line">        <span class="type">int</span> child;  <span class="comment">// 子节点的值</span></span><br><span class="line">        <span class="type">int</span> father; <span class="comment">// 父节点的值</span></span><br><span class="line">        <span class="keyword">for</span>(father = arr[root];<span class="number">2</span>*root+<span class="number">1</span> &lt; length;root = child)&#123;</span><br><span class="line">            child = <span class="number">2</span>*root+<span class="number">1</span>; <span class="comment">// 以root节点为根节点的左子树的下标</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果这个根节点的左子树不是这个堆的最后一个元素并且左子树小于右子树。那么就把下标指向右子树</span></span><br><span class="line">            <span class="comment">// 因为小的元素要下沉就必须要跟两个子树中较大的那个进行交换，否则如果跟较小的节点进行交换的话可能还需要交换两次！</span></span><br><span class="line">            <span class="keyword">if</span> (child != length-<span class="number">1</span> &amp;&amp; arr[child] &lt; arr[child+<span class="number">1</span>]) &#123;</span><br><span class="line">                child++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果此时的父节点小于子树中的那个较大者，就与之交换！</span></span><br><span class="line">            <span class="keyword">if</span> (father &lt; arr[child]) &#123;</span><br><span class="line">                arr[root] = arr[child]; <span class="comment">// 父节点的原有值已经记录在father这个变量内了！</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 说明该节点符合大顶堆的标准，退出for循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 由于当前下表为root的节点值可能是废弃的，即已经被交换过，所以这个节点位置的应有值是该移动节点的值，即最初始的父节点</span></span><br><span class="line">        arr[root] = father;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exchange</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> began,<span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[began];</span><br><span class="line">        arr[began] = arr[end];</span><br><span class="line">        arr[end] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是我自己探索出来的堆排序，使用了过多的递归，导致空间爆炸，效率很低</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 堆排序</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">// A 是要排序的数组</span></span><br><span class="line">        <span class="type">int</span>[] temp = createHeap(A,index);</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp1</span> <span class="operator">=</span> temp[<span class="number">0</span>];</span><br><span class="line">        temp[<span class="number">0</span>] = temp[temp.length-<span class="number">1</span>-index];</span><br><span class="line">        temp[temp.length-<span class="number">1</span>-index] = temp1;</span><br><span class="line">        <span class="keyword">if</span> (index == A.length-<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        heapSort(temp, ++index);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造小顶堆</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] createHeap(<span class="type">int</span>[] A,<span class="type">int</span> max) &#123;</span><br><span class="line">        <span class="type">int</span>[] B = <span class="keyword">new</span> <span class="title class_">int</span>[A.length-max];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; B.length; i++) &#123;</span><br><span class="line">            B[i] = A[i];           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> B.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            comparePartOfHeapSort(B, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; B.length; i++) &#123;</span><br><span class="line">            A[i] = B[i];           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">comparePartOfHeapSort</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">// 控制元素的下沉</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> index * <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (j &lt; A.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[index] &lt; A[j]) &#123;</span><br><span class="line">                <span class="comment">// 比左子树要小,那么进行交换</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> A[index];</span><br><span class="line">                A[index] = A[j];</span><br><span class="line">                A[j] = temp;</span><br><span class="line">                comparePartOfHeapSort(A, j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k &lt; A.length &amp;&amp; A[index] &lt; A[k]) &#123;</span><br><span class="line">                <span class="comment">// 比左子树要大，且右子树存在时，就跟右子树进行比较</span></span><br><span class="line">                <span class="comment">// 比右子树要小，那么交换</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> A[index];</span><br><span class="line">                A[index] = A[k];</span><br><span class="line">                A[k] = temp;</span><br><span class="line">                comparePartOfHeapSort(A, k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 比左右节点都要大，那么就说明该节点在这个位置是正确的，然后返回</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 连左子树都不存在，说明该节点已经为叶子节点</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 节点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java String的一些问题</title>
      <link href="/2019/11/05/Java-String%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/05/Java-String%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>[scode type=”share”]String str=new String(“abc”);   紧接着这段代码之后的往往是这个问题，那就是这行代码究竟创建了几个String对象呢？[/scode]</p><p>[scode type=”blue”]相信大家对这道题并不陌生，答案也是众所周知的，2个。[/scode]</p><p>[scode type=”green”] 接下来我们就从这道题展开，一起回顾一下与创建String对象相关的一些JAVA知识。  [/scode]</p><p>我们可以把上面这行代码分成</p><p><code>String str、=、&quot;abc&quot;</code></p><p>和</p><p><code>new String()</code></p><p>四部分来看待。String str只是定义了一个名为str的String类型的变量，因此它并没有创建对象；=是对变量str进行初始化，将某个对象的引用（或者叫句柄）赋值给它，显然也没有创建对象；现在只剩下<code>new String(&quot;abc&quot;)</code>了。那么，<code>new String(&quot;abc&quot;)</code>为什么又能被看成”abc”和new String()呢？</p><p>[scode type=”green”]我们来看一下被我们调用了的String的构造器：  [/scode]</p><p> <code>public String(String original) &#123;  //other code ...  &#125;</code></p><p> 大家都知道，我们常用的创建一个类的实例（对象）的方法有以下两种:</p><ol><li><p>使用<code>new</code>创建对象。 </p></li><li><p>调用<code>Class</code>类的<code>newInstance</code>方法，利用反射机制创建对象。</p></li></ol><p>我们正是使用<code>new</code>调用了String类的上面那个构造器方法创建了一个对象，并将它的引用赋值给了<code>str</code>变量。同时我们注意到，被调用的构造器方法接受的参数也是一个<code>String</code>对象，这个对象正是<code>&quot;abc&quot;</code>。由此我们又要引入另外一种创建<code>String</code>对象的方式的讨论——引号内包含文本。</p><p>这种方式是<code>String</code>特有的，并且它与new的方式存在很大区别。  </p><p><code>String str=&quot;abc&quot;;</code></p><p>毫无疑问，这行代码创建了一个<code>String</code>对象。  </p><p><code>String a=&quot;abc&quot;;  String b=&quot;abc&quot;;</code>那这里呢？</p><p>答案还是一个。  </p><p><code>String a=&quot;ab&quot;+&quot;cd&quot;;</code>   再看看这里呢？</p><p>答案是三个。</p><p>说到这里，我们就需要引入对字符串池相关知识的回顾了。  </p><p>在JAVA虚拟机（JVM）中存在着一个字符串池，其中保存着很多String对象，并且可以被共享使用，因此它提高了效率。由于String类是final的，它的值一经创建就不可改变，因此我们不用担心String对象共享而带来程序的混乱。字符串池由String类维护，我们可以调用intern()方法来访问字符串池。  </p><p>我们再回头看看<code>String a=&quot;abc&quot;;</code>，这行代码被执行的时候，JAVA虚拟机首先在字符串池中查找是否已经存在了值为”abc”的这么一个对象，它的<strong>判断依据是String类equals(Object obj)方法的返回值</strong>。如果有，则不再创建新的对象，直接返回已存在对象的引用；如果没有，则先创建这个对象，然后把它加入到字符串池中，再将它的引用返回。因此，我们不难理解前面三个例子中头两个例子为什么是这个答案了。</p><p><strong>只有使用引号包含文本的方式创建的String对象之间使用“+”连接产生的新对象才会被加入字符串池中。</strong>对于所有包含new方式新建对象（包括null）的“+”连接表达式，它所产生的新对象都不会被加入字符串池中，对此我们不再赘述。<strong>因此我们提倡大家用引号包含文本的方式来创建String对象以提高效率</strong>，实际上这也是我们在编程中常采用的。</p><p>栈（stack）：主要保存基本类型（或者叫<strong>内置类型</strong>）（char、byte、short、int、long、float、double、boolean）和<strong>对象的引用</strong>，数据可以共享，速度仅次于寄存器（register），快于堆。 </p><p>堆（heap）：<strong>用于存储对象</strong> –自定义的一些类，还有Java自带的一些相对而言比较高级的类</p><p>转载自<a href="https://home.cnblogs.com/u/ydpvictor/">云端飘</a></p><p><a href="https://www.cnblogs.com/ydpvictor/archive/2012/09/09/2677260.html">原文链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建 </tag>
            
            <tag> scode </tag>
            
            <tag> Java </tag>
            
            <tag> abc </tag>
            
            <tag> string </tag>
            
            <tag> 对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十月October</title>
      <link href="/2019/10/31/%E5%8D%81%E6%9C%88October/"/>
      <url>/2019/10/31/%E5%8D%81%E6%9C%88October/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-eBxGCZea" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1365393542" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><p>​    今天下午从实验室里上完课出来，和一个同学一起去靠的近的东教工食堂吃饭，路上的时候他突然问我为什么会一个人去商场里吃饭，他说虽然他也会有时候一个人去看电影但是还是难以接受一个人去吃饭？</p><h3 id="突然，也就是那么一瞬间吧，觉得自己真的已经是习惯了一个人"><a href="#突然，也就是那么一瞬间吧，觉得自己真的已经是习惯了一个人" class="headerlink" title="突然，也就是那么一瞬间吧，觉得自己真的已经是习惯了一个人"></a>突然，也就是那么一瞬间吧，觉得自己真的已经是习惯了一个人</h3><p>​    已经不太记得第一次一个人去看电影时看的是什么了，大概是一部普通的片子吧，不过还是能记得我是在一八年的头几个月去看的，那个冬天挺冷的。再往后就慢慢地看的越来越多，可能也是觉得想看就看，没必要一定要有人陪着一起是吧？倘若电影太烂太作那就是浪费了两个人的时间，确实不值得。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/preview.jpg"/><h3 id="总觉得这个十月是如此的漫长而丰腴。"><a href="#总觉得这个十月是如此的漫长而丰腴。" class="headerlink" title="总觉得这个十月是如此的漫长而丰腴。"></a>总觉得这个十月是如此的漫长而丰腴。</h3><p>月初的国庆假期，接待了来汉的几个同学，看到了武汉的第一缕阳光。</p><blockquote><p>世间美景大多相似，那一日的相遇甚至不及凌波门桥上破碎的湛蓝水泥板。</p></blockquote><p>中旬时，在前往东九的路上，收到了备案局的备案成功的短信，担惊受怕了半个多月终于是看到了尽头。</p><p>而后便是漫长的S9赛程，占据了我十月中旬大半时间，有奇迹突围，亦有英雄落幕，也有差强人意堪堪出线。不过倒是进入下旬后，各家队伍表现得都挺喜人，换我一个好梦。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/77b913212c547eb622dfd9f917eb01f.jpg/imgzip"/><h3 id="不堪展望的十一月"><a href="#不堪展望的十一月" class="headerlink" title="不堪展望的十一月"></a>不堪展望的十一月</h3><p>大多时候还是很难承认，大二的前两个月已经过去了，学期已经过半。下个月几乎是每隔三四天就有一门课结课或是考试，而下下个月十二月倒是悠闲不少。可能是有点质疑自己的能力，对一个大作业也是少不了畏惧。</p><p><strong>抱怨真的不是一件好事。</strong></p><p>但愿我接下来能转型到<strong>结果导向</strong>而不是<strong>过程导向</strong>。</p><hr><p>[scode type=”blue”]下面是前几个月的总结[/scode]</p><p>[post cid=”519” /]<br>[post cid=”179” /]</p>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 每月纪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构--树（BST）</title>
      <link href="/2019/10/21/524/"/>
      <url>/2019/10/21/524/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>​    树是一种简单的数据结构，其插入查找的速度都相对均匀：O(logN)，这里用到的主要是二叉查找树binary search tree。</p><ul><li>了解树在文件系统里的应用</li><li>计算算术表达式的值，如中缀表达式等</li><li>树是如何实现以O(logN)的平均时间进行查找操作，以及最坏时间O(logN)。</li></ul><h3 id="树的基本模型"><a href="#树的基本模型" class="headerlink" title="树的基本模型"></a>树的基本模型</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191021233841.png" alt="tree"><h4 id="树的构成："><a href="#树的构成：" class="headerlink" title="树的构成："></a>树的构成：</h4><p>​    每棵树都有根节点和数个非空子树组成</p><p>​    一棵树是<code>N</code>个节点和<code>N-1</code>条边的集合，原因很简单，除了根节点之外，每个节点都与其父节点有一条边相连接。</p><h4 id="树的路径长度，高度与深度："><a href="#树的路径长度，高度与深度：" class="headerlink" title="树的路径长度，高度与深度："></a>树的路径长度，高度与深度：</h4><ul><li>长度：<code>n1</code>-<code>nk</code>的路径上的边的条数，树上的任意一个节点都有到跟的路径</li><li>高度：任意<code>ni</code>节点到根节点的唯一路径的长度看作为该节点的高度，即节点越往下，高度越大，与根节点离得越远高度越大！</li><li>深度：以<code>ni</code>为当前子树的根节点，向下寻找树叶，由该节点到树叶的路径的长度，记作该节点的高度</li></ul><blockquote><p><strong>不管是深度也好，高度也好，基本上都是相对于你选择的根节点而言的，并不是完全固定不变的，是一个相对的数值，不过求出每一个高度和深度的路径都是唯一的</strong></p></blockquote><h3 id="树的代码实现"><a href="#树的代码实现" class="headerlink" title="树的代码实现"></a>树的代码实现</h3><h4 id="树的节点声明："><a href="#树的节点声明：" class="headerlink" title="树的节点声明："></a>树的节点声明：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    ElementType Element; <span class="comment">//抽象数据类型，定义树节点存放的数据</span></span><br><span class="line">    PtrToNode FirstChild;<span class="comment">//第一个子树的指针（第一儿子）</span></span><br><span class="line">    PtrToNode NextChild;<span class="comment">//下一个子树的指针（下一个兄弟）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为实现并不知道子树的个数，所以直接在声明里指定个数是不理智的，所以应该换一种方式，使用链表来存储树，具体的图明天再来画吧！</p></blockquote><h4 id="树的遍历及应用："><a href="#树的遍历及应用：" class="headerlink" title="树的遍历及应用："></a>树的遍历及应用：</h4><p><strong>UNIX文件系统</strong>：文件树的遍历</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ListD(DirectryOfFile D,<span class="type">int</span> Depth)&#123; <span class="comment">//文件目录，目录深度</span></span><br><span class="line"><span class="comment">//D是一个合法的文件入口那么就进行遍历</span></span><br><span class="line">    <span class="keyword">if</span>(D is a legitimate entry)&#123;</span><br><span class="line">        <span class="keyword">for</span> (child C : D)&#123;</span><br><span class="line">            ListD(C,Depth+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    经过几次递归之后就可以完全打印出文件目录。</p><h4 id="遍历方式："><a href="#遍历方式：" class="headerlink" title="遍历方式："></a>遍历方式：</h4><ol><li><p>先序遍历：</p><p>在先序遍历中，<strong>对节点的处理在处理儿子结点之前</strong>！下面是线序遍历的图例，节点的数字代表遍历的顺序。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/{DE7B9712-7186-0D99-EA2E-654CCD516AD9}.png"/></li><li><p>后序遍历：</p><p>在后序遍历中，<strong>对节点的处理在处理儿子节点之后</strong>！下面是后序遍历的图例。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/{9AC8C798-054F-F3D1-8F4E-81D6968F2C52}.png"/><blockquote><p>一些个人理解：不管是先序遍历还是后序遍历还是层序遍历，其本质都是一件事情：<strong>递归</strong>，通过一种相似的查找方式打印出需要遍历的树中所有的节点。</p></blockquote></li></ol><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>​    二叉树是一种树，其中每个节点的子节点不得多于两个。二叉树的一个重要性质是平均二叉树的深度要比N要小得多为O($\sqrt{N} $),而二叉查找树的平均深度是O($\log{N}$)。</p><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">PtrToNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PtrNode</span> <span class="title">Tree</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    ElementType Element;<span class="comment">//节点的值</span></span><br><span class="line">    Tree left;<span class="comment">//左子树</span></span><br><span class="line">    Tree right;<span class="comment">//右子树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>每个有<code>N</code>个节点的二叉树都有<code>N+1</code>个<code>NULL</code>空指针</strong></p></blockquote><h4 id="表达式树："><a href="#表达式树：" class="headerlink" title="表达式树："></a>表达式树：</h4><p>​    利用二叉树实现中缀表达式，前缀表达式等等，还需要结合队列来实现整个数据结构！<br>​      </p><ul><li>表达式树的树叶表示表达式的操作数，比如变量或者常量，而其他的根结点代表操作符。</li><li>所有的操作符都是二元操作符。<br>下面给出一个例子：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">左子树a+(b*c)。右子树(((d*e）+f)*g)</span><br></pre></td></tr></table></figure><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/15718298842588.jpg" alt=""></li></ul><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/15718305015386.jpg" alt=""></p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/15718305204381.jpg" alt=""></p><h4 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h4><ul><li>概念：对于二叉查找树中的任意节点<code>X</code>，它的左子树所有关键字值小于该节点所代表的关键字的值，而其右子树的所有关键字的值大于<code>X</code>的关键字值。因此该二叉树的所有元素都可以用某种统一的方式排序。 </li></ul><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/15718309179352.jpg" alt=""></p><blockquote><p>这里有一个二叉查找树的查找时间复杂度的计算问题，我之前上课的时候没怎么想明白，刚刚上网查了一下发现是我智障了。<br>其实二叉查找树的原理跟二分法的原理是完全一样的：在<code>N</code>个数据的数组里取第<code>Ｎ／2</code>个元素，将这个元素与输入元素进行对比，如果小与输入元素就去该节点的右子树中查找，如果大于就去左子树。假设查找的次数为<code>x</code>次，那么表达式就是：N*（$1/2$）^X = 1，即最坏情况是查找到首尾元素，最后即可得出查找的时间复杂度为O($\log{N}$).</p></blockquote><ul><li>增删查改：<ol><li>Insert</li><li>Delete：删除操作是相对困难的一部分，这里仅仅讨论处理有两个儿子的操作。<ul><li>一般的删除策略是用其右子树的最小数据（右子树的最左侧的那个节点）代替该节点的数据，并递归地删除那个（被替换掉的）节点。由于该节点不可能有左子树，所以第二次删除要容易。接下来是一个例子</li><li><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/15718341677778.jpg" alt=""></li><li>然后被移动的关键字3像之前删除2一样删除！ </li></ul></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 节点 </tag>
            
            <tag> 查找 </tag>
            
            <tag> 右子树 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 左子树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编程序设计</title>
      <link href="/2019/10/20/%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/2019/10/20/%E6%B1%87%E7%BC%96%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="完成汇编程序设计课设要求"><a href="#完成汇编程序设计课设要求" class="headerlink" title="完成汇编程序设计课设要求"></a>完成汇编程序设计课设要求</h2><ul><li>程序开始有个选项栏，里面有2个选项：</li><li>1、输入成绩，以图5.20的形式输入最多N个同学的学号、分数、名次信息，N可以在程序中预定义，输入过程中如果超过这个N，出现超标提示停止输入（上交作业时可预先定义N为10,即最多只能输入10个人的成绩），按回车健停止输入成绩，回到选项栏。</li><li>2、查询成绩：按学号查询成绩，显示格式按书中定义；按回车健停止查询成绩，回到选项栏。无论输入成绩或查询成绩过程中，键入‘Q’退出整个程序。</li></ul><h3 id="程序设计结构"><a href="#程序设计结构" class="headerlink" title="程序设计结构"></a>程序设计结构</h3><ol><li><p>宏汇编：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">print_char macro X</span><br><span class="line">    mov ah,2</span><br><span class="line">    mov dl,X</span><br><span class="line">    int 21H</span><br><span class="line">    endm    ;结束（end）宏定义（macro）</span><br><span class="line">;字符串输出</span><br><span class="line">print_string macro X</span><br><span class="line">    lea dx,X</span><br><span class="line">    mov ah,9</span><br><span class="line">    int 21H</span><br><span class="line">    endm</span><br><span class="line">;字符输入 将字符的ASCII码送入AL中去</span><br><span class="line">getinput_char macro </span><br><span class="line">    mov ah,1</span><br><span class="line">    int 21H</span><br><span class="line">    endm</span><br><span class="line">;字符串输入 将字符串送入一个缓冲区中</span><br><span class="line">getinput_string macro X</span><br><span class="line">    lea dx,X</span><br><span class="line">    mov ah,10</span><br><span class="line">    int 21H</span><br><span class="line">    endm</span><br></pre></td></tr></table></figure></li><li><p>数据段设计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">data segment use16</span><br><span class="line">     </span><br><span class="line">    ENGLI   db 80 dup(20H)  ; 3*N个空间，用于存放学号成绩和排名（此处N=10）</span><br><span class="line">            db 20H</span><br><span class="line">    ; ENGLI   db 20H,31H,20H,33H,39H,20H,38H,20H,31H,33H,20H,35H,37H,20H,36H </span><br><span class="line">    ;         db 80 dup(20H)  ; 3*N个空间，用于存放学号成绩和排名（此处N=10）</span><br><span class="line">    ;         db 20H</span><br><span class="line">    SEARCH_BUF db 30 dup(0)</span><br><span class="line">    MENU db 13,10</span><br><span class="line">    db &#x27;*~*~*~*~*~MENU*~*~*~*~*~*~*~*~*~*~*~*~*&#x27;,13,10</span><br><span class="line">    db &#x27;@         1.INPUT                     @&#x27;,13,10</span><br><span class="line">    db &#x27;@         2.FIND                      @&#x27;,13,10</span><br><span class="line">    db &#x27;@-------------------------------------@&#x27;,13,10</span><br><span class="line">    db &#x27;@         Q.QUIT                      @&#x27;,13,10</span><br><span class="line">    db &#x27;*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*&#x27;,13,10</span><br><span class="line">    db &#x27;PLEASE INPUT YOUR CHOICE:$&#x27;</span><br><span class="line"></span><br><span class="line">    INPUTNOTICE db 13,10</span><br><span class="line">                db &#x27;PLEASE INPUT THE SCORE:&#x27;,13,10,&#x27;$&#x27;</span><br><span class="line">    IDSCORERANK db &#x27;ID  SCORE   RANK&#x27;,13,10,&#x27;$&#x27;</span><br><span class="line">    FINDNOTICE db 13,10</span><br><span class="line">               db &#x27;PLEASE INPUTU THE ID YOU ARE SEARCHING FOR:$&#x27;</span><br><span class="line">    NOTFINDNOTICE db 13,10</span><br><span class="line">                  db &#x27;THE DATA YOU ARE FINDING ARE NOT EXIST !$&#x27;</span><br><span class="line">    OUTOFBUF db 13,10</span><br><span class="line">             db &#x27;THE MAX OF INPUT WAS 10 PEOPLE!!$&#x27;</span><br><span class="line">data ends</span><br></pre></td></tr></table></figure></li><li><p>程序段设计（code segment）：</p><ul><li><p>程序初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start:</span><br><span class="line">    mov ax,data</span><br><span class="line">    mov ds,ax</span><br><span class="line">    mov bx,1</span><br><span class="line">    lea di,SEARCH_BUF   ; 输入字符的起始地址</span><br></pre></td></tr></table></figure></li><li><p>菜单显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menuloop:    </span><br><span class="line">    call showmenu</span><br><span class="line">    call menuchoice</span><br><span class="line">    jmp menuloop</span><br></pre></td></tr></table></figure></li><li><p>退出程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit:    </span><br><span class="line">    mov ax,4C00H</span><br><span class="line">    int 21H</span><br></pre></td></tr></table></figure></li><li><p>输入成绩子程序部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">inputscore proc near</span><br><span class="line">    mov bx,1</span><br><span class="line">    mov cx,0</span><br><span class="line">    mov dl,0</span><br><span class="line">    print_string INPUTNOTICE</span><br><span class="line">    print_string IDSCORERANK</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inputloop:</span><br><span class="line">    getinput_char</span><br><span class="line">    cmp al,&#x27;q&#x27; ; 按下Q退出</span><br><span class="line">    je exit</span><br><span class="line">    cmp al,&#x27;Q&#x27;</span><br><span class="line">    je exit</span><br><span class="line">    cmp al,13</span><br><span class="line">    je menuloop</span><br><span class="line">    cmp al,20H</span><br><span class="line">    je inputloop_inc</span><br><span class="line"></span><br><span class="line">    mov [bx],al</span><br><span class="line">    inc bx</span><br><span class="line"></span><br><span class="line">    jmp inputloop</span><br><span class="line">inputloop_inc:</span><br><span class="line">    inc cx</span><br><span class="line">    mov [bx],al</span><br><span class="line">    inc bx</span><br><span class="line"></span><br><span class="line">    cmp cx,29</span><br><span class="line">    jae inputloop_output</span><br><span class="line">    jmp inputloop</span><br><span class="line"></span><br><span class="line">inputloop_output:</span><br><span class="line">    print_string OUTOFBUF</span><br><span class="line">    getinput_char</span><br><span class="line">    cmp al,0DH</span><br><span class="line">    je menuloop</span><br><span class="line">    ret</span><br><span class="line">inputscore endp</span><br></pre></td></tr></table></figure></li><li><p>成绩查询子程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">; 按学号查找记录子程序</span><br><span class="line">findpeople proc near</span><br><span class="line">    mov bx,1    ; 存储字符的定位指针</span><br><span class="line">    mov si,0    ; 输入字符的计数器</span><br><span class="line">    </span><br><span class="line">    print_string FINDNOTICE</span><br><span class="line">    jmp findloop</span><br><span class="line">    </span><br><span class="line">notfind:</span><br><span class="line">    print_string NOTFINDNOTICE</span><br><span class="line">    getinput_char</span><br><span class="line">    jmp menuloop</span><br><span class="line"></span><br><span class="line">inc_part:</span><br><span class="line">    inc bx</span><br><span class="line">    inc cx</span><br><span class="line">    cmp cx,4</span><br><span class="line">    jae search_complete</span><br><span class="line">    jb print_data</span><br><span class="line"></span><br><span class="line">print_data:</span><br><span class="line">    ; mov cx,0    ; 空格计数器，当到达第三个空格时停止输出</span><br><span class="line">    print_char [bx]</span><br><span class="line">    mov dl,20H</span><br><span class="line">    cmp [bx],dl</span><br><span class="line">    je inc_part</span><br><span class="line">    inc bx</span><br><span class="line">    jmp print_data</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">    dec bx</span><br><span class="line">    mov dl,20H          ; 让bx自减到上一个为空格的地方</span><br><span class="line">    cmp [bx],dl    ; 若为空格则开始输出</span><br><span class="line">    je print_data</span><br><span class="line">    jmp output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">findnext_inc:</span><br><span class="line">    inc cx</span><br><span class="line">    inc bx</span><br><span class="line">    jmp findnext</span><br><span class="line">findnext:</span><br><span class="line">    lea di,SEARCH_BUF</span><br><span class="line">    cmp cx,3</span><br><span class="line">    je checkloop</span><br><span class="line">    mov dl,20H</span><br><span class="line">    cmp [bx],dl</span><br><span class="line">    je findnext_inc</span><br><span class="line">    inc bx</span><br><span class="line">    jmp findnext</span><br><span class="line"></span><br><span class="line">checkloop_pre:</span><br><span class="line">    mov dl,20H</span><br><span class="line">    mov [di],dl</span><br><span class="line">    lea di,SEARCH_BUF   ; 输入字符的起始地址</span><br><span class="line">    ; dec di</span><br><span class="line">    jmp checkloop</span><br><span class="line"></span><br><span class="line">checkloop: </span><br><span class="line">    mov cx,0</span><br><span class="line">    mov dh,[di]</span><br><span class="line">    cmp [bx],dh   ; 比较存储的输入字符和数据段的字符</span><br><span class="line">    jne findnext    ; 若不相等则去寻找下一个学号</span><br><span class="line"></span><br><span class="line">    mov dl,20H      ; 判断是否是空格</span><br><span class="line">    cmp [bx],dl</span><br><span class="line">    je output</span><br><span class="line"></span><br><span class="line">    mov dl,0DH      ; 判断是否是回车</span><br><span class="line">    cmp [bx],dl</span><br><span class="line">    je output</span><br><span class="line"></span><br><span class="line">    inc bx</span><br><span class="line">    inc di</span><br><span class="line">    cmp bx,50H</span><br><span class="line">    jb checkloop   ; 继续循环的条件是这个单元格里的字符既不是回车也不是空格，并且两个字符相同</span><br><span class="line">    jmp notfind</span><br><span class="line"></span><br><span class="line">findloop:           ; 用两个指针记住查询时输入的查询数据，再进行不断比较</span><br><span class="line">    mov cx,0</span><br><span class="line">    getinput_char</span><br><span class="line"></span><br><span class="line">    cmp al,&#x27;q&#x27; ; 按下Q退出</span><br><span class="line">    je exit</span><br><span class="line">    cmp al,&#x27;Q&#x27;</span><br><span class="line">    je exit</span><br><span class="line"></span><br><span class="line">    cmp al,20H</span><br><span class="line">    je checkloop_pre</span><br><span class="line"></span><br><span class="line">    cmp al,0DH</span><br><span class="line">    je checkloop_pre</span><br><span class="line"></span><br><span class="line">    mov [di],al</span><br><span class="line">    inc di</span><br><span class="line">    inc si</span><br><span class="line">    ; inc bx</span><br><span class="line">    ; cmp bx,82</span><br><span class="line">    jmp findloop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ret</span><br><span class="line">findpeople endp</span><br></pre></td></tr></table></figure></li><li><p>输入缓冲区清零子程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">search_complete proc near</span><br><span class="line">    lea di,SEARCH_BUF</span><br><span class="line">    </span><br><span class="line">clearloop:</span><br><span class="line">    </span><br><span class="line">    mov dl,00H</span><br><span class="line">    mov [di],dl</span><br><span class="line">    inc di</span><br><span class="line">    cmp di,70H</span><br><span class="line">    jae complete</span><br><span class="line">    jmp clearloop</span><br><span class="line">complete:</span><br><span class="line">    lea di,SEARCH_BUF</span><br><span class="line">    getinput_char</span><br><span class="line"></span><br><span class="line">    cmp al,0DH</span><br><span class="line">    je menuloop</span><br><span class="line"></span><br><span class="line">    cmp al,&#x27;q&#x27; ; 按下Q退出</span><br><span class="line">    je exit</span><br><span class="line">    cmp al,&#x27;Q&#x27;</span><br><span class="line">    je exit</span><br><span class="line">    ret</span><br><span class="line">search_complete endp</span><br></pre></td></tr></table></figure></li></ul></li><li><p>程序运行截图：</p><ul><li><p>初始化界面：</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191020200003.png"></li><li><p>输入程序界面：</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191020200220.png"/><p>每个部分用空格隔开，可以连续输入十个人的学号，成绩，排名</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191020200300.png"/></li><li><p>查询成绩界面：</p><p>输入学号，查询该同学的成绩排名！</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191020200436.png"/>[源代码地址][1]</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> 字符 </tag>
            
            <tag> mov </tag>
            
            <tag> cmp </tag>
            
            <tag> inc </tag>
            
            <tag> jmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自建云盘cloudreve</title>
      <link href="/2019/10/17/%E8%87%AA%E5%BB%BA%E4%BA%91%E7%9B%98cloudreve/"/>
      <url>/2019/10/17/%E8%87%AA%E5%BB%BA%E4%BA%91%E7%9B%98cloudreve/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>因为看到iPad上面有挺多的app支持用webdav备份查找文件，所以一直想自己搭建一个webdav服务。毕竟onedrive真的是太坑了，同步速度巨慢，还经常打开失败，出现奇奇怪怪的错误。</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>起初我以为是要安装什么命令行之类的。最初的设想是使用ngnix的webdav模块，不过之后找到了更好一点的解决办法！</p><p>那就是用<strong>cloudreve</strong>！</p><p>这个是树洞外链作者的一个新作品，虽然我不知道树洞外链是什么，有机会再去看看，应该比较有趣！<a href="https://cloudreve.org/">cloudreve</a>←这个是作者的网址。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191017220747.png" alt="网站"/><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191017220942.png"/><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>我的云主机用的是宝塔面板，所以很多部分都比较简略，命令行基本在这里没怎么用到。</p></blockquote><ol><li><p><a href="https://download.cloudreve.org/build/268ac72fb02aa47d4d42704e88a8240ff0a176c0.zip">下载安装包</a>(点击即可下载)，你也可以去上面的官网下载最新的安装包。</p></li><li><p>解压缩</p></li><li><p>在宝塔面板创建一个新的网站</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/201912094c43b7e501342.png"/></li><li><p>用phpmyadmin将压缩包的根目录下的sql文件导入到该数据库里</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191017221613.png/imgzip"/></li><li><p>在application文件夹里找到databse_sample.php文件，更改里面的数据库设置，然后重命名保存为database.php文件。</p></li><li><p>重新打包，上传到宝塔面板创建的网站的根目录下面。</p></li><li><p>这个时候应该已经可以打开界面了，但是点击按钮均会404，所以还需要配置伪静态。</p></li></ol><h3 id="配置伪静态"><a href="#配置伪静态" class="headerlink" title="配置伪静态"></a>配置伪静态</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191017222023.png"/><p>宝塔面板可以在这里直接设置。</p><p>由于cloudreve是基于thinkphp创建的，所以可以直接选择模板里的thinkphp模板，没有的话也可以直接用这个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line"><span class="keyword">if</span> (!-e <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">rewrite  ^(.*)$  /index.php?s=$<span class="number">1</span>  last;   <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后应该就可以了。</p><p>cloudreve中有相应的webdav选项。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 宝塔 </tag>
            
            <tag> 文件 </tag>
            
            <tag> webdav </tag>
            
            <tag> cloudreve </tag>
            
            <tag> thinkphp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这几天</title>
      <link href="/2019/10/17/%E8%BF%99%E5%87%A0%E5%A4%A9/"/>
      <url>/2019/10/17/%E8%BF%99%E5%87%A0%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这几天，怎么说呢，过的也还好吧</p><p>快到深夜的时候总会很难受，<strong>害，我以为我都已经忘了。</strong></p><p>今天终于记得去取军运会的门票了，说实话，还是有一点去看热闹的感觉，如果明年的S10也在武汉就好了，不知道那是有没有钱去看，我真的好想去现场看一次比赛！</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191017172817.png"/><p>不过女篮好像也挺好的，正好碰上中国VS加拿大。</p><p>我不知道是不是chevereto这个软件的问题，反正我自己的图床网站已经崩溃了，一直打不开，我很烦，然后又去寻找了很多办法，最后决定买了阿里云的OSS。虽然我知道还有很多免费的图床，不至于要去买阿里的云存储，但是我有点想探索一下，所以思考再三还是买了。</p><p>我真的好能花钱一人。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191017172827.png"/><p>呼，我好像已经好久好久没有出学校吃饭了，最近事情比较多，前有JAVA课程设计，后有汇编课程设计，我真的是吐了，最近如果能做完的话我会发到<a href="https://github.com/TankNee?tab=repositories">github</a>上的,hhh，我尽量写的完整一点</p><p>图床崩了之后我也去找了替代的方法，不过之前的域名在我反复胡乱解析之后终于是出现了大问题，我也不知道什么情况，反正就是一直用不了，所以我现在用的图床域名是<a href="https://img.tanknee,cn">img</a>别的不说，有自己的域名真的很爽哈哈哈</p><p>好久好久之前的马歇尔的白嫖活动终于给我寄过来了，不过我不是很需要这件衣服，我真的有很多衣服了，有点想把这个捐掉，要是能送我个耳机就好了（每天做梦..）</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191017172814.png"/><blockquote><p>好像没有了，那么生活愉快吧。</p><p>脱水APP好像还挺好玩的！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观看中华人民共和国七十周年阅兵仪式有感</title>
      <link href="/2019/10/10/%E8%A7%82%E7%9C%8B%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E4%B8%83%E5%8D%81%E5%91%A8%E5%B9%B4%E9%98%85%E5%85%B5%E4%BB%AA%E5%BC%8F%E6%9C%89%E6%84%9F/"/>
      <url>/2019/10/10/%E8%A7%82%E7%9C%8B%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E4%B8%83%E5%8D%81%E5%91%A8%E5%B9%B4%E9%98%85%E5%85%B5%E4%BB%AA%E5%BC%8F%E6%9C%89%E6%84%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>  还有印象的阅兵就是前几年的抗战胜利七十周年的阅兵大典了，再往前就是六十周年的十一阅兵，诚然，阅兵一年比一年壮观，气势也是越来越宏伟壮阔，东风系列的导弹也从只是耳闻到大众亮相，我们国家的硬实力确实是越来越强了，天安门前，十里长街，茫茫军绿色，是我们的国防的守卫色，每次见到，都会心生崇敬与自豪之情。</p><p>  近几日国际争锋也是丝毫没有停歇，肖华莫雷的言论也是令人心生不悦，网上有句话说的挺好：</p><blockquote><p>“我喜欢看NBA，但我更清楚我是凭什么有资格有机会躺在沙发上舒舒服服地看球赛”</p></blockquote><p> 致敬每一位捍卫我国国防安全的同胞。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/image.png"/>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>九月September</title>
      <link href="/2019/10/07/%E4%B9%9D%E6%9C%88September/"/>
      <url>/2019/10/07/%E4%B9%9D%E6%9C%88September/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-tMjXzXYW" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="470759757" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h2 id="有点恍惚，突然就十月份了"><a href="#有点恍惚，突然就十月份了" class="headerlink" title="有点恍惚，突然就十月份了"></a>有点恍惚，突然就十月份了</h2><hr><h3 id="九月就这么过去了"><a href="#九月就这么过去了" class="headerlink" title="九月就这么过去了"></a>九月就这么过去了</h3><p>lpl的三只去S9的队伍也出来了，虽说今年确实没什么希望，但我还是觉得会有一个好成绩，没什么可说的，今年的电子竞技基本全线爆炸，能赢就好。</p><h3 id="九月相比八月也多做了很多事情！"><a href="#九月相比八月也多做了很多事情！" class="headerlink" title="九月相比八月也多做了很多事情！"></a>九月相比八月也多做了很多事情！</h3><p>开了新的三个站：可道云盘，cheveretor图床，微擎，虽然最后一个还没有投入使用，但是小程序也是我接下来的一个目标吧！域名这件事情有一点点拖沓，管理局到现在还没有审核出来，不知道能不能通过，毕竟接下来我都要上课，估计很难接到电话。</p><p>开学的新鲜感在这一个月的时间里也逐渐消磨光了，我也慢慢的失去了学车的热情，国庆没有去过驾校一次，感觉接下来也不太可能回去学车了，不过我还是要尽量去看看。钱都用了，总要拿点什么回来！</p><p>还有就是呢通过了笔试，接下来估计要去参加他们的面试了，我自己估量了一下，是有点菜，什么都没有学会，flappy bird也做的稀烂，readme还有一大堆没有完成，我真的好慢啊，有点扰心。</p><p>不过呢，还是保留一分努力的念头，毕竟国庆玩的还是挺开心的。</p><p>最近有点疯狂种草相机，想要拥有一台自己的微单，看好Sony α6000，不过二手都要2500+有点承受不住，最近已经尽量在省钱了，希望在寒假出去玩之前拥有hhh，虽然我知道不太可能。</p><h3 id="还想说什么来着。"><a href="#还想说什么来着。" class="headerlink" title="还想说什么来着。"></a>还想说什么来着。</h3><p>看了《我和我的祖国》，真的有点想泪涌，有几个片段确实很感人，最喜欢升旗还有夺冠，白昼流星拍得有点智障，和其他的有比较大的差距，有点反感。</p><h4 id="还有几个目标，直接写在这里："><a href="#还有几个目标，直接写在这里：" class="headerlink" title="还有几个目标，直接写在这里："></a>还有几个目标，直接写在这里：</h4><ul><li>完成flappy bird</li><li>全站https</li><li>了解css，给导航栏写一个下划线动画</li><li>通过dian的熬测，或者是为熬测做一些准备。</li></ul><h4 id="先这些吧。万事安好"><a href="#先这些吧。万事安好" class="headerlink" title="先这些吧。万事安好"></a>先这些吧。万事安好</h4><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/old/1501570460224_.pic_hd.jpg" alt="1501570460224_.pic_hd.jpg/imgzip" border="0"></a></p><hr><p>[scode type=”blue”]下面是前几个月的总结[/scode]<br>[post cid=”179” /]</p>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 每月纪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>凌波日出</title>
      <link href="/2019/10/05/%E5%87%8C%E6%B3%A2%E6%97%A5%E5%87%BA/"/>
      <url>/2019/10/05/%E5%87%8C%E6%B3%A2%E6%97%A5%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>[Meting]<br>[Music server=”netease” id=”23705316” type=”song”/]<br>[/Meting]</p><h3 id="三天时间又重新认识了一边武汉，也发现了很多之前一直没有察觉到的风景。"><a href="#三天时间又重新认识了一边武汉，也发现了很多之前一直没有察觉到的风景。" class="headerlink" title="三天时间又重新认识了一边武汉，也发现了很多之前一直没有察觉到的风景。"></a>三天时间又重新认识了一边武汉，也发现了很多之前一直没有察觉到的风景。</h3><p>[scode type=”blue”]武大东湖旁的日出真的是太美了，那天早上六点钟到了凌波门的桥上，坐在桥沿真有一种坐在画里的错觉，右前方是几对男男女女，在浅浅的东湖里上上下下。[/scode]</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/old/1DF06824-D703-4CC4-B386-662A75A0B492.jpg" alt="1DF06824-D703-4CC4-B386-662A75A0B492.jpg" border="0"><h4 id="确实，很多时候需要有对照才能真切的感受到时间的流淌，我们几个坐在桥沿等待初阳从远岸层云中跃出，未见时，等待焦灼，初见时，深感惊艳，如梦如幻。"><a href="#确实，很多时候需要有对照才能真切的感受到时间的流淌，我们几个坐在桥沿等待初阳从远岸层云中跃出，未见时，等待焦灼，初见时，深感惊艳，如梦如幻。" class="headerlink" title="确实，很多时候需要有对照才能真切的感受到时间的流淌，我们几个坐在桥沿等待初阳从远岸层云中跃出，未见时，等待焦灼，初见时，深感惊艳，如梦如幻。"></a>确实，很多时候需要有对照才能真切的感受到时间的流淌，我们几个坐在桥沿等待初阳从远岸层云中跃出，未见时，等待焦灼，初见时，深感惊艳，如梦如幻。</h4><h3 id="还有这张，虽然有点可惜，没能把我们几个都拍入照。"><a href="#还有这张，虽然有点可惜，没能把我们几个都拍入照。" class="headerlink" title="还有这张，虽然有点可惜，没能把我们几个都拍入照。"></a>还有这张，虽然有点可惜，没能把我们几个都拍入照。</h3><h4 id="但这剪影真的是太棒了！！！"><a href="#但这剪影真的是太棒了！！！" class="headerlink" title="但这剪影真的是太棒了！！！"></a>但这剪影真的是太棒了！！！</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/old/IMG_0408.jpg" alt="IMG_0408.jpg" border="0"><p>要是那次去稻城的时候也能拍一张这样的照片就好了，可惜，没有重来的机会了。</p><h3 id="后来我们又坐到了七点钟，太阳也完全跃出了碎云。"><a href="#后来我们又坐到了七点钟，太阳也完全跃出了碎云。" class="headerlink" title="后来我们又坐到了七点钟，太阳也完全跃出了碎云。"></a>后来我们又坐到了七点钟，太阳也完全跃出了碎云。</h3><p>旁边游泳的人也都走了，钓鱼的大叔的一天也才刚刚开始。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/old/8316E57C-1712-4379-B3DD-3649C2E11F21.jpg" alt="8316E57C-1712-4379-B3DD-3649C2E11F21.jpg" border="0"><h3 id="后来，我们又去了武汉的昙华林，我之前一直想着要去昙华林看看，结果到了门外的商业中心，没有进到里面去。"><a href="#后来，我们又去了武汉的昙华林，我之前一直想着要去昙华林看看，结果到了门外的商业中心，没有进到里面去。" class="headerlink" title="后来，我们又去了武汉的昙华林，我之前一直想着要去昙华林看看，结果到了门外的商业中心，没有进到里面去。"></a>后来，我们又去了武汉的昙华林，我之前一直想着要去昙华林看看，结果到了门外的商业中心，没有进到里面去。</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/old/IMG_0223.jpg" alt="IMG_0223.jpg" border="0"><p>[scode type=”red”]好像在各位的衬托下没有那么黑了hhh[/scode]</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/old/IMG_0224.jpg" alt="IMG_0224.jpg" border="0"><blockquote><p>生活尚可，保持快乐。</p></blockquote><p>[scode type=”green”]再来一份TIME-LAPSE吧！！[/scode]</p><p><jw><a href="https://tanknee.cn/usr/uploads/2019/10/3502797405.mp4">https://tanknee.cn/usr/uploads/2019/10/3502797405.mp4</a></jw></p>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宇宙的每一秒都是这宇宙概率最小的事情</title>
      <link href="/2019/09/28/%E5%AE%87%E5%AE%99%E7%9A%84%E6%AF%8F%E4%B8%80%E7%A7%92%E9%83%BD%E6%98%AF%E8%BF%99%E5%AE%87%E5%AE%99%E6%A6%82%E7%8E%87%E6%9C%80%E5%B0%8F%E7%9A%84%E4%BA%8B%E6%83%85/"/>
      <url>/2019/09/28/%E5%AE%87%E5%AE%99%E7%9A%84%E6%AF%8F%E4%B8%80%E7%A7%92%E9%83%BD%E6%98%AF%E8%BF%99%E5%AE%87%E5%AE%99%E6%A6%82%E7%8E%87%E6%9C%80%E5%B0%8F%E7%9A%84%E4%BA%8B%E6%83%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="今天早上吃完早饭时突然想起了这句话。"><a href="#今天早上吃完早饭时突然想起了这句话。" class="headerlink" title="今天早上吃完早饭时突然想起了这句话。"></a>今天早上吃完早饭时突然想起了这句话。</h2><p>这世界，这宇宙，有无数的要素在影响着当下，或许，几分钟之后，就会有光粒到达太阳，世界崩塌毁灭；或许是二向箔也说不定。</p><h2 id="连上帝都只能掷骰子！"><a href="#连上帝都只能掷骰子！" class="headerlink" title="连上帝都只能掷骰子！"></a>连上帝都只能掷骰子！</h2><p>在这宇宙往后的几百亿年里，再次复现当下（18:32:30）的概率几乎是0，这概率小到哪怕宇宙轮回几百亿次也不会再次出现。<br>所以，我们的生命时独一无二的，就算把尺度放到宇宙的层次，也是绝无仅有，独一无二的。</p><p>感慨于生活之宽广，也沉醉于自然之神奇。</p>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20190926</title>
      <link href="/2019/09/26/20190926/"/>
      <url>/2019/09/26/20190926/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="20190926"><a href="#20190926" class="headerlink" title="20190926"></a>20190926</h2><!-- [Meting] --><!-- [Music server="netease" id="31545205" type="song"/] --><!-- [/Meting] --><blockquote><p>每日一曲哈哈哈哈</p></blockquote><p>今天没什么课，但是做了很多事情。</p><h2 id="1-我又又又报名了三大团队，我真的是头铁。"><a href="#1-我又又又报名了三大团队，我真的是头铁。" class="headerlink" title="1. 我又又又报名了三大团队，我真的是头铁。"></a>1. 我又又又报名了三大团队，我真的是头铁。</h2><p>但也算是想要挑战一下自己吧，我真的好废物，一事无成，想做点有意思的事情，所以这次报的是web。</p><h2 id="2-博客改了很多东西"><a href="#2-博客改了很多东西" class="headerlink" title="2. 博客改了很多东西"></a>2. 博客改了很多东西</h2><ul><li>全局的随机图片我都改成了bing的封面图，虽然bing只有几张图片可以调用，不过也还算不错了，感谢网上各位大神的api。虽然加载速度有一点点受影响，不过也还算事可以接受。后面应该会上CDN什么的吧，相对而言可以加速。</li><li>博客底部的信息栏添加了很多东西。点击总次数，博客运行时间，当前访问的系统，客户端，IP地址等等内容都可以在最下面展示，还不错，再过几天可以继续优化，学一学CSS3，php，js，html等等，还有很多可以拓展，现在的代码框架还是有一点问题，后期可以稍微调整一下。</li><li>还有就是缩略图的，原作者不想加缩略图，但我还是加了，我比较喜欢不同文章订制的感觉</li><li>前几天就上了的邮件插件终于可以用了，现在用的是腾讯企业邮箱的smtp服务器，发件人也比较好看美观了，有点快乐哈哈哈哈。</li></ul><p>好久没有用VPN了，算了，我不需要，毕竟还要备案的。</p><p>今后的话美化博客算是一个重要的兴趣动力了吧，其他的就随缘吧，Android随缘写，后台服务器可以慢慢来，淡定。</p>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 杂记 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在index主页显示文章缩略图</title>
      <link href="/2019/09/26/%E5%9C%A8index%E4%B8%BB%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E7%BC%A9%E7%95%A5%E5%9B%BE/"/>
      <url>/2019/09/26/%E5%9C%A8index%E4%B8%BB%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E7%BC%A9%E7%95%A5%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>因为这个主题的原作者没有直接提供在主界面的缩略图功能，所以我就准备自己写了。</strong></p><h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://cdn.tanknee.cn/usr/uploads/2019/09/1771333838.png" alt="image.png" border="0" />## 接下来是具体操作：在functions.php文件中添加这么一个函数：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgs_postthumb</span>(<span class="params"><span class="variable">$cid</span></span>) </span>&#123;</span><br><span class="line">   <span class="variable">$db</span> = <span class="title class_">Typecho_Db</span>::<span class="title function_ invoke__">get</span>();</span><br><span class="line">   <span class="variable">$rs</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">fetchRow</span>(<span class="variable">$db</span>-&gt;<span class="title function_ invoke__">select</span>(<span class="string">&#x27;table.contents.text&#x27;</span>)</span><br><span class="line">       -&gt;<span class="keyword">from</span>(<span class="string">&#x27;table.contents&#x27;</span>)</span><br><span class="line">       -&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;table.contents.cid=?&#x27;</span>, <span class="variable">$cid</span>)</span><br><span class="line">       -&gt;<span class="title function_ invoke__">order</span>(<span class="string">&#x27;table.contents.cid&#x27;</span>, <span class="title class_">Typecho_Db</span>::<span class="variable constant_">SORT_ASC</span>)</span><br><span class="line">       -&gt;<span class="title function_ invoke__">limit</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">   <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&quot;/\&lt;img.*?src\=\&quot;(.*?)\&quot;[^&gt;]*&gt;/i&quot;</span>, <span class="variable">$rs</span>[<span class="string">&#x27;text&#x27;</span>], <span class="variable">$thumbUrl</span>);  <span class="comment">//通过正则式获取图片地址</span></span><br><span class="line">   <span class="variable">$img_src</span> = <span class="variable">$thumbUrl</span>[<span class="number">1</span>][<span class="number">0</span>];  <span class="comment">//将赋值给img_src</span></span><br><span class="line">   <span class="variable">$img_counter</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$thumbUrl</span>[<span class="number">0</span>]);  <span class="comment">//一个src地址的计数器</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">switch</span> (<span class="variable">$img_counter</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="variable">$allPics</span> = <span class="number">1</span>:</span><br><span class="line">           <span class="keyword">echo</span> <span class="variable">$img_src</span>;  <span class="comment">//当找到一个src地址的时候，输出缩略图</span></span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">echo</span> theurl.<span class="string">&#x27;images/random/deu&#x27;</span>.<span class="title function_ invoke__">mt_rand</span>(<span class="number">1</span>,<span class="number">7</span>).<span class="string">&#x27;.jpg&#x27;</span>;<span class="comment">//没有找到的话就输出一张随机图像。</span></span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果这个函数与functions里的其他函数重名了就直接改一下！## 然后在index.php文件里找到这一段：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">post</span>-<span class="title">entry</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">feature</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">a</span> <span class="title">href</span>=&quot;&lt;?<span class="title">php</span> $<span class="title">this</span>-&gt;<span class="title">permalink</span>() ?&gt;&quot;&gt;&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">overlay</span>&quot;&gt;&lt;<span class="title">i</span> <span class="title">class</span>=&quot;<span class="title">iconfont</span>&quot;&gt;&amp;#<span class="title">xe61e</span>;&lt;/<span class="title">i</span>&gt;&lt;/<span class="title">div</span>&gt;&lt;<span class="title">img</span> <span class="title">src</span>=&quot;&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">                      <span class="title">echo</span> <span class="title">imgs_postthumb</span>($<span class="title">this</span>-&gt;<span class="title">cid</span>);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">; ?&gt;&quot;&gt;&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>改成我这个样子即可。<h3 id="需要注意的一点是，这个函数只能识别html格式插入的图片，其他格式暂时无法识别"><a href="#需要注意的一点是，这个函数只能识别html格式插入的图片，其他格式暂时无法识别" class="headerlink" title="需要注意的一点是，这个函数只能识别html格式插入的图片，其他格式暂时无法识别"></a>需要注意的一点是，这个函数只能识别html格式插入的图片，其他格式暂时无法识别</h3><p>参考文章：<a href="http://www.manongjc.com/article/745.html">Typecho获取文章第一张图片（缩略图）</a></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> img_src </tag>
            
            <tag> thumburl </tag>
            
            <tag> 缩略图 </tag>
            
            <tag> 函数 </tag>
            
            <tag> typecho_db </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我是杂乱碎片的收集者</title>
      <link href="/2019/09/21/%E6%88%91%E6%98%AF%E6%9D%82%E4%B9%B1%E7%A2%8E%E7%89%87%E7%9A%84%E6%94%B6%E9%9B%86%E8%80%85/"/>
      <url>/2019/09/21/%E6%88%91%E6%98%AF%E6%9D%82%E4%B9%B1%E7%A2%8E%E7%89%87%E7%9A%84%E6%94%B6%E9%9B%86%E8%80%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>大二了竟然还能不时收到学校里各大工作室的宣传单。<br>我用大一上的三个月时间证明了自己并不适合高强度的开发学习并重。<br>归根结底我还是一个自由散漫，懒散堕落的人。<br>不过我也会把我对崭新的，未从尝试的工具的探索热情一一贯彻下去<br>综述，我希望我今后最大的进步是把压力驱动转移到兴趣驱动上来，并且获得相应的一些成就。</p>]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九月二十一日纪实</title>
      <link href="/2019/09/21/%E4%B9%9D%E6%9C%88%E4%BA%8C%E5%8D%81%E4%B8%80%E6%97%A5%E7%BA%AA%E5%AE%9E/"/>
      <url>/2019/09/21/%E4%B9%9D%E6%9C%88%E4%BA%8C%E5%8D%81%E4%B8%80%E6%97%A5%E7%BA%AA%E5%AE%9E/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="让我康康我今天都做了什么事情"><a href="#让我康康我今天都做了什么事情" class="headerlink" title="让我康康我今天都做了什么事情"></a>让我康康我今天都做了什么事情</h2><p>今天确实还是做了很多事情的hhhh</p><ul><li>早上搭建了图库</li></ul><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/old/image541b4da5b84067f2.png" alt="image541b4da5b84067f2.png" border="0">-  然后配置了一下iterm2终端，oh my zsh的主题还不错<p><a href="https://pic.tanknee.cn/image/OYt"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/old/image.png" alt="image.png" border="0"></a></p><p>不过我还是感觉图床的响应速度没有那么快，加载比较慢<br><a href="https://pic.tanknee.cn/image/b4J"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/old/v2-e1adfc89e8ee22df349d3e606388baa5_r.jpg" alt="v2-e1adfc89e8ee22df349d3e606388baa5_r.jpg" border="0"></a></p><ul><li>还有就是mac风格代码块的插件添加，我真的好喜欢这个风格的代码块，虽然做不到原作者那么完美哈哈哈<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;hello jrotty!&#x27;</span>; <span class="meta">?&gt;</span></span><br><span class="line">高亮测试</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>没想到换了域名之后访问的人这么少，真的有点难过，我以为总会有几个的。算了，等过几天域名备案之后应该就会有所改善吧哈哈哈</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从wordpress转移到typecho</title>
      <link href="/2019/09/19/%E4%BB%8Ewordpress%E8%BD%AC%E7%A7%BB%E5%88%B0typecho/"/>
      <url>/2019/09/19/%E4%BB%8Ewordpress%E8%BD%AC%E7%A7%BB%E5%88%B0typecho/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我真的是受够了臃肿的wordpress！！！</p><p>诚然，wp很完善，该有的功能wp都有，而且十分的便捷，后台的管理系统也比typecho要完善的多得多得多，但是问题也出现的比typecho要多。访问速度也不如te。</p><p>这一次迁移遇到了很多的事情，不过还行都一一解决了。</p><ul><li>在使用wordpress2typecho这个插件时出现数据库查询失败的问题，查询百度后得出解决办法：</li></ul><p>首先是要开启debug模式，然后发现问题是typecho的数据库有一个字段的预设容积太小了，装不下wordpress的数据，于是我用phpadmin打开数据库，把agent这个字段扩大了十倍，然后就转移成功了</p><ul><li>还有一个问题就是固定链接一直不好用，导致网址里面出现index.php非常的不雅观，查询之后给出解决办法：</li></ul><p>在宝塔管理面板里把typecho的伪静态改为typecho模式然后重启服务器，最后在typecho的设置里更改就好了。</p><p>今天即刻把手机壳寄给我了，但是我已经申请退款了啊，我好烦躁，寄回去好像又要花自己的钱，我真的是欲哭无泪，感觉要把钱打水漂了，真的是好烦….</p><p>这个服务器还有好久才满三个月，我估计满三个月之后再去域名备案也要搞好久好久，要不是国外的太贵了，谁愿意这要搞呢..我心累。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 宝塔 </tag>
            
            <tag> wordpress </tag>
            
            <tag> 数据库 </tag>
            
            <tag> typecho </tag>
            
            <tag> 查询 </tag>
            
            <tag> phpadmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中秋快活噢</title>
      <link href="/2019/09/13/%E4%B8%AD%E7%A7%8B%E5%BF%AB%E6%B4%BB%E5%99%A2/"/>
      <url>/2019/09/13/%E4%B8%AD%E7%A7%8B%E5%BF%AB%E6%B4%BB%E5%99%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:paragraph --><p><strong>不管生活怎么样</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>一定要快乐啊，哈哈哈哈哈哈</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>好久没有来这里写了，最近一直在上课，虽然课表不是很满，但是确实是没有精力来照顾博客了。本来昨天是要写周报的日子，但是我忘记了哈哈哈哈哈，算了，不打紧。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>我永远爱加冰的红茶拿铁</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>南京大牌档的梅香排骨真的是太好吃了！！</strong></p><!-- /wp:paragraph --><!-- wp:paragraph {"align":"left"} --><p style="text-align:left"><strong>生活可期！</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>中秋快乐哈哈哈哈哈！！</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>但是这个怎么不显示了，我好气？？？？</strong></p><!-- /wp:paragraph --><!-- wp:image {"id":505} --><figure class="wp-block-image"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/09/1151568385195_.pic_.jpg" alt="" class="wp-image-505"/></figure><!-- /wp:image --><!-- wp:paragraph --><p></p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>规则星空，无尽下坠</title>
      <link href="/2019/09/07/%E8%A7%84%E5%88%99%E6%98%9F%E7%A9%BA-%E6%97%A0%E5%B0%BD%E4%B8%8B%E5%9D%A0/"/>
      <url>/2019/09/07/%E8%A7%84%E5%88%99%E6%98%9F%E7%A9%BA-%E6%97%A0%E5%B0%BD%E4%B8%8B%E5%9D%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:audio {"id":497} -->    <div id="aplayer-lTMWmnDI" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="1351520305" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><!-- /wp:audio --><!-- wp:quote --><blockquote class="wp-block-quote"><p>我活在0-10秒</p></blockquote><!-- /wp:quote --><!-- wp:quote --><blockquote class="wp-block-quote"><p>死在30-34秒</p></blockquote><!-- /wp:quote --><!-- wp:paragraph --><p><strong>这一次，让我落下去。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>就像所有结局期许的开头一样</strong></p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> meting </tag>
            
            <tag> netease </tag>
            
            <tag> type </tag>
            
            <tag> server </tag>
            
            <tag> 10秒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>能够占有生活的只能是生活</title>
      <link href="/2019/09/05/%E8%83%BD%E5%A4%9F%E5%8D%A0%E6%9C%89%E7%94%9F%E6%B4%BB%E7%9A%84%E5%8F%AA%E8%83%BD%E6%98%AF%E7%94%9F%E6%B4%BB/"/>
      <url>/2019/09/05/%E8%83%BD%E5%A4%9F%E5%8D%A0%E6%9C%89%E7%94%9F%E6%B4%BB%E7%9A%84%E5%8F%AA%E8%83%BD%E6%98%AF%E7%94%9F%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:paragraph --><p>生活总是稀疏而繁忙的，不可能每时每刻都有要紧的事情需要去做，也不是永远都无所事事。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>所谓的无所事事，不过是<strong>过分地期待而不得罢了</strong>。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>我想不会有那么一件单一的事情永远的占用我的日子，我想这也是应该的，而不应该像以前那样由于某些事情的失败或者挫折，而整日长久地沉沦与自责。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>生活需要进步。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>只要我还活着，那么人生就不会无意义。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p></p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 杂记 </tag>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01、03杂记</title>
      <link href="/2019/09/03/01-03%E6%9D%82%E8%AE%B0/"/>
      <url>/2019/09/03/01-03%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:heading --><h2 id="20190901">20190901</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong>九月的第一天。明天就要正式上课了，大物马原，这学期我要好好学习大雾，我可以我能行，搞定大物冲冲冲！！</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>不过今天没有去学车，有点可惜，不知道接下来还有多少时间可以去把车学完，要不国庆不回去直接留下来学车好了？应该也行吧，我还有机会hhh。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>rng赢了tes，虽然今年的skt很强，但是莫名地对rng很放心，不是因为强，而仅仅是心安，哈哈哈哈，挺有意思的事情。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>开学了，少熬夜，多读书，多跑步。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>冲冲冲！！！</strong></p><!-- /wp:paragraph --><!-- wp:separator --><hr class="wp-block-separator"/><!-- /wp:separator --><!-- wp:heading --><h2 id="20190903">20190903</h2><!-- /wp:heading --><!-- wp:paragraph --><p><strong>好卑微，开学的日子也没有那么开心。感觉自己有点找不到方向。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>别人都似乎有目标，都在坚定地走着，而我只是平平无奇地在大学里划水。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>突然感觉在打字的时候的思想活跃状况和在洗澡，亦或是睡前的状态是完全不一样的。打字的时候似乎只剩下了潜意识，而原本的构思大多被打乱了，往往是想到什么写什么。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>真的有点想去重庆玩吧。虽然不知道到底有什么这么吸引我。但是就是不想回家，也不想留下来学车。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>这个学期没有英语课了，所以突然解放了一部分的自我。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>害，手打字打的好疼。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>辣鸡天蚕土豆，更新更的这么慢，呀屎了啊？？</strong></p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 垃圾生活 </tag>
            
            <tag> 随想 </tag>
            
            <tag> 杂记 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordPress数据库连接失败问题</title>
      <link href="/2019/08/30/535/"/>
      <url>/2019/08/30/535/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="今天打开博客的时候遇到了一个错误提示：Error-establishing-a-database-connection"><a href="#今天打开博客的时候遇到了一个错误提示：Error-establishing-a-database-connection" class="headerlink" title="今天打开博客的时候遇到了一个错误提示：Error establishing a database connection"></a>今天打开博客的时候遇到了一个错误提示：Error establishing a database connection</h3><p>随后去百度寻找解决办法。</p><ol><li>重启Apache服务器 ： <code>service httpd restart</code> 这个方法失败，并且第一次直接重启的时候过程非常的缓慢，具体原因并不知晓。</li><li>修改 wp-config.php 文件，添加<code>define(&#39;WP_ALLOW_REPAIR&#39;, true);</code>，然后重启服务器。不过这个方法也失败，没有起作用</li><li>打开终端，登录mysql ：<code>mysql -u root -p</code>,会发现无法登录，如果报错是<code>Can&#39;t connect to local MySQL server through socket &#39;/var/lib/mysql/mysql.sock&#39; (111)</code> 那么直接重启MySQL服务器就好service mariadb start 。我遇到<code>Can&#39;t connect to local MySQL server through socket &#39;/var/lib/mysql/mysql.sock&#39; (2)</code> 也是可以这么解决。</li></ol><p>至此问题结束！!</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> server </tag>
            
            <tag> 文件 </tag>
            
            <tag> mysql </tag>
            
            <tag> 重启 </tag>
            
            <tag> lib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordPress开启https失败后无法打开网站问题的解决办法</title>
      <link href="/2019/08/29/536/"/>
      <url>/2019/08/29/536/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="本来想着看这个Chrome提示的不安全标志很不舒服，就准备开启https提升网站的安全性。"><a href="#本来想着看这个Chrome提示的不安全标志很不舒服，就准备开启https提升网站的安全性。" class="headerlink" title="本来想着看这个Chrome提示的不安全标志很不舒服，就准备开启https提升网站的安全性。"></a>本来想着看这个Chrome提示的不安全标志很不舒服，就准备开启https提升网站的安全性。</h3><p>但是万万没有想到这才是噩梦的开始。<br>我在阿里的SSL证书管理那里买了免费的ssl证书，然后给<a href="http://tanknee.cn">TankNee‘s Blog</a>解析上去，然后发现没什么用，查阅了网上的其他人的博客之后把WordPress设置里的域名设置直接给改了，我真的是哭了，然后就出现了怎么样都进入不了网站，连后台都访问不了。</p><h3 id="不过仔细看看问题的原因还是很简单的，因为你把http改成了https而你其他部分却还没有配置好。"><a href="#不过仔细看看问题的原因还是很简单的，因为你把http改成了https而你其他部分却还没有配置好。" class="headerlink" title="不过仔细看看问题的原因还是很简单的，因为你把http改成了https而你其他部分却还没有配置好。"></a>不过仔细看看问题的原因还是很简单的，因为你把http改成了https而你其他部分却还没有配置好。</h3><p>我预估这里跟.htaccess 这个文件也有点关系，所以我就不准备这么搞了。但是后台进不去根本就改不回来了啊，于是乎就接着找，根据网上的指导，重新改回来的本质方法就是把数据库里存着的那行条例改成http就好了。</p><p>但是我有没有MyPHPadmin，那可怎么办呢？</p><p>于是我就决定用ssh终端来修改。</p><ol><li>用终端连接服务器。</li><li><code>mysql -u root -p</code></li><li>输入你的密码</li><li><code>show databases; //切记最后要加分号，不然无法识别语句的结束</code></li><li><code>use wordpressdb; //不是那个名为wordpress的数据库</code></li><li><code>show tables;</code></li><li>选取需要修改的行，查看当前的数据<code>select * from  wp_options where option_id = 1; //这里option_id是一条字段</code>全部字段在这里：<code>option_id | option_name | option_value      | autoload</code></li><li>修改/更新当前行：<code>update wp_options set option_value = &#39;http://yoursite.com&#39; where option_id = 1;</code></li><li>再修改option_id=2的那一行</li><li><code>select * from  wp_options where option_id = 2;</code></li><li><code>update wp_options set option_value = &#39;http://yoursite.com&#39; where option_id = 2;</code></li></ol><p>然后直接打开域名就可以看到已经可以访问了。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 文件 </tag>
            
            <tag> ssl </tag>
            
            <tag> mysql </tag>
            
            <tag> wordpress </tag>
            
            <tag> 数据库 </tag>
            
            <tag> option_id </tag>
            
            <tag> wp_options </tag>
            
            <tag> where </tag>
            
            <tag> select </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>江滩秘境</title>
      <link href="/2019/08/29/%E6%B1%9F%E6%BB%A9%E7%A7%98%E5%A2%83/"/>
      <url>/2019/08/29/%E6%B1%9F%E6%BB%A9%E7%A7%98%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:paragraph --><p>哈，暑假终于是要结束了。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>明天室友就要回来了，在这里一个人住了这么多天，除了电费有点糟心，以及睡觉的时候要自己关灯，其他都还不错，畅想了一下日后的独居生活？</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>前两天去探索了武汉第三个（？）江滩，汉阳江滩？应该叫这个名字吧。晴川阁不用收门票，但是人还是很少，或许是因为人太少了所以不用收门票吧。</p><!-- /wp:paragraph --><!-- wp:quote --><blockquote class="wp-block-quote"><p>晴川历历汉阳树，芳草萋萋鹦鹉洲</p><cite>崔颢</cite></blockquote><!-- /wp:quote --><!-- wp:image {"id":479,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/UNADJUSTEDNONRAW_thumb_13e0-1024x768.jpg" alt="" class="wp-image-479"/><figcaption>禹王庙</figcaption></figure></div><!-- /wp:image --><!-- wp:image {"id":480,"align":"center","width":518,"height":389} --><div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/UNADJUSTEDNONRAW_mini_13eb.jpg" alt="" class="wp-image-480" width="518" height="389"/><figcaption>江滩景色</figcaption></figure></div><!-- /wp:image --><!-- wp:paragraph --><p>然后沿着龟山旁边的一条小路走到了汉阳造，路上皆是墙绘涂鸦，像是古板的武汉江城背上的一笔纹身。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p></p><!-- /wp:paragraph --><!-- wp:image {"id":481,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/pyWyXTdBRtGuIckPselurw_mini_13f9.jpg" alt="" class="wp-image-481"/><figcaption>Poker</figcaption></figure></div><!-- /wp:image --><!-- wp:image {"id":482,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/UNADJUSTEDNONRAW_mini_13dd.jpg" alt="" class="wp-image-482"/><figcaption>海绵宝宝</figcaption></figure></div><!-- /wp:image --><!-- wp:paragraph --><p>暑假很多事情都只完成了一半。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>书没怎么看，课程也没有去预习，学车也没有学完，墙纸也没贴好，摄影也没认真搞明白。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>害，真的没那么简单。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>夏天也快过去了。</p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随想 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 每月纪 </tag>
            
            <tag> 杂技 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>山高水远，路遥马亡</title>
      <link href="/2019/08/25/%E5%B1%B1%E9%AB%98%E6%B0%B4%E8%BF%9C-%E8%B7%AF%E9%81%A5%E9%A9%AC%E4%BA%A1/"/>
      <url>/2019/08/25/%E5%B1%B1%E9%AB%98%E6%B0%B4%E8%BF%9C-%E8%B7%AF%E9%81%A5%E9%A9%AC%E4%BA%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:image {"id":470} --><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/06/20200602925e5acf5f705.jpg" alt=""></p><!-- /wp:image --><!-- wp:paragraph --><p><strong>高考前三个月吧，把七堇年的《灯下尘》看了很多遍。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>着实很喜欢她的随笔，虽然说实话并不能给予我什么精神上的力量？更像是一种补给，在需要的时候出现了。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>我曾一直以为七堇年才二十来岁？到了签售会再去查了一下百度百科，发现原来都已经三十多了，害，其实也没差，旅行的小姑娘都看着挺年轻的，不过现在感觉看着更像是长辈姑姑阿姨了。</strong></p><!-- /wp:paragraph --><!-- wp:image {"id":471,"align":"center","width":384,"height":512} --><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/06/20200602aadebc29f6e51.jpg" alt=""></p><!-- /wp:image --><!-- wp:paragraph --><p><strong>第一次参加签售会，不知道其他的作家是什么样子，七堇年在签完字之后都会抬起头来对读者说了句谢谢，并报以微笑，确实让人心生好感。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>在排队的那几个小时里突然意识到了两件事情：</strong></p><!-- /wp:paragraph --><!-- wp:list {"ordered":true} --><ol><li><strong>我好像挺喜欢与别人对视的</strong></li><li><strong>我好像很脸盲</strong></li></ol><!-- /wp:list --><!-- wp:paragraph --><p><strong>也算是了了一个心愿吧，过得也算是完美，后会有期啦。</strong></p><!-- /wp:paragraph --><!-- wp:video {"id":472,"align":"center"} --><figure class="wp-block-video aligncenter"><figcaption>神奇的武汉一号线</figcaption></figure><!-- /wp:video --><!-- wp:image {"id":473,"align":"center","width":384,"height":512} --><div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/981566699619_.pic_hd-768x1024.jpg" alt="" class="wp-image-473" width="384" height="512"/></figure></div><!-- /wp:image --><!-- wp:quote --><blockquote class="wp-block-quote"><p>不熟悉与陌生才是相识相知的基石，不是吗？</p></blockquote><!-- /wp:quote -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫长的告别</title>
      <link href="/2019/08/23/%E6%BC%AB%E9%95%BF%E7%9A%84%E5%91%8A%E5%88%AB/"/>
      <url>/2019/08/23/%E6%BC%AB%E9%95%BF%E7%9A%84%E5%91%8A%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:quote --><blockquote class="wp-block-quote"><p>A guy like me has one big moment in his life , one perfect swing on the high trapeze.Then he spends the rest of his time trying not to fall off the sidewalk into the gutter.</p></blockquote><!-- /wp:quote --><!-- wp:paragraph --><p>今天是8月24号，距离我开博客已经有一个月的时间了。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>期间我写了十七篇，有发泄的，有想着口嗨的，也有认真总结写影评的。不知道有多少人在看，或许来来回回只有我一个人吧。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>害，多大点事呢。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>现在的生活从某种状态来讲还挺好的，虽然不知道好在哪里，未来难期。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>总是害怕说出自己期待的东西，担心还没触碰就堪堪消失。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>买了三四本书，这么多天了，一本都没有看完，倒是最便宜的那本不要钱的《漫长的告别》看的最快，挺喜欢马洛这个角色，不卑不亢，冷静沉着。总之，在潮湿的破败别墅里，外面的天是阴霾的，落魄的英国绅士倚在发旧的沙发上思索案件的走向，对我有种神秘的吸引力，难道侦探小说不就应该这样吗？</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>好了，明天也没什么行程，祝安。</p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 每月纪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，武汉</title>
      <link href="/2019/08/20/%E4%BD%A0%E5%A5%BD-%E6%AD%A6%E6%B1%89/"/>
      <url>/2019/08/20/%E4%BD%A0%E5%A5%BD-%E6%AD%A6%E6%B1%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:paragraph --><p><strong>认识武汉的第354天</strong></p><!-- /wp:paragraph --><!-- wp:image {"id":456,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/811566312594_.pic_hd-896x1024.jpg" alt="" class="wp-image-456"/><figcaption>Countdown！</figcaption></figure></div><!-- /wp:image --><!-- wp:paragraph --><p><strong>来了江城这么多天，终于记起来可以去江滩看看！</strong></p><!-- /wp:paragraph --><!-- wp:image {"id":457,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/821566312695_.pic_.png" alt="" class="wp-image-457"/><figcaption>江滩✅</figcaption></figure></div><!-- /wp:image --><!-- wp:paragraph --><p><strong>在没有风的江岸走才能真实的感受到武汉这个大农村的闷热，西岸的高楼很多，最高的那座甚至还在施工，确实也挺符合武汉大工地的社会定位。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>和傻蝉玩气枪打气球，打了十枪才中了两个？还是三个，被老板娘嘲讽 的无地自容，气死我了！！？？</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>江景还是挺漂亮的，七点过半，西岸的楼市全都亮起灯来，有点像农村的社会哥亮出自己的金板牙。</strong></p><!-- /wp:paragraph --><!-- wp:image {"id":460,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/831566313004_.pic_hd-1-1024x445.jpg" alt="" class="wp-image-460"/><figcaption>7：00的江滩</figcaption></figure></div><!-- /wp:image --><!-- wp:image {"id":459,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/841566313005_.pic_hd-1024x768.jpg" alt="" class="wp-image-459"/><figcaption>7：30的江滩</figcaption></figure></div><!-- /wp:image --><!-- wp:paragraph --><p><strong>还有彻夜轰鸣的长江大桥，桥下日夜不息的笙歌（实际上是大妈的广场舞）。</strong></p><!-- /wp:paragraph --><!-- wp:image {"id":461,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/851566313342_.pic_hd-1024x768.jpg" alt="" class="wp-image-461"/></figure></div><!-- /wp:image --><!-- wp:paragraph --><p><strong>甚至复兴路的地铁站也挺有意思</strong></p><!-- /wp:paragraph --><!-- wp:image {"id":462} --><figure class="wp-block-image"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/861566313345_.pic_hd-1024x768.jpg" alt="" class="wp-image-462"/></figure><!-- /wp:image --><!-- wp:image {"id":463,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/871566313348_.pic_hd-1024x768.jpg" alt="" class="wp-image-463"/></figure></div><!-- /wp:image --><!-- wp:paragraph --><p><strong>fine，今天除了气枪和那碗一般般的冰粉都挺完美的。</strong></p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>墙中语</title>
      <link href="/2019/08/19/%E5%A2%99%E4%B8%AD%E8%AF%AD/"/>
      <url>/2019/08/19/%E5%A2%99%E4%B8%AD%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:paragraph --><p><strong>偶然去外网看了一圈</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>真的是令人作呕</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>看得我晚饭加饮料都要吐出来了，真的是令人恶心</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>果然国家建立网络长城还是有很好的的作用的</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>至少国内的网络监管有力，环境也要文明得多</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>我吐辣，口区！</strong></p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 垃圾生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>少年秉性</title>
      <link href="/2019/08/17/%E5%B0%91%E5%B9%B4%E7%A7%89%E6%80%A7/"/>
      <url>/2019/08/17/%E5%B0%91%E5%B9%B4%E7%A7%89%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:heading {"level":4} --><h4>终于是又回到了武汉</h4><!-- /wp:heading --><!-- wp:paragraph --><p><strong>今天也算是经历了很多。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>中午在WenZhou站丢了外婆给的一百块，伤心了好一阵子，真的好难过，但是在得知有人也丢了钱而且也是外婆给的钱之后就有点庆幸？不对，反正就是没那么不开心了</strong></p><!-- /wp:paragraph --><!-- wp:image {"id":404,"align":"center","width":554,"height":738} --><div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/661566054205_.pic_hd-768x1024.jpg" alt="" class="wp-image-404" width="554" height="738"/><figcaption><strong>人来人往的WhuHan站</strong></figcaption></figure></div><!-- /wp:image --><!-- wp:paragraph --><p><strong>路上的景也见过好几回了，没有那么感兴趣了：浙江段的山山水水，也算有点了然于心。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>其实早就做好了一个人住十几天的准备，但是当我推开寝室的门，闻见略有霉味的空气，还是有一瞬间好想落泪。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>而后便是整理了下行李，收拾了一会儿，特地带来武汉的一鸣手撕面包也有点无味，本想好的很多整理宿舍的设想全都被我的懒惰打败了，真的是太难了。</strong></p><!-- /wp:paragraph --><!-- wp:image {"id":405} --><figure class="wp-block-image"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/681566054208_.pic_hd-768x1024.jpg" alt="" class="wp-image-405"/><figcaption>韵苑楼下</figcaption></figure><!-- /wp:image --><!-- wp:paragraph --><p><strong>真的好难受。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>虽然我知道我的难受来源于何处。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>说点开心的吧，下午买的几样东西全部都发货了。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>二十四号估计是能去西西弗看七堇年的。</strong></p><!-- /wp:paragraph --><!-- wp:image {"id":406,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/image.png" alt="" class="wp-image-406"/><figcaption>早早定好的todo</figcaption></figure></div><!-- /wp:image --><!-- wp:paragraph --><p><strong>本来想好的一句结尾一直没能想起来是什么。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>算了，遇事皆有期，凡事不强求。</strong></p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 垃圾生活 </tag>
            
            <tag> 杂记 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假倒计时-48Hours</title>
      <link href="/2019/08/15/%E6%9A%91%E5%81%87%E5%80%92%E8%AE%A1%E6%97%B6-48hours/"/>
      <url>/2019/08/15/%E6%9A%91%E5%81%87%E5%80%92%E8%AE%A1%E6%97%B6-48hours/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:heading {"level":4} --><h4>马上就要回去了。</h4><!-- /wp:heading --><!-- wp:paragraph --><p><strong>本来还要去帮我妈把钱存了，但是外面下雨了，不是很想要出门，夏天的温州有点湿热，但也并不难受，如果硬要和武汉的夏天相比较的话。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>欸，其实立秋都过了好久。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>武汉的夏天至少还有一个月的余额，而我的暑假时长却早早告急了。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>谷歌的实习岗位好酷炫，但是翻了一下他们的招聘目标，好像并没有对大二的弱鸡男大学生开放....</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>希望明年这个时候能有机会去大公司找点实习吧...虽然现在还是一条咸鱼，没有什么一技之长。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>这两天临近开学，莫名其妙的沉迷购置用具，艹，又想买台灯了，米家Pro真尼玛好看，那个充电的也是...回武汉后还准备把武汉的几个没去过的景点都去一遍，顺便给博客加一个画册页面好了，不知道服务器这么点大的内存够不够使...</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>好好学车</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>好好睡觉</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>好好“钓鱼”</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>新学期冲冲冲！！！</strong></p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人心中的成见是一座大山</title>
      <link href="/2019/08/13/%E4%BA%BA%E5%BF%83%E4%B8%AD%E7%9A%84%E6%88%90%E8%A7%81%E6%98%AF%E4%B8%80%E5%BA%A7%E5%A4%A7%E5%B1%B1/"/>
      <url>/2019/08/13/%E4%BA%BA%E5%BF%83%E4%B8%AD%E7%9A%84%E6%88%90%E8%A7%81%E6%98%AF%E4%B8%80%E5%BA%A7%E5%A4%A7%E5%B1%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:quote --><blockquote class="wp-block-quote"><p>很抱歉引用了哪吒里的一句流行台词，但却是时下没有比这句话更好的表达方式了。</p></blockquote><!-- /wp:quote --><!-- wp:paragraph --><p><strong>可能是带节奏的言论看多了的原因，经常看到某些文章就冒火，但是很多时候骂也不是，不骂也不是，心里堵得慌，这世上的傻逼还是很多的，微博，自媒体占一大半，妈的，一群垃圾，毁坏我的资讯内容质量，真他妈是社会的毒瘤。</strong></p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>下面是我觉得这两天看到的比较多的几点：</h4><!-- /wp:heading --><!-- wp:list {"ordered":true} --><ol><li>华为与其他各个厂商的对立</li><li>男女两性的对立</li><li>国外媒体言论的愚蠢</li></ol><!-- /wp:list --><!-- wp:heading {"level":4} --><h4>诚然，我认为最主要的原因只有一个：信息不对称！</h4><!-- /wp:heading --><!-- wp:paragraph --><p><strong>fine，以今天上了知乎热榜的那个关于穿衣自由的文章来说吧。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>公众号的读者与公众号的作者的地位是绝对不平等的。公众号只会给你他想要展示的那部分思想，真正的有力度的反驳的言论他根本不会放出来，不过这也很好理解，毕竟作为情感类公众号（？）还是需要一个良好的社会人设的。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>其实我也很奇怪，好好的影评不写为什么要去掺一脚穿衣不自由这个很容易引发社会讨论的话题。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>可能是为了流量吧。不过也必然是为了流量。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>当进入她的公众号时，我就已经失去了所谓的言论自由，我的语言表达能力不好，难以描述那种如鲠在喉的难受。如果问我还有什么类似的感受的话我觉得就是微博粉丝控评吧，硬生生把正常的宣传变成垃圾流量明星的垃圾作品宣展会，草，一群铁憨批。不过至少微博还有正常人能转发再评论，让我等低贱路人有机会看上一眼正常人的想法。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>而公众号就不一样了，他是100%控评，他甚至还可以专门挑出几个被带上了预定节奏的憨憨拉出来批斗一下以表自己的委屈？！！！！</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>呵呵，本来不想对其中的内容做什么评价，但是在知乎看到了编者来主动回答这个问题，真的是忍不住来骂人了，妈的垃圾。</strong></p><!-- /wp:paragraph --><!-- wp:image {"id":281,"align":"center","width":381,"height":512} --><div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/08/511565693780_.pic_hd-761x1024.jpg" alt="" class="wp-image-281" width="381" height="512"/></figure></div><!-- /wp:image --><!-- wp:quote --><blockquote class="wp-block-quote"><p>第一点</p><cite>你提了国外，他们就会觉得你崇洋媚外</cite></blockquote><!-- /wp:quote --><!-- wp:paragraph --><p>在？您是憨批吗？</p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>用几天短暂的旅游来定义国外开放自由的穿衣习惯 ？</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>用国外懒得鸟你的相对更孤僻的社会人格来证明外国人的眼光更加的开放？</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>用中东地区，韩国，比利时没有自由的例子来举证中国女性应该接着去争取获得自由？</strong></p><!-- /wp:paragraph --><!-- wp:quote --><blockquote class="wp-block-quote"><p>第二点</p><cite>你说人言可畏，大家要尊重，他直接告诉你国家没有不让，中国很自由，你写个屁。<br>所以到底为什么那天我帮男性发生的时候风平浪静，大部分女生在留言区都表示反思，到了女性这里就成了这样。<br>你们真是最魔幻的一群中国互联网冲浪手没搞清楚黑白就颐指气使的样子，真他妈丑。</cite></blockquote><!-- /wp:quote --><!-- wp:paragraph --><p><strong>我只想说，看你气急败坏没办法控制舆论的样子，真他妈爽。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>这他妈这么简单的一个道理你个做互联网自媒体的会想不清楚吗？</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>你让男性看美女你他妈还不允许别人评价，顺便给别人扣上了大帽子说你这是阻碍女性的穿衣自由？</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>我可透你个嘴，代码都写不过来谁他妈有兴趣看美女。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>而且，大多数男生who tm care 你管不管我穿什么？</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>我觉得男性真的很懒，不过你如果指责我，我一定要找你茬。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>我为什么没有对前面的话作解释，因为我觉得他说的对，知乎上大多数的高赞也不过是照着格式重新写了一遍，但是这并不是指责的理由。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>就允许你们发流量不允许大家伙蹭流量吗？</strong></p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>Fine 我今天也是一个被节奏带走的人呢</h4><!-- /wp:heading --><!-- wp:paragraph --><p><strong>冷静下来想想这究竟是为什么。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>是闲的太慌了没事情？</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>是九年义务教育没学好智商低？</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>或许都是。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>不过最近只要看到说什么要为女性争取这个权利争取那个权利的言论就很反感，因为这些言论里有一半是没有正视男女的个体生理差异，还有另外一半是对这个社会的高度不信任与敏感。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>恕我直言，在我的认知里女性的生存环境已经比别的性别要好得多的多了。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p><strong>或许这就是我心中的成见，我跟前的大山。</strong></p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 垃圾文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>散列表相关的几个算法</title>
      <link href="/2019/08/12/%E6%95%A3%E5%88%97%E8%A1%A8/"/>
      <url>/2019/08/12/%E6%95%A3%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>根据算法图解一书写的两个算法：<strong>广度优先算法</strong>以及<strong>狄克斯特拉算法</strong>：</p><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><p>散列表在Python中也称作字典，通常的定义方式为： <code>name = dict()</code></p><p>也可以写作： <code>name = &#123;&#125;</code></p><p>散列表中的每一项都由Key(键)和Value(值)组成。散列表的搜寻效率在一般情况下接近O(1)而在最糟糕的情况下为O(n),可见是一个非常好的数据结构。</p><h2 id="广度优先算法"><a href="#广度优先算法" class="headerlink" title="广度优先算法"></a>广度优先算法</h2><p>广度优先算法顾名思义就是优先寻找临近的可能对象，当临近的对象均不是所搜寻的目标时，再去寻找较远的可能对象。</p><h3 id="首先创建一张图，并填充对象："><a href="#首先创建一张图，并填充对象：" class="headerlink" title="首先创建一张图，并填充对象："></a>首先创建一张图，并填充对象：</h3><p><em>下面是广度优先算法</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">graph = &#123;&#125;</span><br><span class="line"></span><br><span class="line">graph[<span class="string">&quot;You&quot;</span>] = [<span class="string">&quot;Mike&quot;</span>, <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;TankNee&quot;</span>]</span><br><span class="line"></span><br><span class="line">graph[<span class="string">&quot;Mike&quot;</span>] = [<span class="string">&quot;Dem&quot;</span>, <span class="string">&quot;Hans&quot;</span>, <span class="string">&quot;Chem&quot;</span>]</span><br><span class="line"></span><br><span class="line">graph[<span class="string">&quot;Alice&quot;</span>] = [<span class="string">&quot;Pigh&quot;</span>]</span><br><span class="line"></span><br><span class="line">graph[<span class="string">&quot;TankNee&quot;</span>] = [<span class="string">&quot;Chem&quot;</span>]</span><br><span class="line"></span><br><span class="line">graph[<span class="string">&quot;Dem&quot;</span>] = []</span><br><span class="line"></span><br><span class="line">graph[<span class="string">&quot;Hans&quot;</span>] = []</span><br><span class="line"></span><br><span class="line">graph[<span class="string">&quot;Pigh&quot;</span>] = []</span><br><span class="line"></span><br><span class="line">graph[<span class="string">&quot;Chem&quot;</span>] = []</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中的对应关系为：</p><p><code>&#123;&#39;Mike&#39;: [&#39;Dem&#39;, &#39;Hans&#39;, &#39;Chem&#39;],</code></p><p> <code>&#39;Pigh&#39;: [],</code></p><p><code>&#39;Alice&#39;: [&#39;Pigh&#39;],</code></p><p><code>&#39;TankNee&#39;: [&#39;Chem&#39;],</code></p><p><code>&#39;Dem&#39;: [],</code></p><p><code>&#39;Hans&#39;: [],</code></p><p><code>&#39;You&#39;: [&#39;Mike&#39;, &#39;Alice&#39;, &#39;TankNee&#39;],</code></p><p><code>&#39;Chem&#39;: []&#125;</code></p><p>散列表是随机排布的，所以位置的前后并没有什么联系。并且其中的Key不仅仅可以对应一个值也可以对应一个列表。</p><h3 id="我们接下来还需要一个队列来实现FIFO（First-in-First-out）"><a href="#我们接下来还需要一个队列来实现FIFO（First-in-First-out）" class="headerlink" title="我们接下来还需要一个队列来实现FIFO（First in First out）"></a>我们接下来还需要一个队列来实现FIFO（First in First out）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">queue = deque() <span class="comment"># 生成一个队列</span></span><br><span class="line"></span><br><span class="line">queue += graph[<span class="string">&quot;You&quot;</span>] <span class="comment"># 将You对应的所有邻居都加入到队列里来</span></span><br><span class="line"></span><br><span class="line">searched = [] <span class="comment"># 一个列表，用来存放已经检查过的节点</span></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span> <span class="comment">#一个计数器</span></span><br></pre></td></tr></table></figure><h3 id="接下来再去实现搜寻的函数"><a href="#接下来再去实现搜寻的函数" class="headerlink" title="接下来再去实现搜寻的函数"></a>接下来再去实现搜寻的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">personIsTrader</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">if</span>(name[-<span class="number">1</span>] == <span class="string">&#x27;m&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">while</span>(queue):</span><br><span class="line">    people = queue.popleft() <span class="comment"># 将队列最左边的值弹出，然后赋值给people</span></span><br><span class="line">    <span class="keyword">if</span>(people <span class="keyword">not</span> <span class="keyword">in</span> searched):</span><br><span class="line">        <span class="keyword">if</span>(personIsTrader(people)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;He is Trader --&quot;</span>+people)</span><br><span class="line">            <span class="built_in">print</span>(count)</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            queue += graph[people] <span class="comment"># 如果这个额peop不是我们要搜寻的目标那么将他的邻居添加到队列的最后面</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="comment"># append 增加一个元素在列表的最末尾</span></span><br><span class="line">        <span class="comment"># 标记这个people已经完成检查</span></span><br><span class="line">        searched.append(people)</span><br></pre></td></tr></table></figure><h2 id="狄克斯特拉算法"><a href="#狄克斯特拉算法" class="headerlink" title="狄克斯特拉算法"></a>狄克斯特拉算法</h2><h3 id="原理：找出图中开销最小的节点并且保证没有开销更小的方式到达该节点"><a href="#原理：找出图中开销最小的节点并且保证没有开销更小的方式到达该节点" class="headerlink" title="原理：找出图中开销最小的节点并且保证没有开销更小的方式到达该节点"></a>原理：找出图中开销最小的节点并且保证没有开销更小的方式到达该节点</h3><p>下面是一个例子：</p><p>读者可以试着将这张加权图画出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pic = &#123;&#125;</span><br><span class="line">pic[<span class="string">&quot;Head&quot;</span>] = &#123;&#125;</span><br><span class="line">pic[<span class="string">&quot;Head&quot;</span>][<span class="string">&quot;A&quot;</span>] = <span class="number">6</span></span><br><span class="line">pic[<span class="string">&quot;Head&quot;</span>][<span class="string">&quot;B&quot;</span>] = <span class="number">2</span></span><br><span class="line">pic[<span class="string">&quot;A&quot;</span>] = &#123;&#125;</span><br><span class="line">pic[<span class="string">&quot;A&quot;</span>][<span class="string">&quot;Tail&quot;</span>] = <span class="number">1</span></span><br><span class="line">pic[<span class="string">&quot;B&quot;</span>] = &#123;&#125;</span><br><span class="line">pic[<span class="string">&quot;B&quot;</span>][<span class="string">&quot;A&quot;</span>] = <span class="number">3</span></span><br><span class="line">pic[<span class="string">&quot;B&quot;</span>][<span class="string">&quot;Tail&quot;</span>] = <span class="number">5</span></span><br><span class="line">pic[<span class="string">&quot;Tail&quot;</span>] = &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面是开销/权重表</span></span><br><span class="line"><span class="comment"># 记录当前到达这几个节点的最小开销</span></span><br><span class="line">infinity = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>) <span class="comment"># 无限大</span></span><br><span class="line">costs = &#123;&#125;</span><br><span class="line">costs[<span class="string">&quot;A&quot;</span>] = <span class="number">6</span></span><br><span class="line">costs[<span class="string">&quot;B&quot;</span>] = <span class="number">2</span></span><br><span class="line">costs[<span class="string">&quot;Tail&quot;</span>] = infinity</span><br><span class="line"><span class="comment"># 下面是父节点表</span></span><br><span class="line"><span class="comment"># 记录路的父节点</span></span><br><span class="line">parents = &#123;&#125;</span><br><span class="line">parents[<span class="string">&quot;A&quot;</span>] = <span class="string">&quot;Head&quot;</span></span><br><span class="line">parents[<span class="string">&quot;B&quot;</span>] = <span class="string">&quot;Head&quot;</span></span><br><span class="line">parents[<span class="string">&quot;Tail&quot;</span>] = <span class="literal">None</span></span><br><span class="line"><span class="comment"># 记录已经检查过的节点</span></span><br><span class="line">detected = []</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜寻距离最短的节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_lowest_cost_node</span>(<span class="params">cost</span>):</span><br><span class="line">    lowest_cost = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)</span><br><span class="line">    lowest_cost_node = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> cost: <span class="comment"># 遍历cost散列表</span></span><br><span class="line">        cos = cost[node] <span class="comment"># 把Key为node代表的值的Value传递给cos变量</span></span><br><span class="line">        <span class="comment"># 如果这个值比最小的值还要小并且这个节点没有被检查过那么就替换</span></span><br><span class="line">        <span class="keyword">if</span> cos &lt;= lowest_cost <span class="keyword">and</span> node <span class="keyword">not</span> <span class="keyword">in</span> detected:</span><br><span class="line">            lowest_cost = cos</span><br><span class="line">            lowest_cost_node = node</span><br><span class="line">    <span class="comment"># 将节点的键值作为返回值</span></span><br><span class="line">    <span class="keyword">return</span> lowest_cost_node</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">node = find_lowest_cost_node(costs)</span><br><span class="line"><span class="built_in">print</span> (costs)</span><br><span class="line"><span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    cost = costs[node]</span><br><span class="line">    neighbors = pic[node]</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> neighbors.keys():</span><br><span class="line">        All_cost = cost + neighbors[n]</span><br><span class="line">        <span class="keyword">if</span> All_cost &lt;= costs[n]:</span><br><span class="line">            costs[n] = All_cost</span><br><span class="line">            parents[n] = node</span><br><span class="line">    detected.append(node)</span><br><span class="line">    node = find_lowest_cost_node(costs)</span><br><span class="line"><span class="built_in">print</span> costs[<span class="string">&quot;Tail&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="适用范围：有向无环图用来寻找最小加权路"><a href="#适用范围：有向无环图用来寻找最小加权路" class="headerlink" title="适用范围：有向无环图用来寻找最小加权路"></a>适用范围：有向无环图用来寻找最小加权路</h3>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象 </tag>
            
            <tag> 列表 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 函数 </tag>
            
            <tag> 节点 </tag>
            
            <tag> graph </tag>
            
            <tag> pic </tag>
            
            <tag> people </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO的一些问题</title>
      <link href="/2019/08/11/538/"/>
      <url>/2019/08/11/538/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="在差不多踩了WordPress的很多坑之后再来写Hexo发现还是有很多坑，不过还好，这个本地的博客系统倒是很符合我的习惯，而且直接在我的喜欢的编译器里面写代码然后再用命令行上传到GitHub上显示真的是太酷了，真为创造出这个显示模式的人感到骄傲。"><a href="#在差不多踩了WordPress的很多坑之后再来写Hexo发现还是有很多坑，不过还好，这个本地的博客系统倒是很符合我的习惯，而且直接在我的喜欢的编译器里面写代码然后再用命令行上传到GitHub上显示真的是太酷了，真为创造出这个显示模式的人感到骄傲。" class="headerlink" title="在差不多踩了WordPress的很多坑之后再来写Hexo发现还是有很多坑，不过还好，这个本地的博客系统倒是很符合我的习惯，而且直接在我的喜欢的编译器里面写代码然后再用命令行上传到GitHub上显示真的是太酷了，真为创造出这个显示模式的人感到骄傲。"></a>在差不多踩了WordPress的很多坑之后再来写Hexo发现还是有很多坑，不过还好，这个本地的博客系统倒是很符合我的习惯，而且直接在我的喜欢的编译器里面写代码然后再用命令行上传到GitHub上显示真的是太酷了，真为创造出这个显示模式的人感到骄傲。</h4><h4 id="不过还是有一些不太优雅的地方。咱们撸代码的总是要讲究一个优美文雅是吧，typora不能识别Markdown文件以外的文件，而vscode的实时渲染好像也不太行，其实是我没有用过hhhh。接下来写一点遇到的坑："><a href="#不过还是有一些不太优雅的地方。咱们撸代码的总是要讲究一个优美文雅是吧，typora不能识别Markdown文件以外的文件，而vscode的实时渲染好像也不太行，其实是我没有用过hhhh。接下来写一点遇到的坑：" class="headerlink" title="不过还是有一些不太优雅的地方。咱们撸代码的总是要讲究一个优美文雅是吧，typora不能识别Markdown文件以外的文件，而vscode的实时渲染好像也不太行，其实是我没有用过hhhh。接下来写一点遇到的坑："></a>不过还是有一些不太优雅的地方。咱们撸代码的总是要讲究一个优美文雅是吧，typora不能识别Markdown文件以外的文件，而vscode的实时渲染好像也不太行，其实是我没有用过hhhh。接下来写一点遇到的坑：</h4><ol><li><strong>一直打不开域名</strong>：这个问题往往和该域名的解析有关。你需要先用阿里云或者腾讯云之类的去把这个域名解析了，你才能在GitHub Page中重定向这个域名。如果出现域名指向混乱的问题，我觉得最好把之前的解析全部删掉，推到重来。</li><li><strong>上传之后需要重新指定域名</strong>：这个问题也困扰了我很久，在不断地设置中我发现每次都是缺少一个名为CNAME的文件，其中仅包含你所要解析的域名，根据网上的一些博客可以知道我们只要在网站的根目录的source文件夹内新建一个名为CNAME的文件，没有后缀！！！！！，不要在这个文件名后面加上后缀！！然后再上传就好了，不会出现以上问题</li><li><strong>busuanzi插件的字数统计无法运行</strong>：这个也是一个坑，因为在config文件里查阅到的选项并没有提示你要安装对应的插件，而实际上必须要安装wordcount插件，否则无法使用字数统计，其他几个部分的统计字数的功能都需要这个插件，下面是安装过程：</li><li><code>npm hexo-wordcount —save</code> </li><li>在主题的config文件里找到wordcount相关的开关并打开就好了</li></ol><p>啊，好累啊，我不想写了，今天就到此为止吧。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 文件 </tag>
            
            <tag> 域名 </tag>
            
            <tag> 插件 </tag>
            
            <tag> 字数 </tag>
            
            <tag> 解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09杂记</title>
      <link href="/2019/08/09/09%E6%9D%82%E8%AE%B0/"/>
      <url>/2019/08/09/09%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:heading {"level":3,"align":"center"} --><h3 style="text-align:center">20190809</h3><!-- /wp:heading --><!-- wp:paragraph {"customFontSize":17} --><p style="font-size:17px">早上溜去医院划了波水，确实没什么动力，台风要来了。雨打着窗户。已经响了一整天了。</p><!-- /wp:paragraph --><!-- wp:paragraph {"customFontSize":17} --><p style="font-size:17px">莫名的喜欢台风，也不能说是喜欢吧，应该说是昏暗的暴雨环境给予人深度思考的空间。</p><!-- /wp:paragraph --><!-- wp:paragraph {"customFontSize":17} --><p style="font-size:17px">跟风黑了鹿晗和他的上海堡垒，但还是耐不住好奇，去把书找出来看了一遍。江南老贼写的东西，但又越看越不像是老贼写的，29岁的江南的笔力竟然也是如此的稚嫩，根本不像是龙族里那般的老练沉稳。</p><!-- /wp:paragraph --><!-- wp:paragraph {"customFontSize":17} --><p style="font-size:17px">或许是鹿晗代入的原因，看的时候江洋的脸总是被替换成鹿晗的脸，但又会被鹿晗奇奇怪怪的演技劝退，我总觉得的江洋更适合的是隐形守护者的男主。</p><!-- /wp:paragraph --><!-- wp:paragraph {"customFontSize":17} --><p style="font-size:17px">书里很少有过渡环节的描述，总是在和外星人拼斗的时候还会有柔情片段的上演，让人搞不清这究竟是爱情小说还是一部科幻/玄幻小说，老贼没搞明白，我也没有弄明白。</p><!-- /wp:paragraph --><!-- wp:separator --><hr class="wp-block-separator"/><!-- /wp:separator --><!-- wp:paragraph {"customFontSize":17} --><p style="font-size:17px">早上的时候，在二医的大堂里，人很少，零散的病人都有很明确的方向，不需要我这个二愣子志愿者给他们什么错误的帮助。</p><!-- /wp:paragraph --><!-- wp:paragraph {"customFontSize":17} --><p style="font-size:17px">也是，很多事情发生的时候根本不会寻求我的同意，它发生了，与我无干。</p><!-- /wp:paragraph --><!-- wp:paragraph {"customFontSize":17} --><p style="font-size:17px">以前，这一个多月来，很舍不得把联系方式删掉，最后一次的正常对话也停留在“生日快乐”，就像是林澜发给江洋的最后一句话是“晚安”。谁都没有在等什么东西，只是今天恰好台风来了，恰好我翻了一下微博，而后又去翻了翻朋友圈。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3,"align":"center"} --><h3 style="text-align:center">“不要再来偷偷看我啦”</h3><!-- /wp:heading --><!-- wp:heading {"level":3,"align":"center"} --><h3 style="text-align:center">我也不会再去偷偷看你啦</h3><!-- /wp:heading --><!-- wp:quote --><blockquote class="wp-block-quote"><p>很难形容那一段时间的情感，有点像东拼西凑，对自己也不会再抱有很高的期待以及很高的忠诚。</p><p>放得下是她的事情，放不下是我的事情</p><p>不拿她的标准来限制我的行为才应该是我的方式</p><p>这段日子挺难熬的，我不知道走不走的下去</p><p>但我已经至少想明白了一件事情</p><p>她将会是我人生中如林澜，诺诺亦或是其他般的一位</p><p>她将永远的十八岁</p><p>而我不会，我只会向前走</p><p>像生成于太平洋的风</p><p>终要刮过江南的丘陵</p><p>踏山遍水，有所依恋，也终将老去<br></p></blockquote><!-- /wp:quote --><!-- wp:separator --><hr class="wp-block-separator"/><!-- /wp:separator --><!-- wp:html --><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=300 height=86 src="//music.163.com/outchain/player?type=2&id=29848804&auto=0&height=66"></iframe><!-- /wp:html --><!-- wp:paragraph {"align":"center","fontSize":"medium"} --><p style="text-align:center" class="has-medium-font-size">今天还看了芒果冰的一期视频，听到无用歌时被惊艳到了：</p><!-- /wp:paragraph --><!-- wp:quote {"align":"center","className":"is-style-large"} --><blockquote style="text-align:center" class="wp-block-quote is-style-large"><p>天下无用</p><cite>天地何用?<br>不能席被,<br>风月何用?<br>不能饮食.<br>纤尘何用?<br>万物其中,<br>变化何用?<br>道法自成,<br>面壁何用?<br>不见滔滔,<br>棒喝何用?<br>一头大包.<br>生我何用?<br>不能欢笑,<br>灭我何用？<br>不减狂骄<br>踏歌而行八荒路,<br>物我两忘九逍遥。<br>芒鞋斗笠千年走,<br>万古长空一朝游.</cite></blockquote><!-- /wp:quote --><!-- wp:paragraph {"align":"center","fontSize":"medium"} --><p style="text-align:center" class="has-medium-font-size"><strong>生我何用 不能欢笑<br>灭我何用 不减狂骄</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p></p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20190808</title>
      <link href="/2019/08/08/20190808/"/>
      <url>/2019/08/08/20190808/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:paragraph --><p>早上没来得及吃药，也没来得及起床，早上过的有点累，中午摸鱼，又喝了酸奶，这几天好像真的不太行，要节制一点防止复发。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>算法的书拿来了，确实比较通俗易懂，但有时候会想想是不是有点过于简单了，hh，还是要好好学吧。</p><!-- /wp:paragraph --><!-- wp:list --><ul><li>去买点书看吧，晚风枕酒。确实在很多的瞬间都会怀疑自己做事情的动机，是因为真的喜欢，还是因为习惯。</li><li>尝试一下iOS13，反正也没几个月了，尝尝鲜也没有什么问题。</li><li>布置一下寝室吧</li><li>买一个好一点的椅子</li><li>买一个桌上小桌，买墙纸，把原来的撕掉。</li></ul><!-- /wp:list --><!-- wp:paragraph --><p>趁着还有点钱，买点能提升生活质量的东西，而不是把钱浪费在不重要的地方，不过有时候趟雷也是一件很有意义的事情，。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>也不要忘记了多写字，感觉现在比以前要好的多了，表达的能力也有所长进</p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 垃圾生活 </tag>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七月July</title>
      <link href="/2019/08/06/179/"/>
      <url>/2019/08/06/179/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 style="text-align:center">深夜，暴雨和雷霆</h3><!-- wp:image {"id":180} --><figure class="wp-block-image"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/201912194a8b701858b53.png"/></figure><!-- /wp:image --><!-- wp:paragraph --><p><strong>写总结这件事情其实已经在我的待办事项里面躺了很久了，每周写周报好像已经不太现实了，太懒了，没得救了。</strong></p><!-- /wp:paragraph --><!-- wp:heading {"level":3,"align":"center"} --><h3 style="text-align:center">七月有三十一天</h3><!-- /wp:heading --><!-- wp:list --><ul><li><strong>前十天庸庸碌碌，磨蹭着写了五六天的C++，最后写出来一个半死不活的记账本，好像确实除了一些搬砖的内容之外就没学到什么东西了。</strong></li></ul><!-- /wp:list --><!-- wp:list --><ul><li><strong>然后在寝室躺了两天，期间和来武汉的zzl畅谈了好几个晚上，确实也挺开心的吧。不能总把新老朋友拿来比较，不同的人都有不同的特点</strong></li></ul><!-- /wp:list --><!-- wp:image {"id":189} --><figure class="wp-block-image"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/2019121934fc2b47a4f5c.png"/></figure><!-- /wp:image --><!-- wp:list --><ul><li><strong>而后十二号便去了南京。南京真是一个从名字开始就让我很喜欢的城市，没有北京给人的那种霸道，也没有扬州给以我的小家气魄。要不是考不上南大，我肯定去南京（假装马后炮）。//大牌档太好吃了，我永远爱南京大牌档</strong></li></ul><!-- /wp:list --><!-- wp:image {"id":186} --><figure class="wp-block-image"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/2019121939ce893d7e40f.png"/></figure><!-- /wp:image --><!-- wp:list --><ul><li><strong>再后来又去了镇江，去了扬州，不知在这三四个火车站里来来回回上上下下了多少遍。有感叹过江苏城市的破旧和朴素，也会感慨江南小镇的秀丽和精致，有对京杭运河的无言，亦有对运河边声浪滔滔的广场舞的欲言又止。真像是活在过去的人，却又挂着今人的衣裳。</strong></li></ul><!-- /wp:list --><!-- wp:image {"id":192} --><figure class="wp-block-image"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191219b596fc71b7bcd.png"/></figure><!-- /wp:image --><!-- wp:list --><ul><li><strong>在青松客栈的老爷爷家里躺到17号后，就坐着老爷爷的小电瓶，离开了。也顺便见识了一下扬州站火车汽车一家亲的神奇建筑规划。</strong></li></ul><!-- /wp:list --><!-- wp:image {"id":195} --><figure class="wp-block-image"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191219010db17ab4f09.png"/></figure><!-- /wp:image --><!-- wp:heading {"level":3,"align":"center"} --><h3 style="text-align:center">暑假是从第十七天开始的</h3><!-- /wp:heading --><!-- wp:paragraph --><p><strong>先是被拉去活活当了四五天的苦工，整天扒拉这块的废料，或者打包纸箱，或者打打表格，然后就又是瘫了四五天，整天鼓捣服务器，网站，本事没学到什么，倒是命令行越打越能耐了，也慢慢的喜欢上了OS X，苹果家的玩意儿真是好看，没有话说。（MacBook Pro Yes！！！）等我有钱了一定去买一台真的MacBook Pro。</strong></p><!-- /wp:paragraph --><!-- wp:image {"id":201} --><figure class="wp-block-image"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191219eab547aab8f15.png/imgzip"/></figure><!-- /wp:image --><!-- wp:paragraph --><p><strong>确实慢慢看淡放轻松了很多，也不再死磕一个死胡同了。明白了差别，也就不会接着跟自己赌气了。没意义。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p>再多的思考也抵不过晚间趴在桌子上时模糊而撕裂的痛苦。<strong>就像是从家里出门等公交，却突然发现家里的钥匙没带，而且门还没关，这时你往前走也好，死命往回跑也好，都阻止不了你将会晒到双倍的太阳的事实</strong>。</p><!-- /wp:paragraph --><!-- wp:paragraph {"align":"center"} --><p style="text-align:center"><strong>诶，有时候下雨还挺美好的</strong></p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每月纪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2001 太空漫游</title>
      <link href="/2019/08/02/2001-%E5%A4%AA%E7%A9%BA%E6%BC%AB%E6%B8%B8/"/>
      <url>/2019/08/02/2001-%E5%A4%AA%E7%A9%BA%E6%BC%AB%E6%B8%B8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:paragraph {"fontSize":"medium"} --><p class="has-medium-font-size">花了三天左右把2001太空漫游看了一遍，这本书躺在我的kindle里已经很久了，最初在动车上翻出来看，确实是看的我索然无味。nmd，wsm，为什么要在好好的科幻小说前写一段人猿奇幻历险？我这么庸俗的人根本看不进去好吗？</p><!-- /wp:paragraph --><!-- wp:paragraph {"align":"center","fontSize":"medium"} --><p style="text-align:center" class="has-medium-font-size"><strong>当然，除了那块黑石。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph {"align":"center","fontSize":"medium"} --><p style="text-align:center" class="has-medium-font-size"><strong>寂静光滑</strong></p><!-- /wp:paragraph --><!-- wp:paragraph {"fontSize":"medium"} --><p class="has-medium-font-size">顿时就想起了丁仪和那个同样光滑的让人觉得无从击破的水滴。</p><!-- /wp:paragraph --><!-- wp:paragraph {"fontSize":"medium"} --><p class="has-medium-font-size">大刘说过，他的作品多是对阿瑟的2001太空漫游的拙劣模仿，这部分应该是算作致敬吧。同样的未知文明，同样的无懈可击，同样的神秘绝望。看着太空漫游影片里的黑石场景，简直是喘不过气来，<strong>压抑，密不透风</strong>。弗洛伊德博士伸出手，谨慎的触碰无暇的黑石，像极了百万年前的人猿，好奇而恐惧。</p><!-- /wp:paragraph --><!-- wp:paragraph {"fontSize":"medium"} --><p class="has-medium-font-size">文明起源曾有一个推测：外星人点化人类，而后，人类才有了文明。阿瑟的黑石，就与点化不谋而合。在恰当的时机，恰当的地点出现，就好像，有一双眼睛，在观察着人类，或者说是，监视着人类。</p><!-- /wp:paragraph --><!-- wp:paragraph {"fontSize":"medium"} --><p class="has-medium-font-size"><strong>第一块黑石让人猿走向人类，第二块促使人类走向土星，走向深空。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph {"fontSize":"medium"} --><p class="has-medium-font-size">说是促使，而实际上极为平淡，不管是书还是影片，对白极少，连过激的动作也很少见，没有传统科幻表现形式里的反抗，对立，战争，爱情。唯一剩下的只有探索。</p><!-- /wp:paragraph --><!-- wp:image {"id":168,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/201912192250b7595024c.png"/></figure></div><!-- /wp:image --><!-- wp:list --><ul><li><strong>对人工智能的探索</strong></li></ul><!-- /wp:list --><!-- wp:image {"id":173,"align":"center","width":583,"height":292} --><div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/201912194bfc54973e11c.png"/></figure></div><!-- /wp:image --><!-- wp:list --><ul><li><strong>对未知深空的探索</strong></li></ul><!-- /wp:list --><!-- wp:image {"id":170,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191219df93c3d1b2dfd.png"/></figure></div><!-- /wp:image --><!-- wp:list --><ul><li><strong>对古今寰宇的探索</strong></li></ul><!-- /wp:list --><!-- wp:image {"id":172,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191219796a5a112274b.png"/></figure></div><!-- /wp:image --><!-- wp:paragraph {"fontSize":"medium"} --><p class="has-medium-font-size">着实很惊艳，没有冲动，没有暴力，只剩如一潭静水般的宁静，一如影片里HAL的声音，就算Bowman在拆着他的逻辑芯片，他也不过是说了一句，“<strong>我害怕</strong>”。</p><!-- /wp:paragraph --><!-- wp:image {"id":171,"align":"center","width":579,"height":255} --><div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191219e30fea92c163f.png"/></figure></div><!-- /wp:image --><!-- wp:paragraph {"fontSize":"medium"} --><p class="has-medium-font-size">很难想象这是写于半个世纪之前的科幻作品，那时，第一台计算机才出现了二十余年，而阿瑟-克拉克就已经开始讨论人工智能的可行性以及对人工智能的深层探讨，而其中的许多设定也极为的超前，至少，在现在看来，并没有十分的落伍。</p><!-- /wp:paragraph --><!-- wp:image {"id":169,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2019/12/20191219677b35b0016b9.png/imgzip"/></figure></div><!-- /wp:image --><!-- wp:paragraph {"fontSize":"medium"} --><p class="has-medium-font-size">故事的最后，Bowman穿过星之门，变成了星童。他注视着自己的蔚蓝色的家园，“令人惊讶的注意力”，他凝视着家园的过去，现在和未来，他是神，但他也是虚无。</p><!-- /wp:paragraph --><!-- wp:paragraph {"fontSize":"medium"} --><p class="has-medium-font-size">不管是电影还是书，都有一种无法言说的老旧感。就好像崭新的白衬衫，用上了一层黄旧的滤镜，准确的说，就好像是高中化学书的人都活了过来。再配合少之又少的对白，恢弘磅礴的交响乐配乐，我一次次质疑自己是不是在看老派的话剧表演，而不是一部超越时代的科幻巨作，太空人们那机械鬼畜的步态走姿，<strong>昏暗地面，冷酷月光</strong>，像极了非洲大地上的邪教祭典，人们对着“神”顶礼膜拜，诚惶诚恐，不知所措为何。</p><!-- /wp:paragraph --><!-- wp:paragraph {"fontSize":"medium"} --><p class="has-medium-font-size">想写影评好久了，本是想先写哪吒的影评，结果一直搁着没有写，只写了个标题，剩的有点脑袋发空，总感觉写着写着就变成观后感了，写了这么多年作文，会写的好像也就是中学作文了。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3} --><h3>七月再见，八月你好</h3><!-- /wp:heading -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影评 </tag>
            
            <tag> 科幻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无话可说</title>
      <link href="/2019/07/29/%E6%97%A0%E8%AF%9D%E5%8F%AF%E8%AF%B4/"/>
      <url>/2019/07/29/%E6%97%A0%E8%AF%9D%E5%8F%AF%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:paragraph {"align":"center"} --><p style="text-align:center">好像每天都被我爸我妈催着去干着干那，迟一两分钟便会得到暴躁臭骂一顿。</p><!-- /wp:paragraph --><!-- wp:paragraph {"align":"center"} --><p style="text-align:center">不活啦，我要回学校</p><!-- /wp:paragraph --><!-- wp:paragraph {"align":"center"} --><p style="text-align:center">算了算了，活命要紧，毕竟<strong>无钱</strong>。</p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 垃圾生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android6.0及更高版本动态获取权限</title>
      <link href="/2019/07/28/android6-0%E5%8F%8A%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E6%9D%83%E9%99%90/"/>
      <url>/2019/07/28/android6-0%E5%8F%8A%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Android 6.0及其更高版本中，即API&gt;=23之后的版本中某些受保护的权限无法直接通过Manifest来直接默认获取，只能通过动态获取，这样做的好处是显而易见的，可以让权限用在该用的地方。</p><p>动态获取权限要做的是这几件事情：</p><ul><li>判断当前的系统版本，API版本的多少来确定使用哪种获取权限的方法，如果API小于23那么就不需要发起权限获取操作。</li><li>如果API大于或等于23那么就发起权限获取，<code>ActivityCompat.requestPermissions(this,new String[]&#123;Manifest.permission.CAMERA&#125;,1);</code> <code>this</code> 为当前的操作主体Activity，string数组内为所请求的权限，可见可以同时获取多个权限，最后一位是请求码requestcode。</li><li>最后一步是确定回调函数onRequestPermissionsResult(int requestCode,String[] Permissions,int[] grantResult) 其中grantResult数组的第一位若等于PackageManager.PERMISSION_GRANTED那么说明权限被授予否则权限授予失败。</li></ul><p><strong>接下来show you the code：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="comment">//权限申请函数</span></span><br><span class="line">            requestCameraPermission();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            Log.d(<span class="string">&quot;CameraDemo Start&quot;</span>,e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">requestCameraPermission</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//判断SDK版本是否大于23</span></span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">checkCameraPermission</span> <span class="operator">=</span> ContextCompat.checkSelfPermission(<span class="built_in">this</span>, Manifest.permission.CAMERA);</span><br><span class="line">        <span class="keyword">if</span>(checkCameraPermission != PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">            <span class="comment">//进入这个部分表示程序没有该权限</span></span><br><span class="line">            ActivityCompat.requestPermissions(<span class="built_in">this</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;Manifest.permission.CAMERA&#125;,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="built_in">this</span>,<span class="string">&quot;相机权限已获取成功&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">            onCallCamera();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="built_in">this</span>,<span class="string">&quot;API小于23无需获取权限，只需要声明即可&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">        onCallCamera();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onRequestPermissionsResult</span><span class="params">(<span class="type">int</span> requestCode,String[] Permissions,<span class="type">int</span>[] grantResult)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (requestCode)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span>(grantResult[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">                <span class="comment">//TODO 相机调用函数</span></span><br><span class="line">                onCallCamera();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>,<span class="string">&quot;权限被拒绝&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">super</span>.onRequestPermissionsResult(requestCode,Permissions,grantResult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">onCallCamera</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Intent</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line">    startActivityForResult(i, <span class="number">1</span>);</span><br><span class="line">    Toast.makeText(MainActivity.<span class="built_in">this</span>, <span class="string">&quot;函数调用成功&quot;</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestcode, <span class="type">int</span> resultCode, Intent data)</span>&#123;</span><br><span class="line">  <span class="comment">//接收camera拍摄下来的照片回传到activity中</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(requestcode !=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="built_in">super</span>.onActivityResult(requestcode,resultCode,data);</span><br><span class="line">        <span class="type">Bundle</span> <span class="variable">extras</span> <span class="operator">=</span> data.getExtras();</span><br><span class="line">        <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> (Bitmap)extras.get(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">        imageView.setImageBitmap(bitmap);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Camera&quot;</span>,e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">​</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另外一个动态获取权限的思路：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Intent</span> <span class="variable">i</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Intent</span>(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class="line"><span class="keyword">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class="built_in">this</span>,Manifest.permission.CAMERA)!=PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">  ActivityCompat.requestPermissions(MainActivity.<span class="built_in">this</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;Manifest.permission.CAMERA&#125;,<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    startActivityForResult(i,<span class="number">1</span>);</span><br><span class="line">  Toast.makeText(MainActivity.<span class="built_in">this</span>,<span class="string">&quot;test_1&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">&#125;</span><br><span class="line">startActivityForResult(i,<span class="number">1</span>);</span><br><span class="line">Toast.makeText(MainActivity.<span class="built_in">this</span>,<span class="string">&quot;test_2&quot;</span>,Toast.LENGTH_LONG).show();</span><br></pre></td></tr></table></figure><p>核心部分是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ContextCompat.checkSelfPermission(MainActivity.<span class="built_in">this</span>,Manifest.permission.CAMERA)!=PackageManager.PERMISSION_GRANTED)&#123;   ActivityCompat.requestPermissions(MainActivity.<span class="built_in">this</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;Manifest.permission.CAMERA&#125;,<span class="number">1</span>); &#125; </span><br></pre></td></tr></table></figure><p>其中的本质就是判断权限是否存在，然后若是不存在该权限那么就直接申请。但有一个坏处是这里申请的权限是写死的，最好的解决办法是写一个函数便于调用。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>骂得开心，活得尽兴</title>
      <link href="/2019/07/27/%E9%AA%82%E5%BE%97%E5%BC%80%E5%BF%83-%E6%B4%BB%E5%BE%97%E5%B0%BD%E5%85%B4/"/>
      <url>/2019/07/27/%E9%AA%82%E5%BE%97%E5%BC%80%E5%BF%83-%E6%B4%BB%E5%BE%97%E5%B0%BD%E5%85%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:paragraph --><p>  长时间远离微博的我也是真的越来越<strong>不暴躁</strong>了，虽然看到逼乎上各种带着有色眼镜的回答时还是会有一些受感染，不过我也确实是这样的人。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>  越来越不在意手机的电量了，以前每每到二十以下就已经慌得不行不行的了，现在呢，随他去吧，反正也<strong>无人要紧地找我聊天。</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p>  这两天也总是被我爸/我爷爷/我妈从睡梦中叫醒，谁能想到我现在天天八点半就醒来了呢？？？？我一点都不想啊。早上的日子大多是在肮脏的车间帮忙里度过的，其实呢，也并没有特别的忙碌，就是热了点，其他的也不是不能忍受，日子还是在正常的过着嘛。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>  爷爷老是来问我什么时候回学校，这才有些明了竟然还有二十天，我才回来了十天？？但我还是没有吃到糯米饭，因为无人值得我早期跑到hq/yq去吃一顿早点，毕竟太热了是吧...</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>  昨夜又梦见了她，真的很烦噢。在一起的时候梦到的次数都没有这段时间多，每次醒来的失落感真的是令人沮丧，我有点烦躁。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>  其实我还是挺在意lqy这个逼的关系的？不过该骂还是要骂，该口嗨的时候不能打住。不过这个逼不欢迎老子去昆明真的有点烦哦，管他呢，吃饭要紧。</p><!-- /wp:paragraph --><!-- wp:image {"id":148,"align":"center"} --><div class="wp-block-image"><figure class="aligncenter"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://wordpress.tanknee.cn/wp-content/uploads/2019/07/1564222068.png" alt="" class="wp-image-148"/><figcaption>开开心心骂人</figcaption></figure></div><!-- /wp:image --><!-- wp:paragraph --><p>  <strong>冷静想想，绝大多数事情你自己不说出口压根没有人会想到你这个逼竟然是这么想的，说多惹人烦是矫情做作，不说憋得慌是自作自受，自我摧残，还不如该口嗨口嗨，该骂人骂人，活得尽兴不比窝窝囊囊过日子舒服?</strong></p><!-- /wp:paragraph --><!-- wp:paragraph --><p>  <em>老子再也不跟这个杂那个杂对线了，骂又骂不过还惹得老子自己心慌</em>，nmd，还是敲代码有意思，还不用跟这个傻逼那个傻逼沟通，自己智障了也不会有人跳出来跟个猴子一样嘲讽。</p><!-- /wp:paragraph --><!-- wp:paragraph {"align":"center"} --><p style="text-align:center"><strong>  骂的真爽//昨天球打了身上可真他娘的疼。</strong></p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 垃圾生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我感受到了深深的恶意</title>
      <link href="/2019/07/27/%E6%88%91%E6%84%9F%E5%8F%97%E5%88%B0%E4%BA%86%E6%B7%B1%E6%B7%B1%E7%9A%84%E6%81%B6%E6%84%8F/"/>
      <url>/2019/07/27/%E6%88%91%E6%84%9F%E5%8F%97%E5%88%B0%E4%BA%86%E6%B7%B1%E6%B7%B1%E7%9A%84%E6%81%B6%E6%84%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:paragraph --><p>只想骂人</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>为什么固定链接搞得我这么痛苦，已经折磨了我三天了，网上的方法几乎都试了个遍，但还是没有解决。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>气得我又去阿里云买了一个WordPress镜像的学生服务器，但为什么这个新买来的也是一堆大坑？？？？？？</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>我真的是气的黑人问号。</p><!-- /wp:paragraph --><!-- wp:image {"id":142} --><figure class="wp-block-image"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="http://47.102.45.176:8787/wp-content/uploads/2019/07/WeChat680d5e808ffa5c13a451dd00f0a9f0b8.png" alt="" class="wp-image-142"/><figcaption>mmp</figcaption></figure><!-- /wp:image --><!-- wp:paragraph --><p>老子给你关联了域名，浏览器竟然还会指向前一个博客，里面登录过程也是一个赛一个混乱，老子现在可以退款吗？？？？</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>我这两天真的是暴风贫穷，一想到过两天就下个月了就要给奶茶老公还钱我就感到了一分害怕。</p><!-- /wp:paragraph --><!-- wp:image {"id":138} --><figure class="wp-block-image"><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="http://47.102.45.176:8787/wp-content/uploads/2019/07/WeChat7b4d8f24394faf8b7652646595343cfd.png" alt="" class="wp-image-138"/><figcaption>nmd，wsm</figcaption></figure><!-- /wp:image --><!-- wp:paragraph --><p>看到这个标志我又有点火大，买了才想起来国内服务器绑定域名还要去备案mmp，一想到备案就想起来那个神奇的拍照环节，竟然还要搞个特定的背景，站在背景前拍摄才行，mmmmmmp。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>真的是气哦，又浪费了一笔钱。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>ftp也是，搞了一个下午都没有搞起来，我觉得我这几天是不是有问题，什么坑都没解决还往一个又一个的大坑里面跳。</p><!-- /wp:paragraph --><!-- wp:heading {"level":3,"align":"center"} --><h3 style="text-align:center">我死了，没救了</h3><!-- /wp:heading -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 垃圾生活 </tag>
            
            <tag> 谁来救救我 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>风越过山丘与我相会</title>
      <link href="/2019/07/25/%E9%A3%8E%E8%B6%8A%E8%BF%87%E5%B1%B1%E4%B8%98%E4%B8%8E%E6%88%91%E7%9B%B8%E4%BC%9A/"/>
      <url>/2019/07/25/%E9%A3%8E%E8%B6%8A%E8%BF%87%E5%B1%B1%E4%B8%98%E4%B8%8E%E6%88%91%E7%9B%B8%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:heading {"level":4,"align":"center"} --><h4 style="text-align:center">七月总是跌宕</h4><!-- /wp:heading --><!-- wp:paragraph --><p>  还记得去年七月，初了是在六月末的动车上，惊奇也好，无感也好，都敌不过不能吹着风的失望。窗外迤逦的风景，与我毫不相干。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>  说来也是有趣，在车上接到邀约，邀我一起去川地旅游，诚然，我在那时确实很喜欢那位女孩子，喜欢到哪怕是过后找了女友也会偶尔想起，但自这场川蜀游结束后却让我明白朋友才是最终的归途吧。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>  毫不害臊的说，七月令我印象深刻的原因往往是我的生日，因而我对这个月份灌注极多的期待，过去这几年有快活的，也有不快活的，有失望落空，自怨自艾，也有心满意足的，总归一句话：花钱。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>  今年，七月初便经历了一场分别，她说祝我有一个崭新的七月，我对情感的思考从未像今年一般，有那么的深刻。我究竟在为什么生活，又究竟是为了什么而去寻觅一段与人亲密的关系，我又究竟在渴求什么。</p><!-- /wp:paragraph --><!-- wp:heading {"level":4,"align":"center"} --><h4 style="text-align:center">结束后的反思</h4><!-- /wp:heading --><!-- wp:paragraph --><p>  现在结束了，但远远没有想明白，而且，这答案也不是永远一成不变的，虽然很多时候我会认为我的观点自相矛盾，但是这并不影响我有一个我自己都未正确认知的固有人格。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>  做很多事情的时候还是会带有之前与人相处而得来的习惯，我很少影响到别人的习惯，我总是那个被影响的，这些潜意识的习惯里，藏着每一分眷恋吧。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>  下笔前总是认为自己能写很多，但是实际上并没有那么多思绪给我抒发，原因大概是这个博客一般而言只有我一个人在写在看。</p><!-- /wp:paragraph --><!-- wp:heading {"level":4,"align":"center"} --><h4 style="text-align:center"> 顺其自然就像是懦夫对无奈生活的叹息</h4><!-- /wp:heading --><!-- wp:verse --><pre class="wp-block-verse">但有些事情终归是<br> 意难平<br> 我有一壶酒，独酌无相亲<br> 祝所有人安好 </pre><!-- /wp:verse -->]]></content>
      
      
      <categories>
          
          <category> Caprice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 每月纪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站纪</title>
      <link href="/2019/07/25/%E5%BB%BA%E7%AB%99%E7%BA%AA/"/>
      <url>/2019/07/25/%E5%BB%BA%E7%AB%99%E7%BA%AA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- wp:heading {"level":4} --><h4>成本： </h4><!-- /wp:heading --><!-- wp:paragraph --><p>阿里云的服务器+两个顶级域名合计60+，预计一年的维护费用在300+。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>说实话还是不便宜的，但是收获的是一台境外服务器，一个博客，后续还可以加上其他的模块，例如下载等，但是看阿里云的1m小水管还是算了吧，划不来划不来，家里没矿玩不起hhh。</p><!-- /wp:paragraph --><!-- wp:heading {"level":4} --><h4>流程：</h4><!-- /wp:heading --><!-- wp:list --><ul><li>购置域名：在阿里那边购置的万网域名，top比cn的域名要便宜一点，但是好像微信有时候会对top的域名进行屏蔽警告，而且在用终端ping这两个域名的时候响应速度cn要比top快得多，具体我也不知道是什么原因，因为我把两个域名都绑定在相同的服务器上了，真的是奇了怪了....</li><li>购置云服务器：阿里云的轻量级应用服务器，没什么好说的，选个喜欢的就好，系统我选用的是centos，不过我看到阿里在购买时有提供WordPress镜像的选择，具体我也不是很清楚，可能可以直接安装那个来实现搭建吧，不过我还是用的centos因为ss的需要具体可以看<a href="http://47.102.45.176:8787/?p=17">另一篇</a>。</li><li>配置服务器：我这里搭建的是LAMP的博客，是基于centOS搭建的。</li><li>安装Apache，mariadb，安装php</li><li>最后打开你的服务器的网址即可</li></ul><!-- /wp:list --><!-- wp:heading {"level":4} --><h4>注意事项：</h4><!-- /wp:heading --><!-- wp:paragraph --><p>这里的php要尽量安装高版本的，centos自带的PHP版本一般为5.2，而最新的WordPress所需的版本一般在5.6左右所以最好直接安装php7方便后续的更新以及维护</p><!-- /wp:paragraph -->]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自主搭建SS服务器</title>
      <link href="/2019/07/24/%E8%87%AA%E4%B8%BB%E6%90%AD%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/07/24/%E8%87%AA%E4%B8%BB%E6%90%AD%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="本文是依托阿里云香港服务器搭建SS服务器，便于我在学校之外访问学术网站。"><a href="#本文是依托阿里云香港服务器搭建SS服务器，便于我在学校之外访问学术网站。" class="headerlink" title="本文是依托阿里云香港服务器搭建SS服务器，便于我在学校之外访问学术网站。"></a>本文是依托阿里云香港服务器搭建SS服务器，便于我在学校之外访问学术网站。</h2><h3 id="我选择的服务器是最便宜的轻量级应用服务器"><a href="#我选择的服务器是最便宜的轻量级应用服务器" class="headerlink" title="我选择的服务器是最便宜的轻量级应用服务器"></a>我选择的服务器是最便宜的轻量级应用服务器</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191022165207.png/imgzip"/><p>系统我选择的是centOS7.3，我之前并没有很深入的去了解Linux，所以我也是摸爬滚打现学现用</p><p>阿里云的配置网上很多我就不在这里写了</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/img/20191022165340.png/imgzip"/><p>Mac用终端连接服务器，win可以用XShell。</p><hr><p>输入密码后即可进入阿里云服务器的命令行界面<br><br>然后执行下面三条语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class="line">$ <span class="built_in">chmod</span> +x shadowsocks-all.sh</span><br><span class="line">$ ./shadowsocks-all.sh 2&amp;gt;&amp;amp;1 | <span class="built_in">tee</span> shadowsocks-all.log&lt;/pre&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; <span class="built_in">chmod</span> +x ssr.sh &amp;&amp; sudo bash ssr.sh&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>执行之后会提示你需要输入语言密码端口等</p><p><del>这里有一个坑，就是我是根据网上一个博客进行操作的，但是那篇博客里是用的go语言，那么最后ss的全称是shadowsocks-go，而不是shadowsaocks，需要记住这点，不然的话后期添加多用户会遇到一些麻烦。</del></p><p><strong>改用第二个代码就可以中文安装了</strong></p><h3 id="在设置完端口和密码之后回到阿里云的防火墙，打开之前设置的端口。"><a href="#在设置完端口和密码之后回到阿里云的防火墙，打开之前设置的端口。" class="headerlink" title="在设置完端口和密码之后回到阿里云的防火墙，打开之前设置的端口。"></a>在设置完端口和密码之后回到阿里云的防火墙，打开之前设置的端口。</h3><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>Enjoy it</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> SS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工程实训纪</title>
      <link href="/2019/07/24/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%AE%AD-%E8%AE%B0%E8%B4%A6%E8%BD%AF%E4%BB%B6/"/>
      <url>/2019/07/24/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%AE%AD-%E8%AE%B0%E8%B4%A6%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>选题：PC端记账本软件<br>语言：C++<br>开发工具：Qt库、Qt Creator<br>其实组里的人都比较懒，做完了之后觉得应该做个游戏什么的比较考验自己的能力，不过做实用的软件也确实比较有意思，为此还买了个机械键盘，感觉有点浪费hhh，下面开始正题了。<br>软件要实现的几个主要功能</p><ol><li><p>记录每日支出</p></li><li><p>实现简单的本地登录功能-&gt;即实现数据库的写入与读取<br>我在这里用的是Qt自带的一个比较简单的QSQLite，有需求的可以上远程服务器，不过我这里还是遇到了一些问题就是在打包之后无法使用数据库，可能是依赖没有添加的原因，由于已经蒙混过关了所以就没有深究这一块的问题。</p></li><li><p>实现支出数据的图表化</p></li></ol><p>总体看下来个人认为比较繁琐的是数据库的部分，巧的是我之前做的一个项目里有比较接近的模块，所以这部分是我自己来负责的，零零总总还都比较简单，由于队友都不太行hhhh，我也就没想着做拓展功能，谁能想到五个人的团队实际上只有两个人在写代码呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">OpenDateBase</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    OpenDateBase();</span><br><span class="line">    QApplication <span class="title function_">a</span><span class="params">(argc, argv)</span>;</span><br><span class="line">    MainWindow w;</span><br><span class="line">    w.show();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到main部分的代码还是比较简单的，大概是实现这么一个逻辑：打开数据库，生成窗口实例，展示窗口最后再让窗口一直显示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">OpenDateBase</span><span class="params">()</span>&#123;</span><br><span class="line">    QSqlDatabase mydb=QSqlDatabase::addDatabase(<span class="string">&quot;QSQLITE&quot;</span>);</span><br><span class="line">    mydb.setDatabaseName(<span class="string">&quot;cashitem.db&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(mydb.open())</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">&quot;open success&quot;</span>;</span><br><span class="line">        QSqlQuery query;</span><br><span class="line">            <span class="comment">//新建item表，id设置为主键，一个金额，一个类型，一个内容,一个时间</span></span><br><span class="line">            query.exec(<span class="string">&quot;create table item(id INTEGER PRIMARY KEY AUTOINCREMENT,money int,type varchar,content varchar,addtime time,useraccount varchar)&quot;</span>);<span class="comment">//条目，即输入的支出数据</span></span><br><span class="line">            query.exec(<span class="string">&quot;create table user(id INTEGER PRIMARY KEY AUTOINCREMENT,useraccount varchar,userpassword varchar,useremail varchar)&quot;</span>);<span class="comment">//用户信息</span></span><br><span class="line">            query.exec(<span class="string">&quot;create table user_budget_setting(id INTEGER PRIMARY KEY AUTOINCREMENT,useraccount varchar,dayBudget int,monthBudget int,yearBudget int)&quot;</span>);<span class="comment">//用户的支出与预算表</span></span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//给出debug提示，便于定位错误的地点</span></span><br><span class="line">        qDebug()&lt;&lt;<span class="string">&quot;open failed&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>必须在Qt给出的.pro文件中添加sql，见下文的最后一行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#-------------------------------------------------</span><br><span class="line">#</span><br><span class="line"># Project created by QtCreator <span class="number">2019</span><span class="number">-07</span><span class="number">-03</span>T10:<span class="number">40</span>:<span class="number">19</span></span><br><span class="line">#</span><br><span class="line">#-------------------------------------------------</span><br><span class="line"></span><br><span class="line">QT       += core gui sql charts</span><br></pre></td></tr></table></figure><p>这一部分的代码我是根据网上的一篇博客改的，在这里我先创建了一个数据库，若数据库存在那么就会直接调用，这里的数据库使用还是比较轻松的，以前我用服务器的数据库真的是一波三折哈哈哈，而后创建了三张数据表，含义在我给的注释里。<br>这个主键我也是纠结了很久，我以为给他传一个NULL就好了，后来我发现还不能加‘’单引号确实比较坑爹，详细可以看我后面给出的代码。<br>接下来是主窗口的代码mainwindow：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(new Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line">    tagWidgetLayout.setParent(ui-&gt;dailyBoardContent);</span><br><span class="line">    connect(&amp;user_login,&amp;userLoginWindow::loginSuccess,this,&amp;MainWindow::user_login_sucess);</span><br><span class="line">    connect(&amp;itemMark,&amp;itemMark::conveyData,this,&amp;MainWindow::addNewItemLabel);</span><br><span class="line">    ui-&gt;edit_pushButton-&gt;hide();</span><br><span class="line">    ui-&gt;delet_pushButton_2-&gt;hide();</span><br><span class="line">    ui-&gt;statusBar-&gt;hide();</span><br><span class="line">    ui-&gt;menuBar-&gt;hide();</span><br><span class="line">    ui-&gt;mainToolBar-&gt;hide();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()<span class="comment">//主窗口的销毁函数</span></span><br><span class="line">&#123;</span><br><span class="line">    QSqlQuery query;<span class="comment">//建立一个数据库的query</span></span><br><span class="line">    QString sql1;</span><br><span class="line">    sql1=<span class="string">&quot;insert into user_login(id,useraccount)values(NULL,&#x27;&#x27;) &quot;</span>;</span><br><span class="line">    query.exec(sql1);</span><br><span class="line">    query.exec(<span class="string">&quot;select  id,useraccount from user_login where id &gt;= 0&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (query.next()) &#123;</span><br><span class="line">        QString id = query.value(<span class="number">0</span>).toString();</span><br><span class="line">        useraccount = query.value(<span class="number">1</span>).toString();</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">&quot;mainwindow:&quot;</span>&lt;tabWidget-&gt;hide();</span><br><span class="line">    itemMark.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::addNewItemLabel</span><span class="params">(<span class="type">int</span> money ,QString type,QString content)</span>&#123;</span><br><span class="line">    newWidget = new itemWidget(money,type,content,ui-&gt;itemListWidget);</span><br><span class="line">    QSqlQuery query1;</span><br><span class="line">    query1.exec(<span class="string">&quot;select  id,useraccount from user_login where id &gt;= 0&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (query1.next()) &#123;</span><br><span class="line">        QString id = query1.value(<span class="number">0</span>).toString();</span><br><span class="line">        useraccount = query1.value(<span class="number">1</span>).toString();</span><br><span class="line">        qDebug()&lt;itemListWidget,<span class="number">0</span>);</span><br><span class="line">        listwidgetitem-&gt;setSizeHint(QSize(<span class="number">50</span>,<span class="number">50</span>));</span><br><span class="line">        ui-&gt;itemListWidget-&gt;setItemWidget(listwidgetitem,newWidget);</span><br><span class="line">        ui-&gt;itemListWidget-&gt;show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::deletItem</span><span class="params">()</span>&#123;</span><br><span class="line">    QListWidgetItem *listwidgetitem= ui-&gt;itemListWidget-&gt;currentItem();</span><br><span class="line">    listwidgetitem-&gt;setHidden(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::on_userAvatarPic_clicked</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    user_login.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::on_dailyBoardButton_clicked</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;stackedWidget-&gt;setCurrentIndex(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::on_chartAnalysisButton_clicked</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = ui-&gt;monthSelector-&gt;currentIndex();</span><br><span class="line">    chartsMaking(i+<span class="number">1</span>);</span><br><span class="line">    ui-&gt;stackedWidget-&gt;setCurrentIndex(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::on_bugetSettingButton_clicked</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    QSqlQuery query_user;</span><br><span class="line">    query_user.exec(<span class="string">&quot;select  id,useraccount from user_login where id &gt;= 0&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(query_user.next())&#123;</span><br><span class="line">        useraccount = query_user.value(<span class="number">1</span>).toString();</span><br><span class="line">    <span class="comment">//    qDebug()&lt;stackedWidget-&gt;setCurrentIndex(2);</span></span><br><span class="line"></span><br><span class="line">    QSqlQuery query;</span><br><span class="line">    QDateTime dtm;</span><br><span class="line">    QString timeNow=dtm.currentDateTime().toString(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">    <span class="type">int</span> year = timeNow.toInt();</span><br><span class="line"> <span class="comment">//   int day = year % 100;</span></span><br><span class="line">    year/=<span class="number">100</span>;</span><br><span class="line"> <span class="comment">//   int month = year % 100;</span></span><br><span class="line">    year/=<span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">thisMonthCost</span><span class="params">(<span class="number">0</span>)</span>,<span class="title function_">thisDayCost</span><span class="params">(<span class="number">0</span>)</span>,<span class="title function_">thisYearCost</span><span class="params">(<span class="number">0</span>)</span>;</span><br><span class="line">    QString monthNow = timeNow.remove(<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">    timeNow=dtm.currentDateTime().toString(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line">    QString sql =QString(<span class="string">&quot;select  money,addtime,useraccount from item where addtime between &#x27;%1%2%3&#x27;and &#x27;%4%5%6&#x27;&quot;</span>).arg(year).arg(<span class="string">&quot;01&quot;</span>).arg(<span class="string">&quot;01&quot;</span>).arg(year+<span class="number">1</span>).arg(<span class="string">&quot;01&quot;</span>).arg(<span class="string">&quot;00&quot;</span>);</span><br><span class="line">    query.exec(sql);</span><br><span class="line">    <span class="keyword">while</span>(query.next())&#123;</span><br><span class="line">        <span class="keyword">if</span> (query.value(<span class="number">2</span>).toString() == useraccount) &#123;</span><br><span class="line">        thisYearCost+=query.value(<span class="number">0</span>).toInt();</span><br><span class="line">        <span class="keyword">if</span> (query.value(<span class="number">1</span>).toString().contains(monthNow,Qt::CaseInsensitive))  thisMonthCost+=query.value(<span class="number">0</span>).toInt();</span><br><span class="line">        <span class="keyword">if</span> (query.value(<span class="number">1</span>).toString() == timeNow ) thisDayCost+=query.value(<span class="number">0</span>).toInt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//qDebug()&lt;dayBudget)//TODO 增加弹窗提示</span></span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;dayprogressBar-&gt;setMaximum(thisDayCost);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> ui-&gt;dayprogressBar-&gt;setMaximum(dayBudget);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (thisMonthCost&gt;monthBudget)<span class="comment">//TODO 增加弹窗提示</span></span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;monthprogressBar-&gt;setMaximum(thisMonthCost);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> ui-&gt;monthprogressBar-&gt;setMaximum(monthBudget);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (thisYearCost&gt;yearBudget)<span class="comment">//TODO 增加弹窗提示</span></span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;yearprogressBar-&gt;setMaximum(thisYearCost);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> ui-&gt;yearprogressBar-&gt;setMaximum(yearBudget);</span><br><span class="line"></span><br><span class="line">    ui-&gt;dayprogressBar-&gt;setValue(thisDayCost);</span><br><span class="line">    ui-&gt;monthprogressBar-&gt;setValue(thisMonthCost);</span><br><span class="line">    ui-&gt;yearprogressBar-&gt;setValue(thisYearCost);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    QString daylabel = QString(<span class="string">&quot;每日预算：%1/%2&quot;</span>).arg(thisDayCost).arg(dayBudget);</span><br><span class="line">    QString monthlabel = QString(<span class="string">&quot;每月预算：%1/%2&quot;</span>).arg(thisMonthCost).arg(monthBudget);</span><br><span class="line">    QString yearlabel = QString(<span class="string">&quot;每年预算：%1/%2&quot;</span>).arg(thisYearCost).arg(yearBudget);</span><br><span class="line">    ui-&gt;dayBudgetSetlabel-&gt;setText(daylabel);</span><br><span class="line">    ui-&gt;monthBudgetSetlabel-&gt;setText(monthlabel);</span><br><span class="line">    ui-&gt;yearBudgetSetlabel-&gt;setText(yearlabel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::on_dayBudgetSetButton_clicked</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//接收新的预算</span></span><br><span class="line">   <span class="type">int</span> dayBudget;</span><br><span class="line">   dayBudget = QInputDialog::getInt(this,<span class="string">&quot;设置&quot;</span>,<span class="string">&quot;每日预算：&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    QSqlQuery query;</span><br><span class="line">    QSqlQueryModel *model_2 = new QSqlQueryModel;</span><br><span class="line">    QString sql = QString(<span class="string">&quot;select count (*) from user_budget_setting where useraccount = &#x27;%1&#x27;&quot;</span>).arg(useraccount);</span><br><span class="line">    model_2-&gt;setQuery(sql);</span><br><span class="line">    QModelIndex index1 = model_2-&gt;index(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (index1.data()==<span class="number">0</span>)&#123;<span class="comment">//插入一条新记录</span></span><br><span class="line">        sql = QString(<span class="string">&quot;insert into user_budget_setting(id,dayBudget,monthBudget,yearBudget,useraccount) values(NULL,&#x27;%1&#x27;,&#x27;%2&#x27;,&#x27;%3&#x27;,&#x27;%4&#x27;)&quot;</span>).arg(dayBudget).arg(<span class="number">0</span>).arg(<span class="number">0</span>).arg(useraccount);</span><br><span class="line">        qDebug()&lt;dayprogressBar-&gt;value()).arg(dayBudget);</span><br><span class="line">   ui-&gt;dayBudgetSetlabel-&gt;setText(daylabel);</span><br><span class="line">   <span class="keyword">if</span> (ui-&gt;dayprogressBar-&gt;value()&gt;dayBudget)<span class="comment">//TODO 增加弹窗提示</span></span><br><span class="line">   &#123;</span><br><span class="line">       ui-&gt;dayprogressBar-&gt;setMaximum(ui-&gt;dayprogressBar-&gt;value());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> ui-&gt;dayprogressBar-&gt;setMaximum(dayBudget);</span><br><span class="line">   ui-&gt;dayBudgetSetlabel-&gt;show();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::on_monthBudgetSetButton_clicked</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//接收新的预算</span></span><br><span class="line">    <span class="type">int</span> monthBudget;</span><br><span class="line">    monthBudget = QInputDialog::getInt(this,<span class="string">&quot;设置&quot;</span>,<span class="string">&quot;每月预算：&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//TODO添加数据库操作</span></span><br><span class="line">    QSqlQuery query;</span><br><span class="line">    QSqlQueryModel *model_2 = new QSqlQueryModel;</span><br><span class="line">    QString sql = QString(<span class="string">&quot;select count (*) from user_budget_setting where useraccount = &#x27;%1&#x27;&quot;</span>).arg(useraccount);</span><br><span class="line">    model_2-&gt;setQuery(sql);</span><br><span class="line">    QModelIndex index1 = model_2-&gt;index(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (index1.data()==<span class="number">0</span>)&#123;<span class="comment">//插入一条新记录</span></span><br><span class="line">        sql = QString(<span class="string">&quot;insert into user_budget_setting(id,dayBudget,monthBudget,yearBudget,useraccount) values(NULL,&#x27;%1&#x27;,&#x27;%2&#x27;,&#x27;%3&#x27;,&#x27;%4&#x27;)&quot;</span>).arg(<span class="number">0</span>).arg(monthBudget).arg(<span class="number">0</span>).arg(useraccount);</span><br><span class="line">        qDebug()&lt;monthprogressBar-&gt;value()).arg(monthBudget);</span><br><span class="line">    ui-&gt;monthBudgetSetlabel-&gt;setText(monthlabel);</span><br><span class="line">    <span class="keyword">if</span> (ui-&gt;monthprogressBar-&gt;value()&gt;monthBudget)<span class="comment">//TODO 增加弹窗提示</span></span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;monthprogressBar-&gt;setMaximum(ui-&gt;monthprogressBar-&gt;value());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> ui-&gt;monthprogressBar-&gt;setMaximum(monthBudget);</span><br><span class="line"></span><br><span class="line">    ui-&gt;monthBudgetSetlabel-&gt;show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::on_yearBudgetSetButton_clicked</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//接收新的预算</span></span><br><span class="line">    <span class="type">int</span> yearBudget;</span><br><span class="line">    yearBudget = QInputDialog::getInt(this,<span class="string">&quot;设置&quot;</span>,<span class="string">&quot;每年预算：&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//TODO添加数据库操作</span></span><br><span class="line">    QSqlQuery query;</span><br><span class="line">    QSqlQueryModel *model_2 = new QSqlQueryModel;</span><br><span class="line">    QString sql = QString(<span class="string">&quot;select count (*) from user_budget_setting where useraccount = &#x27;%1&#x27;&quot;</span>).arg(useraccount);</span><br><span class="line">    model_2-&gt;setQuery(sql);</span><br><span class="line">    QModelIndex index1 = model_2-&gt;index(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (index1.data()==<span class="number">0</span>)&#123;<span class="comment">//插入一条新记录</span></span><br><span class="line">        sql = QString(<span class="string">&quot;insert into user_budget_setting(id,dayBudget,monthBudget,yearBudget,useraccount) values(NULL,&#x27;%1&#x27;,&#x27;%2&#x27;,&#x27;%3&#x27;,&#x27;%4&#x27;)&quot;</span>).arg(<span class="number">0</span>).arg(<span class="number">0</span>).arg(yearBudget).arg(useraccount);</span><br><span class="line">        qDebug()&lt;yearprogressBar-&gt;value()).arg(yearBudget);</span><br><span class="line">    ui-&gt;yearBudgetSetlabel-&gt;setText(yearlabel);</span><br><span class="line">    <span class="keyword">if</span> (ui-&gt;yearprogressBar-&gt;value()&gt;yearBudget)<span class="comment">//TODO 增加弹窗提示</span></span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;yearprogressBar-&gt;setMaximum(ui-&gt;yearprogressBar-&gt;value());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> ui-&gt;yearprogressBar-&gt;setMaximum(yearBudget);</span><br><span class="line">    ui-&gt;yearBudgetSetlabel-&gt;show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::on_monthSelector_activated</span><span class="params">(<span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x = index;</span><br><span class="line">    x++;</span><br><span class="line">    chartsMaking(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饼状图生成函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::chartsMaking</span><span class="params">(<span class="type">int</span> month)</span></span><br><span class="line">&#123;</span><br><span class="line">    QSqlQuery query1;</span><br><span class="line">    query1.exec(<span class="string">&quot;select  id,useraccount from user_login where id &gt;= 0&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (query1.next()) &#123;</span><br><span class="line">        QString id = query1.value(<span class="number">0</span>).toString();</span><br><span class="line">        useraccount = query1.value(<span class="number">1</span>).toString();</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">&quot;BarMaking:&quot;</span>&lt;append(<span class="string">&quot;饮食&quot;</span>,eatMoney);</span><br><span class="line">    series-&gt;append(<span class="string">&quot;娱乐&quot;</span>,entertainmentMoney);</span><br><span class="line">    series-&gt;append(<span class="string">&quot;教育&quot;</span>,eduMoney);</span><br><span class="line">    series-&gt;setLabelsVisible();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*QPieSlice *slice_red = series-&gt;slices().at(0);</span></span><br><span class="line"><span class="comment">    QPieSlice *slice_green = series-&gt;slices().at(1);</span></span><br><span class="line"><span class="comment">    QPieSlice *slice_blue = series-&gt;slices().at(2);</span></span><br><span class="line"><span class="comment">    slice_red-&gt;setColor(QColor(255,0,0,255));</span></span><br><span class="line"><span class="comment">    slice_green-&gt;setColor(QColor(0,255,0,255));</span></span><br><span class="line"><span class="comment">    slice_blue-&gt;setColor(QColor(0,0,255,255));*/</span></span><br><span class="line"></span><br><span class="line">    QChart *chart = new QChart();</span><br><span class="line">    chart-&gt;addSeries(series);</span><br><span class="line">    QString title = QString(<span class="string">&quot;您的%1月的账单统计图&quot;</span>).arg(month);</span><br><span class="line">    chart-&gt;setTitle(title);</span><br><span class="line">    chart-&gt;legend()-&gt;hide();</span><br><span class="line">    ui-&gt;chartViewer-&gt;setChart(chart);</span><br><span class="line">    <span class="comment">//QChartView *chartview = new QChartView(chart);</span></span><br><span class="line">    <span class="comment">//chartview-&gt;setRenderHint(QPainter::Antialiasing);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//chartview-&gt;resize(400,400);</span></span><br><span class="line">    <span class="comment">//chartview-&gt;show();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ui-&gt;graphicsView-&gt;setChart(chart);</span></span><br><span class="line">    <span class="comment">//ui-&gt;graphicsView-&gt;setRenderHint(QPainter::Antialiasing);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//柱状图生成函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::barChartsMaking</span><span class="params">(<span class="type">int</span> month)</span>&#123;</span><br><span class="line">    QSqlQuery query1;</span><br><span class="line">    query1.exec(<span class="string">&quot;select  id,useraccount from user_login where id &gt;= 0&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (query1.next()) &#123;</span><br><span class="line">        QString id = query1.value(<span class="number">0</span>).toString();</span><br><span class="line">        useraccount = query1.value(<span class="number">1</span>).toString();</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">&quot;BarMaking:&quot;</span>&lt;append(<span class="built_in">set</span>);</span><br><span class="line">    <span class="comment">//series-&gt;append(setEntertainment);</span></span><br><span class="line">    <span class="comment">//series-&gt;append(setEdu);</span></span><br><span class="line">    QChart *chart = new QChart();</span><br><span class="line">    QString title = QString(<span class="string">&quot;您的%1月的账单统计图&quot;</span>).arg(month);</span><br><span class="line">    chart-&gt;setTitle(title);</span><br><span class="line"></span><br><span class="line">    QBarCategoryAxis *axis = new QBarCategoryAxis();</span><br><span class="line">    axis-&gt;append(category);</span><br><span class="line">    chart-&gt;createDefaultAxes();</span><br><span class="line"></span><br><span class="line">    chart-&gt;addSeries(series);</span><br><span class="line">    chart-&gt;setAxisX(axis,series);</span><br><span class="line">    ui-&gt;chartViewer-&gt;setChart(chart);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::on_delet_pushButton_2_clicked</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    QListWidgetItem *listwidgetitem= ui-&gt;itemListWidget-&gt;currentItem();</span><br><span class="line">    listwidgetitem-&gt;setHidden(<span class="literal">true</span>);</span><br><span class="line">    QSqlQuery query;</span><br><span class="line">    <span class="type">int</span> curRow = ui-&gt;itemListWidget-&gt;currentIndex().row();     <span class="comment">//鼠标选择删除第几行</span></span><br><span class="line">        QModelIndex index = ui-&gt;itemListWidget-&gt;currentIndex();</span><br><span class="line">        <span class="type">int</span> id=index.sibling(curRow,<span class="number">0</span>).data().toInt();</span><br><span class="line">        QString str =QString(<span class="string">&quot;delete from item where id = &#x27;%1&#x27;&quot;</span>).arg(curRow) ;</span><br><span class="line">        query.exec(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编辑按钮</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::on_edit_pushButton_clicked</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    QSqlQuery query;</span><br><span class="line">    query.exec(<span class="string">&quot;select id,money,type,content,addtime from item where id &gt;= 1&quot;</span>);</span><br><span class="line">    QString str;</span><br><span class="line">    QString str1;</span><br><span class="line">    QString str2;</span><br><span class="line">    QString str3;</span><br><span class="line">    QString str4;</span><br><span class="line">    QString str5;</span><br><span class="line">    QDateTime dtm;</span><br><span class="line">    <span class="type">int</span> dtm0;</span><br><span class="line">    <span class="keyword">while</span>(query.next())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//query.value(0)是id的值，将其转换为int型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//QString str0 = dtm.toString(&quot;yyyy-mm-dd hh:mm:ss&quot;);</span></span><br><span class="line">        str1 = query.value(<span class="number">0</span>).toString();</span><br><span class="line">        str2 = query.value(<span class="number">1</span>).toString();</span><br><span class="line">        str3 = query.value(<span class="number">2</span>).toString();</span><br><span class="line">        str4 = query.value(<span class="number">3</span>).toString();</span><br><span class="line">        str5 = query.value(<span class="number">4</span>).toString();</span><br><span class="line">        <span class="comment">//输出两个值</span></span><br><span class="line">        qDebug() &lt;&lt; str1&lt;&lt; str2&lt;&lt; str3&lt;&lt; str4&lt;itemListWidget-&gt;clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::user_login_sucess</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    QSqlQuery query1;</span><br><span class="line">    query1.exec(<span class="string">&quot;select  id,useraccount from user_login where id &gt;= 0&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (query1.next()) &#123;</span><br><span class="line">        QString id = query1.value(<span class="number">0</span>).toString();</span><br><span class="line">        useraccount = query1.value(<span class="number">1</span>).toString();</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">&quot;mainwindow:&quot;</span>&lt;itemListWidget-&gt;clear();</span><br><span class="line">    <span class="keyword">while</span> (query1.next()) &#123;</span><br><span class="line">        QString id = query1.value(<span class="number">0</span>).toString();</span><br><span class="line">        <span class="type">int</span> money = query1.value(<span class="number">1</span>).toInt();</span><br><span class="line">        QString type = query1.value(<span class="number">2</span>).toString();</span><br><span class="line">        QString content = query1.value(<span class="number">3</span>).toString();</span><br><span class="line">        useraccount = query1.value(<span class="number">5</span>).toString();</span><br><span class="line">        newWidget = new itemWidget(money,type,content,ui-&gt;itemListWidget);</span><br><span class="line">        QListWidgetItem *listwidgetitem = new QListWidgetItem(ui-&gt;itemListWidget,<span class="number">0</span>);</span><br><span class="line">        listwidgetitem-&gt;setSizeHint(QSize(<span class="number">50</span>,<span class="number">50</span>));</span><br><span class="line">        ui-&gt;itemListWidget-&gt;setItemWidget(listwidgetitem,newWidget);</span><br><span class="line">        ui-&gt;itemListWidget-&gt;show();</span><br><span class="line">        qDebug()&lt;monthSelector-&gt;currentIndex();</span><br><span class="line">    chartsMaking(index+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MainWindow::on_selectLinerChart_clicked</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    index = ui-&gt;monthSelector-&gt;currentIndex();</span><br><span class="line">    barChartsMaking(index+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来是用户登录的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;userloginwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_userloginwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">userLoginWindow::userLoginWindow(QWidget *parent) :</span><br><span class="line">    QWidget(parent),</span><br><span class="line">    ui(new Ui::userLoginWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this); this-&gt;setWindowTitle(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册页面</span></span><br><span class="line">    ui-&gt;userID_reg-&gt;setPlaceholderText(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ui-&gt;userPassword_reg-&gt;setPlaceholderText(<span class="string">&quot;密码&quot;</span>);</span><br><span class="line">    ui-&gt;userPassword_reg_2-&gt;setPlaceholderText(<span class="string">&quot;确认密码&quot;</span>);</span><br><span class="line">    ui-&gt;userPassword_reg-&gt;setEchoMode(QLineEdit::Password);</span><br><span class="line">    ui-&gt;userPassword_reg_2-&gt;setEchoMode(QLineEdit::Password);</span><br><span class="line"></span><br><span class="line">    ui-&gt;userMail-&gt;setPlaceholderText(<span class="string">&quot;xxx@xxx.xxx&quot;</span>);</span><br><span class="line">    <span class="comment">//注册操作</span></span><br><span class="line">    connect(ui-&gt;reg_button,&amp;QPushButton::clicked,this,&amp;userLoginWindow::sendToDateBase_regist);</span><br><span class="line">    <span class="comment">//登陆操作</span></span><br><span class="line">    connect(ui-&gt;loginButton,&amp;QPushButton::clicked,this,&amp;userLoginWindow::sendToDateBase_log);</span><br><span class="line">    <span class="comment">//登录界面</span></span><br><span class="line">    ui-&gt;username-&gt;setPlaceholderText(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">    ui-&gt;userPassword-&gt;setEchoMode(QLineEdit::Password);</span><br><span class="line">    ui-&gt;userPassword-&gt;setPlaceholderText(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">userLoginWindow::~userLoginWindow()</span><br><span class="line">&#123;</span><br><span class="line">    delete ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">userLoginWindow::on_registerButton_clicked</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">log</span>-&gt;hide();</span><br><span class="line">    ui-&gt;reg-&gt;show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">userLoginWindow::on_return_button_clicked</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">log</span>-&gt;show();</span><br><span class="line">    ui-&gt;reg-&gt;hide();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">userLoginWindow::sendToDateBase_regist</span><span class="params">()</span>&#123;</span><br><span class="line">    QSqlQuery query;</span><br><span class="line">    QString sql;</span><br><span class="line">    QString str1 ,str2, str3;</span><br><span class="line">    str1 = ui-&gt;userID_reg-&gt;text();</span><br><span class="line">    str2 = ui-&gt;userPassword_reg-&gt;text();</span><br><span class="line">    str3 = ui-&gt;userMail-&gt;text();</span><br><span class="line">    QSqlQueryModel *model1=new QSqlQueryModel;</span><br><span class="line">    sql = QString(<span class="string">&quot;select count (*)  from user where useraccount = &#x27;%1&#x27;&quot;</span>).arg(str1);</span><br><span class="line">    model1-&gt;setQuery(sql);</span><br><span class="line">    QModelIndex index1=model1-&gt;index(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//query.exec(sql);</span></span><br><span class="line">    <span class="keyword">if</span>(index1.data()==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//如果这条数据不存在那么插入这条数据</span></span><br><span class="line">        sql = QString(<span class="string">&quot;insert into user(id, useraccount, userpassword,useremail) values(NULL,&#x27;%1&#x27;, &#x27;%2&#x27;, &#x27;%3&#x27;)&quot;</span>).arg(str1).arg(str2).arg(str3);</span><br><span class="line">        query.exec(sql);</span><br><span class="line">        <span class="comment">//debug测试</span></span><br><span class="line">        query.exec(<span class="string">&quot;select id,useraccount,userpassword,useremail from user where id &gt;= 1&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(query.next())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//query.value(0)是id的值，将其转换为int型</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//QString str0 = dtm.toString(&quot;yyyy-mm-dd hh:mm:ss&quot;);</span></span><br><span class="line">            str1 = query.value(<span class="number">1</span>).toString();</span><br><span class="line">            str2 = query.value(<span class="number">2</span>).toString();</span><br><span class="line">            str3 = query.value(<span class="number">3</span>).toString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出两个值</span></span><br><span class="line">            qDebug() &lt;&lt; str1&lt;&lt; str2&lt;&lt; str3 ;</span><br><span class="line">        &#125;</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">&quot;注册成功&quot;</span>;</span><br><span class="line">        ui-&gt;userID_reg-&gt;clear();</span><br><span class="line">        ui-&gt;userPassword_reg-&gt;clear();</span><br><span class="line">        ui-&gt;userPassword_reg_2-&gt;clear();</span><br><span class="line">        ui-&gt;userMail-&gt;clear();</span><br><span class="line">        ui-&gt;reg-&gt;hide();</span><br><span class="line">        ui-&gt;<span class="built_in">log</span>-&gt;show();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">&quot;用户已存在&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">userLoginWindow::sendToDateBase_log</span><span class="params">()</span>&#123;</span><br><span class="line">    QSqlQuery query;</span><br><span class="line">    QString sql;</span><br><span class="line">    QString str1 ,str2, str3;</span><br><span class="line">    str1 = ui-&gt;username-&gt;text();<span class="comment">//用户输入的用户名</span></span><br><span class="line">    str2 = ui-&gt;userPassword-&gt;text();<span class="comment">//用户输入的密码</span></span><br><span class="line">    QSqlQueryModel *model1=new QSqlQueryModel;</span><br><span class="line">    QSqlQueryModel *model2=new QSqlQueryModel;</span><br><span class="line">    sql = QString(<span class="string">&quot;select count (*)  from user where useraccount = &#x27;%1&#x27;&quot;</span>).arg(str1);</span><br><span class="line">    model1-&gt;setQuery(sql);</span><br><span class="line">    QModelIndex index1=model1-&gt;index(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(index1.data()==<span class="number">0</span>)&#123;</span><br><span class="line">        qDebug()&lt;&lt;<span class="string">&quot;用户名不存在&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//获取该用户名下的密码进行对比</span></span><br><span class="line">        sql=QString(<span class="string">&quot;select userpassword  from user where useraccount = &#x27;%1&#x27;&quot;</span>).arg(str1);</span><br><span class="line">        model2-&gt;setQuery(sql);</span><br><span class="line">        QModelIndex index2=model2-&gt;index(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(index2.data()==str2)&#123;</span><br><span class="line">            query.exec(<span class="string">&quot;create table user_login(id INTEGER PRIMARY KEY AUTOINCREMENT ,useraccount varchar)&quot;</span>);<span class="comment">//这张表是为了获取当前登录的用户，并以此来确定各个模块的显示</span></span><br><span class="line">            sql = QString(<span class="string">&quot;insert into user_login(id,useraccount) values(NULL,&#x27;%1&#x27;)&quot;</span>).arg(str1);</span><br><span class="line">            query.exec(sql);</span><br><span class="line">            qDebug()&lt;&lt;<span class="string">&quot;userlogwindow:&quot;</span>&lt;username-&gt;clear();</span><br><span class="line">            ui-&gt;userPassword-&gt;clear();</span><br><span class="line">            this-&gt;close();</span><br><span class="line">            qDebug()&lt;&lt;<span class="string">&quot;登陆成功&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            qDebug()&lt;&lt;<span class="string">&quot;密码错误&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">userLoginWindow::regUser</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> user_num_int;</span><br><span class="line">        qint64 pos;</span><br><span class="line">        QFile <span class="title function_">file</span><span class="params">(<span class="string">&quot;userAccout.txt&quot;</span>)</span>;</span><br><span class="line">        <span class="type">bool</span> isOk = file.open(QIODevice::ReadWrite|QIODevice::Text);</span><br><span class="line">        <span class="keyword">if</span> (isOk == <span class="literal">true</span>)&#123;</span><br><span class="line">            pos=file.size();</span><br><span class="line">            QString user_num = file.readLine();</span><br><span class="line">            QTextStream <span class="title function_">txtout</span><span class="params">(&amp;file)</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;iuserID_reg-&gt;text()&lt;userPassword_reg-&gt;text()&lt;userMail-&gt;text()&lt;<span class="built_in">log</span>-&gt;show();</span><br><span class="line">         ui-&gt;reg-&gt;hide();</span><br><span class="line"></span><br><span class="line">         ui-&gt;userID_reg-&gt;clear();</span><br><span class="line">         ui-&gt;userPassword_reg-&gt;clear();</span><br><span class="line">         ui-&gt;userPassword_reg_2-&gt;clear();</span><br><span class="line">         ui-&gt;userMail-&gt;clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后做完了整个项目后反思了一下，有这么几个做的不太好：<br>用户登录之后没有更改登录的状态显示，导致直接可以登录第二个用户，后期偷懒没有把这个做成更加美观的解决方案<br>很多地方都重复的使用了相同的代码，下一次可以试着做成一个简单的调用函数，降低各个版块之间的耦合度。<br>在做用户支出条目的时候没有实现条目的增删查改，只完成了条目的输入和清空，原因是我发现删改在QListWidget里实现比较麻烦，在翻阅了他的官方文档后他提示我要使用QListView，但那时已经接近项目结束了所以就没有重写。<br>最后一点就是有时候我太放心别人写的东西了，要保持自己怀疑的心。<br>最后放上我的GitHub地址：<a href="https://github.com/TankNee/CashBook">TankNee’s Repo -CashBook</a><br>万分感谢各位合作的队友们</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> C++ </tag>
            
            <tag> 项目软件 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

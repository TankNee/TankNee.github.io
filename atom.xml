<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>归舟棹远</title>
  <icon>https://www.gravatar.com/avatar/56f7d54e5b0a52b69ed162fc8afcf424</icon>
  <subtitle>云端筑梦</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.tanknee.cn/"/>
  <updated>2022-06-17T07:40:58.527Z</updated>
  <id>https://www.tanknee.cn/</id>
  
  <author>
    <name>TankNee</name>
    <email>nee@tanknee.cn</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo豆瓣文章插件</title>
    <link href="https://www.tanknee.cn/2020/07/08/Hexo%E8%B1%86%E7%93%A3%E6%96%87%E7%AB%A0%E6%8F%92%E4%BB%B6/"/>
    <id>https://www.tanknee.cn/2020/07/08/Hexo%E8%B1%86%E7%93%A3%E6%96%87%E7%AB%A0%E6%8F%92%E4%BB%B6/</id>
    <published>2020-07-08T10:12:42.000Z</published>
    <updated>2022-06-17T07:40:58.527Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Github项目地址"><a href="#Github项目地址" class="headerlink" title="Github项目地址"></a>Github项目地址</h2><p>github地址: <a href="https://github.com/TankNee/hexo-douban-card">https://github.com/TankNee/hexo-douban-card</a></p><blockquote><p>如果可以的话,希望你能给我一个star⭐</p></blockquote><p>npm地址: <a href="https://www.npmjs.com/package/hexo-douban-card">https://www.npmjs.com/package/hexo-douban-card</a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="参数阐述"><a href="#参数阐述" class="headerlink" title="参数阐述"></a>参数阐述</h3><ul><li><p>第一项<code>douban</code> 代表插件名</p></li><li><p>第二项可选:<code>movie</code>,<code>book</code>,<code>music</code></p></li><li><p>第三项请填入对应的<code>id</code>例如:</p></li></ul><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/07/2020070821522816eaefa.png" alt=""></p><p>填写subject后面的那串数字就好</p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;Github项目地址&quot;&gt;&lt;a href=&quot;#Github项目地址&quot; class=&quot;headerlink&quot; title=&quot;Github项目地址&quot;&gt;&lt;/a&gt;Github项目地址&lt;/h2&gt;&lt;p&gt;github地址: &lt;a href=&quot;https://github.com/TankNee/hexo-douban-card&quot;&gt;https://github.com/TankNee/hexo-douban-card&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果可以的话,希望你能给我一个star⭐&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="插件" scheme="https://www.tanknee.cn/tags/%E6%8F%92%E4%BB%B6/"/>
    
      <category term="hexo" scheme="https://www.tanknee.cn/tags/hexo/"/>
    
      <category term="douban" scheme="https://www.tanknee.cn/tags/douban/"/>
    
      <category term="JavaScript" scheme="https://www.tanknee.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>线性回归的简洁实现</title>
    <link href="https://www.tanknee.cn/2020/07/07/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://www.tanknee.cn/2020/07/07/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E7%AE%80%E6%B4%81%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-07-07T08:49:29.000Z</published>
    <updated>2022-06-17T07:24:21.682Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>个人理解是通过建立反馈机制,逐层优化筛选最优的权重参数,以达到对最佳算法的逼近.也就是通过数值解逼近解析解.</p><h3 id="预测二手房价格"><a href="#预测二手房价格" class="headerlink" title="预测二手房价格"></a>预测二手房价格</h3><p>设房屋的面积为$x_1$，房龄为$x_2$，售出价格为$y$。我们需要建立基于输入$x_1$和$x_2$来计算输出$y$的表达式，也就是模型（model）。顾名思义，线性回归假设输出与各个输入之间是线性关系：</p><p>$$<br>\hat{y} = x_1 w_1 + x_2 w_2 + b<br>$$<br>很明显我们能看到这是一个线性表达式，其中有两个参数会影响最终的输出结果，我们要做的事情就是找出最佳的$w_1$与$w_2$来实现对$y$的预测!</p><h3 id="训练数据-Train-Data"><a href="#训练数据-Train-Data" class="headerlink" title="训练数据(Train Data)"></a>训练数据(Train Data)</h3><p>我们通常收集一系列的真实数据，例如多栋房屋的真实售出价格和它们对应的面积和房龄。我们希望在这个数据上面寻找模型参数来使模型的预测价格与真实价格的误差最小。在机器学习术语里，该数据集被称为训练数据集（training data set）或训练集（training set），一栋房屋被称为一个样本（sample），其真实售出价格叫作标签（label），用来预测标签的两个因素叫作特征（feature）。特征用来表征样本的特点。</p><p>假设我们采集的样本数为$n$，索引为$i$的样本的特征为$x_1^{(i)}$和$x_2^{(i)}$，标签为$y^{(i)}$。对于索引为$i$的房屋，线性回归模型的房屋价格预测表达式为</p><p>$$<br>\hat{y}^{(i)} = x_1^{(i)} w_1 + x_2^{(i)} w_2 + b.<br>$$</p><h3 id="损失函数-Loss-Function"><a href="#损失函数-Loss-Function" class="headerlink" title="损失函数(Loss Function)"></a>损失函数(Loss Function)</h3><p>在模型训练中，我们需要衡量价格预测值与真实值之间的误差。通常我们会选取一个非负数作为误差，且数值越小表示误差越小。一个常用的选择是平方函数。它在评估索引为$i$的样本误差的表达式为</p><p>$$<br>\ell^{(i)}(w_1, w_2, b) = \frac{1}{2} \left(\hat{y}^{(i)} - y^{(i)}\right)^2,<br>$$</p><p>其中常数$\frac{1}{2}$使对平方项求导后的常数系数为1，这样在形式上稍微简单一些。显然，误差越小表示预测价格与真实价格越相近，且当二者相等时误差为0。给定训练数据集，这个误差只与模型参数相关，因此我们将它记为以模型参数为参数的函数。在机器学习里，将衡量误差的函数称为损失函数（loss function）。这里使用的平方误差函数也称为平方损失（square loss）。</p><p>通常，我们用训练数据集中所有样本误差的平均来衡量模型预测的质量，即</p><p>$$<br>\ell(w_1, w_2, b) =\frac{1}{n} \sum_{i=1}^n \ell^{(i)}(w_1, w_2, b) =\frac{1}{n} \sum_{i=1}^n \frac{1}{2}\left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right)^2.<br>$$</p><p>在模型训练中，我们希望找出一组模型参数，记为 $w_1^*, w_2^*, b^*$ ，来使训练样本平均损失最小：</p><p>$$<br>w_1^*, w_2^*, b^* = \operatorname*{argmin}_{w_1, w_2, b}\  \ell(w_1, w_2, b).<br>$$</p><h3 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h3><p>当模型和损失函数形式较为简单时，上面的误差最小化问题的解可以直接用公式表达出来。这类解叫作解析解（analytical solution）。本节使用的线性回归和平方误差刚好属于这个范畴。然而，大多数深度学习模型并没有解析解，只能通过优化算法有限次迭代模型参数来尽可能降低损失函数的值。这类解叫作数值解（numerical solution）。</p><p>在求数值解的优化算法中，小批量随机梯度下降（mini-batch stochastic gradient descent）在深度学习中被广泛使用。它的算法很简单：先选取一组模型参数的初始值，如随机选取；接下来对参数进行多次迭代，使每次迭代都可能降低损失函数的值。在每次迭代中，先随机均匀采样一个由固定数目训练数据样本所组成的小批量（mini-batch）$\mathcal{B}$，然后求小批量中数据样本的平均损失有关模型参数的导数（梯度），最后用此结果与预先设定的一个正数的乘积作为模型参数在本次迭代的减小量。</p><p>在训练本节讨论的线性回归模型的过程中，模型的每个参数将作如下迭代：</p><p>$$<br>\begin{aligned}<br>w_1 &amp;\leftarrow w_1 -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b)  }{\partial w_1} = w_1 -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}x_1^{(i)} \left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right),\\<br>w_2 &amp;\leftarrow w_2 -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b)  }{\partial w_2} = w_2 -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}x_2^{(i)} \left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right),\\<br>b &amp;\leftarrow b -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \frac{ \partial \ell^{(i)}(w_1, w_2, b)  }{\partial b} = b -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}\left(x_1^{(i)} w_1 + x_2^{(i)} w_2 + b - y^{(i)}\right).<br>\end{aligned}<br>$$<br>迭代以获取最优的参数</p><h3 id="数据归一化和标准化"><a href="#数据归一化和标准化" class="headerlink" title="数据归一化和标准化"></a>数据归一化和标准化</h3><p>不同数值的差异对结果的影响是完全不同的.例如身高从1.6到1.8那么他的体重可能就会从50到100,可见身高变化的幅度相对体重要小得多,也就是说体重拥有更好的非线性决断能力!</p><p>因此我们需要通过归一化与标准化,让我们所有的特征值都统一到一个标准的区间!</p><h3 id="线性函数归一化"><a href="#线性函数归一化" class="headerlink" title="线性函数归一化"></a>线性函数归一化</h3><p>$$<br>X_{normal}=\frac{X-X_{min}}{X_{max}-X{min}}<br>$$</p><ul><li>$X$原始特征数据</li><li>$X_{min},X_{max}$所有样本中的最小值与最大值</li><li>$X_{normal}$归一化之后的数据,在$[0,1]$之间</li></ul><h3 id="零均值标准化"><a href="#零均值标准化" class="headerlink" title="零均值标准化"></a>零均值标准化</h3><p>$$<br>X_{normal}=\frac{X-\mu}{\sigma}<br>$$</p><ul><li>$\mu$均值</li><li>$\sigma$标准差,一般设为1</li><li>$X_{normal}$归一化之后的数据</li></ul><hr><h2 id="数学基础附录"><a href="#数学基础附录" class="headerlink" title="数学基础附录"></a>数学基础附录</h2><h3 id="满秩的概念"><a href="#满秩的概念" class="headerlink" title="满秩的概念"></a>满秩的概念</h3><h4 id="定义一"><a href="#定义一" class="headerlink" title="定义一"></a>定义一</h4><p>使用初等行变化将矩阵化简为阶梯型矩阵,则矩阵中非零行的个数就是该矩阵的秩。</p><p>当矩阵的秩等于矩阵的行数时，就称该矩阵为满秩矩阵。</p><h4 id="定义二"><a href="#定义二" class="headerlink" title="定义二"></a>定义二</h4><p>若该矩阵的某一<code>r</code>阶子式的行列式不为零,并且所有大于<code>r</code>阶的子式的行列式全为0,那么就称该矩阵的秩为<code>r</code>,使用符号记为:<br>$$<br>A_{m*n}:R(A)=r<br>$$<br>如果有以下的等式<br>$$<br>R(A)=m<br>$$</p><p>$$<br>R(A)=n<br>$$</p><p>那就称之为行满秩矩阵或者是列满秩矩阵!</p><p>若有$m=n$则称之为满秩矩阵,可逆矩阵,非奇异矩阵.</p><h3 id="似然函数"><a href="#似然函数" class="headerlink" title="似然函数"></a>似然函数</h3><p>对于函数$p=(x|\theta)$而言,如果我们将$\theta$设为常量,那么我们将得到一个关于$x$的函数,也就是关于$x$的概率分布.</p><p>而当我们将$\theta$当作变量,将$x$当作常量时,我们就得到了关于$\theta$的极大似然函数!</p><p>对于极大似然函数,我们可以给出一个简单的示例:</p><p>对一枚硬币随机抛掷十次,得到一个结果组:$x=HHTTHTHHHH$,也就是一组正反序列,很显然,对于抛掷硬币的实验,其分布是一组二项分布,不是正面就是反面,那么我们可以很简单的得到一个表达式:$x=\theta^7(1-\theta)^3$,对于$\theta$的不同取值,表达式也会有不同的结果,但其变量是在$[0,1]$上的,所以我们可以取遍其所有的值,获得一张表:</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/07/2020070663a16a4fd6848.png" alt="image-20200706110107376"></p><p>可以看到在0.7时取到最大值,也就是最大似然估计值.显然,由于样本数过少,这个值是不太可能的一个值.</p><p>所有我们可以认为,这个等式的核心意思都是在给一个theta和一个样本x的时候，整个事件发生的可能性多大</p><h3 id="贝叶斯公式-Bayes’-theorem"><a href="#贝叶斯公式-Bayes’-theorem" class="headerlink" title="贝叶斯公式(Bayes’ theorem)"></a>贝叶斯公式(Bayes’ theorem)</h3><p>$$<br>P(A|B)=\frac{P(A)P(B|A)}{P(B)}<br>$$</p><h3 id="凹函数与凸函数"><a href="#凹函数与凸函数" class="headerlink" title="凹函数与凸函数"></a>凹函数与凸函数</h3><h4 id="凸函数"><a href="#凸函数" class="headerlink" title="凸函数"></a>凸函数</h4><p>$$<br>f(\frac{x_1+x_2}{2})&gt;\frac{f(x_1)+f(x_2)}{2}<br>$$</p><p>上面是一个特殊的定义,更加一般的定义是:<br>$$<br>f(ax_1+bx_2)&gt;af(x_1)+bf(x_2)。    a+b=1<br>$$<br>那么凹函数也就是凸函数取反，即可得到。</p><h4 id="凹函数"><a href="#凹函数" class="headerlink" title="凹函数"></a>凹函数</h4><p>$$<br>f(ax_1+bx_2)&lt;af(x_1)+bf(x_2)。    a+b=1<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;线性回归&quot;&gt;&lt;a href=&quot;#线性回归&quot; class=&quot;headerlink&quot; title=&quot;线性回归&quot;&gt;&lt;/a&gt;线性回归&lt;/h2&gt;&lt;p&gt;个人理解是通过建立反馈机制,逐层优化筛选最优的权重参数,以达到对最佳算法的逼近.也就是通过数值解逼近解析解.&lt;/p&gt;
&lt;h3 id=&quot;预测二手房价格&quot;&gt;&lt;a href=&quot;#预测二手房价格&quot; class=&quot;headerlink&quot; title=&quot;预测二手房价格&quot;&gt;&lt;/a&gt;预测二手房价格&lt;/h3&gt;
    
    </summary>
    
    
      <category term="AiLearning" scheme="https://www.tanknee.cn/categories/AiLearning/"/>
    
    
      <category term="线性回归" scheme="https://www.tanknee.cn/tags/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    
      <category term="neural network" scheme="https://www.tanknee.cn/tags/neural-network/"/>
    
      <category term="machine learning" scheme="https://www.tanknee.cn/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Twenty</title>
    <link href="https://www.tanknee.cn/2020/07/04/twenty/"/>
    <id>https://www.tanknee.cn/2020/07/04/twenty/</id>
    <published>2020-07-03T16:00:00.000Z</published>
    <updated>2022-06-17T07:41:04.784Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本想写几句无关痛痒的话，放几张莫名其妙的图片就了事，但今天做完工程实训的答辩，确实有很多很多的话想说出来。无意写成实训的心得感悟，只是于此往前回顾时有种一眼<strong>万年</strong>的<strong>陌生</strong>感。一年多前，用着蹩脚的安卓写一个烂的不行的<code>ToDoList</code>现在想想虽然觉得有点可笑，但那种翻遍万书仍然不得答案的感觉仍然会一下涌上来。</p><p>成长这个词已经用烂了，我没有长大，我只是对这些都熟悉了，仅此而已。但我也拿不准我还是不是昨天躺下睡着前的那个我，或许是的，但为何今早掠过河边看对岸的<strong>藤架</strong>仍有种熟悉而陌生的感觉。</p><h2 id="噩梦一则"><a href="#噩梦一则" class="headerlink" title="噩梦一则"></a>噩梦一则</h2><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/07/20200703a8d6569dc3473.png" alt="记于6月4日03：26"></p><h2 id="Demo一支"><a href="#Demo一支" class="headerlink" title="Demo一支"></a>Demo一支</h2><iframe src="//player.bilibili.com/player.html?aid=541134374&bvid=BV1zi4y1G7rB&cid=208480513&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe><h2 id="彩蛋一副"><a href="#彩蛋一副" class="headerlink" title="彩蛋一副"></a>彩蛋一副</h2><blockquote><p>一段简单的伪代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">AliPay</span> <span class="keyword">from</span> <span class="string">&#x27;YourApps&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Content</span> <span class="keyword">from</span> <span class="string">&#x27;ThisArticle&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> words = <span class="title class_">Content</span>.<span class="property">words</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> redPocketToken = words.<span class="title function_">map</span>(<span class="function">(<span class="params">word</span>) =&gt;</span> word.<span class="property">isBold</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">AliPay</span>.<span class="title function_">launch</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">AliPayMainScreen</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> searchComponent = <span class="title class_">AliPayMainScreen</span>.<span class="title function_">getSearchComponent</span>();</span><br><span class="line">searchComponent.<span class="title function_">search</span>(<span class="string">&#x27;红包&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">RedPocketPage</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> redPocketTokenComponent = <span class="title class_">RedPocketPage</span>.<span class="title function_">getRedPocketTokenComponent</span>();</span><br><span class="line">redPocketTokenComponent.<span class="title function_">search</span>(redPocketToken).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Congratulation!&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>Tips：如果你实在看不懂并且找不到口令，那我这提示也太没意思了。</p></blockquote><hr><p><em>谢谢你看到这里</em></p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;p&gt;本想写几句无关痛痒的话，放几张莫名其妙的图片就了事，但今天做完工程实训的答辩，确实有很多很多的话想说出来。无意写成实训的心得感悟，只是于此往前回顾时有种一眼&lt;strong&gt;万年&lt;/strong&gt;的&lt;strong&gt;陌生&lt;/strong&gt;感。一年多前，用着蹩脚的安卓写一个烂的不行的&lt;code&gt;ToDoList&lt;/code&gt;现在想想虽然觉得有点可笑，但那种翻遍万书仍然不得答案的感觉仍然会一下涌上来。&lt;/p&gt;
&lt;p&gt;成长这个词已经用烂了，我没有长大，我只是对这些都熟悉了，仅此而已。但我也拿不准我还是不是昨天躺下睡着前的那个我，或许是的，但为何今早掠过河边看对岸的&lt;strong&gt;藤架&lt;/strong&gt;仍有种熟悉而陌生的感觉。&lt;/p&gt;
&lt;h2 id=&quot;噩梦一则&quot;&gt;&lt;a href=&quot;#噩梦一则&quot; class=&quot;headerlink&quot; title=&quot;噩梦一则&quot;&gt;&lt;/a&gt;噩梦一则&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Month" scheme="https://www.tanknee.cn/categories/Month/"/>
    
    
      <category term="年度" scheme="https://www.tanknee.cn/tags/%E5%B9%B4%E5%BA%A6/"/>
    
      <category term="红包" scheme="https://www.tanknee.cn/tags/%E7%BA%A2%E5%8C%85/"/>
    
      <category term="抽奖" scheme="https://www.tanknee.cn/tags/%E6%8A%BD%E5%A5%96/"/>
    
  </entry>
  
  <entry>
    <title>阿里云Ai训练营DayThree</title>
    <link href="https://www.tanknee.cn/2020/06/06/aliyunAiDayThree/"/>
    <id>https://www.tanknee.cn/2020/06/06/aliyunAiDayThree/</id>
    <published>2020-06-06T12:58:21.000Z</published>
    <updated>2022-06-17T07:24:21.699Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>今天的主题是制作AI识别相册.</p><h3 id="实例截图"><a href="#实例截图" class="headerlink" title="实例截图"></a>实例截图</h3><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/06/202006068b29c7c5ba9dc.png" alt=""></p><p>主要是实现对图片内容的解析识别,然后提取标签做一个双向分类.</p><h2 id="主要依赖项"><a href="#主要依赖项" class="headerlink" title="主要依赖项"></a>主要依赖项</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.67<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-codec/commons-codec --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.aliyun/aliyun-java-sdk-core --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.aliyun/facebody --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>facebody<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.aliyun/imagerecog --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>imagerecog<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前端是由简单的<code>Vue</code>来实现的.</p><blockquote><p>这里没有用SSR这些后端渲染的方法来实现,而是使用<code>AXIOS</code>来实现数据请求</p></blockquote><h2 id="主要逻辑"><a href="#主要逻辑" class="headerlink" title="主要逻辑"></a>主要逻辑</h2><p>在web端上传图片,通过<code>upload</code>组件将图片传到后端,后端将图片通过阿里云<code>SDK</code>传到对应的处理服务,然后获取识别结果,存入到本地,再做对前台的响应.</p><p>当前端点击网页上的标签时就会发起请求,后端服务从存在本地的<code>JSON</code>文件读取出数据,再进行响应.</p><h2 id="主要业务代码分析"><a href="#主要业务代码分析" class="headerlink" title="主要业务代码分析"></a>主要业务代码分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">recognizeScene</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 实例化图像识别请求</span></span><br><span class="line">        <span class="type">RecognizeSceneAdvanceRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecognizeSceneAdvanceRequest</span>();</span><br><span class="line">        <span class="comment">// 将图像流挂载到请求上</span></span><br><span class="line">        request.imageURLObject = inputStream;</span><br><span class="line">        <span class="comment">// 实例化一个标签缓冲区</span></span><br><span class="line">        List&lt;String&gt; labels = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化图像识别请求client</span></span><br><span class="line">            com.aliyun.imagerecog.<span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> getImageRecogClient(imageRecogEndpoint);</span><br><span class="line">            <span class="comment">// 获取识别结果</span></span><br><span class="line">            <span class="type">RecognizeSceneResponse</span> <span class="variable">resp</span> <span class="operator">=</span> client.recognizeSceneAdvance(request, <span class="keyword">new</span> <span class="title class_">RuntimeObject</span>());</span><br><span class="line">            <span class="keyword">for</span> (RecognizeSceneResponse.RecognizeSceneResponseDataTags tag: resp.data.tags) &#123;</span><br><span class="line">                <span class="comment">// 将识别结果加入到缓冲区中</span></span><br><span class="line">                labels.add(tag.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            <span class="comment">// 错误处理</span></span><br><span class="line">            log.error(<span class="string">&quot;ErrCode:&#123;&#125;, ErrMsg:&#123;&#125;, RequestId:&#123;&#125;&quot;</span>, e.getErrCode(), e.getErrMsg(), e.getRequestId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> labels;</span><br><span class="line">    &#125; labels;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面的代码实现了标签提取,并加入了链表.</p><blockquote><p>其他部分的业务代码大多类似雷同,不再赘述</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;主题&quot;&gt;&lt;a href=&quot;#主题&quot; class=&quot;headerlink&quot; title=&quot;主题&quot;&gt;&lt;/a&gt;主题&lt;/h2&gt;&lt;p&gt;今天的主题是制作AI识别相册.&lt;/p&gt;
&lt;h3 id=&quot;实例截图&quot;&gt;&lt;a href=&quot;#实例截图&quot; class=&quot;headerlink&quot; title=&quot;实例截图&quot;&gt;&lt;/a&gt;实例截图&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
      <category term="code" scheme="https://www.tanknee.cn/tags/code/"/>
    
      <category term="ai" scheme="https://www.tanknee.cn/tags/ai/"/>
    
      <category term="aliyun" scheme="https://www.tanknee.cn/tags/aliyun/"/>
    
  </entry>
  
  <entry>
    <title>阿里云Ai训练营DayTwo</title>
    <link href="https://www.tanknee.cn/2020/06/05/aliyunAiDayTwo/"/>
    <id>https://www.tanknee.cn/2020/06/05/aliyunAiDayTwo/</id>
    <published>2020-06-05T13:29:12.000Z</published>
    <updated>2022-06-17T07:24:21.697Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>今天的主题是使用<code>springboot starter</code>和阿里云的AI识别sdk构建一个身份证识别应用。</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/06/2020060603434bc5632e5.png/imgzip" alt="image-20200606123248413"></p><h3 id="主要依赖项"><a href="#主要依赖项" class="headerlink" title="主要依赖项"></a>主要依赖项</h3><ul><li><p><code>spring-boot-starter-web</code></p></li><li><p>页面模板<code>spring-boot-starter-thymeleaf</code></p></li><li><p>阿里云识别组件与json组件</p><ul><li>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ocr<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.67<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="主要逻辑"><a href="#主要逻辑" class="headerlink" title="主要逻辑"></a>主要逻辑</h3><p>用户在web端上传身份证的正反面的照片，然后传递到<code>springboot</code>，然后由后端将图像传递到阿里云的识别服务，等待识别服务响应识别结果，最后将结果渲染到<code>thymeleaf</code>模板中返还给用户实现完整逻辑。</p><h3 id="代码实现分析解读"><a href="#代码实现分析解读" class="headerlink" title="代码实现分析解读"></a>代码实现分析解读</h3><h4 id="Controller层上传文件部分"><a href="#Controller层上传文件部分" class="headerlink" title="Controller层上传文件部分"></a>Controller层上传文件部分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(<span class="meta">@RequestParam(&quot;face&quot;)</span> MultipartFile face, <span class="meta">@RequestParam(&quot;back&quot;)</span> MultipartFile back,</span></span><br><span class="line"><span class="params">            RedirectAttributes attributes)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否上传了空文件</span></span><br><span class="line">        <span class="keyword">if</span> (face.isEmpty() || back.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 显示报错信息</span></span><br><span class="line">            attributes.addFlashAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Please select a file to upload.&quot;</span>);</span><br><span class="line">            <span class="comment">// 路由跳转</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化错误信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">errorMessage</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 根据相对路径获取上传目录的绝对路径</span></span><br><span class="line">            <span class="type">Path</span> <span class="variable">dir</span> <span class="operator">=</span> Paths.get(uploadDirectory);</span><br><span class="line">            <span class="comment">// 检测路径的存在性，避免因为路径不存在而报错</span></span><br><span class="line">            <span class="keyword">if</span> (!Files.exists(dir)) &#123;</span><br><span class="line">                Files.createDirectories(dir);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 个人感觉下面两部分的空检测是不必要的，上面已经检测过一遍了</span></span><br><span class="line">            <span class="keyword">if</span> (!face.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// 将文本流保存到本地，并获取对应的文件名。文件名是随机ID</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> saveFile(face);</span><br><span class="line">                <span class="comment">// 调用OCR服务，获取识别人脸面的识别信息</span></span><br><span class="line">                Map&lt;String, String&gt; res = ocrService.RecognizeIdCard(uploadDirectory + filename, <span class="string">&quot;face&quot;</span>);</span><br><span class="line">                <span class="comment">// 在缓存中加入识别成功的文件</span></span><br><span class="line">                faceImages.add(<span class="string">&quot;/images/&quot;</span> + filename);</span><br><span class="line">                <span class="comment">// 在缓存中加入识别结果</span></span><br><span class="line">                faceResults.add(res);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 背部的识别同上</span></span><br><span class="line">            <span class="keyword">if</span> (!back.isEmpty()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> saveFile(back);</span><br><span class="line">                Map&lt;String, String&gt; res = ocrService.RecognizeIdCard(uploadDirectory + filename, <span class="string">&quot;back&quot;</span>);</span><br><span class="line">                backImages.add(<span class="string">&quot;/images/&quot;</span> + filename);</span><br><span class="line">                backResults.add(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TeaException e) &#123;</span><br><span class="line">            <span class="comment">// 错误捕捉</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            errorMessage = JSON.toJSONString(e.getData());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            errorMessage = e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否有错误报出</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(errorMessage)) &#123;</span><br><span class="line">            attributes.addFlashAttribute(<span class="string">&quot;message&quot;</span>, errorMessage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 路由跳转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="OCR服务"><a href="#OCR服务" class="headerlink" title="OCR服务"></a>OCR服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 身份证识别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> side 身份证的面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 识别结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">RecognizeIdCard</span><span class="params">(String filePath, String side)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 实例化请求</span></span><br><span class="line">        <span class="type">RecognizeIdentityCardAdvanceRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecognizeIdentityCardAdvanceRequest</span>();</span><br><span class="line">        <span class="comment">// 加载需要识别的图像流</span></span><br><span class="line">        request.imageURLObject = Files.newInputStream(Paths.get(filePath));</span><br><span class="line">        <span class="comment">// 加载对应的面：人像面或者是国徽面</span></span><br><span class="line">        request.side = side;</span><br><span class="line">        <span class="comment">// 发送请求并获取响应</span></span><br><span class="line">        <span class="type">RecognizeIdentityCardResponse</span> <span class="variable">response</span> <span class="operator">=</span> ocrClient.recognizeIdentityCardAdvance(request, runtime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;face&quot;</span>.equals(side)) &#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.parseObject(JSON.toJSONString(response.data.frontResult), <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, String&gt;&gt;() &#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> JSON.parseObject(JSON.toJSONString(response.data.backResult), <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, String&gt;&gt;() &#123;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div class="admonition note"><p class="admonition-title">下面是完整代码地址</p><p>源码地址:   <a href="https://github.com/aliyun/alibabacloud-viapi-demo/tree/master">https://github.com/aliyun/alibabacloud-viapi-demo/tree/master</a></p></div>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h3 id=&quot;主题&quot;&gt;&lt;a href=&quot;#主题&quot; class=&quot;headerlink&quot; title=&quot;主题&quot;&gt;&lt;/a&gt;主题&lt;/h3&gt;&lt;p&gt;今天的主题是使用&lt;code&gt;springboot starter&lt;/code&gt;和阿里云的AI识别sdk构建一个身份证识别应用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif&quot; data-original=&quot;https://img.tanknee.cn/blogpicbed/2020/06/2020060603434bc5632e5.png/imgzip&quot; alt=&quot;image-20200606123248413&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
      <category term="code" scheme="https://www.tanknee.cn/tags/code/"/>
    
      <category term="ai" scheme="https://www.tanknee.cn/tags/ai/"/>
    
      <category term="aliyun" scheme="https://www.tanknee.cn/tags/aliyun/"/>
    
  </entry>
  
  <entry>
    <title>阿里云Ai训练营DayOne</title>
    <link href="https://www.tanknee.cn/2020/06/04/aliyunAiDayOne/"/>
    <id>https://www.tanknee.cn/2020/06/04/aliyunAiDayOne/</id>
    <published>2020-06-04T06:56:03.000Z</published>
    <updated>2022-06-17T07:24:21.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="视觉生产"><a href="#视觉生产" class="headerlink" title="视觉生产"></a>视觉生产</h2><p>生产是输入输出的过程</p><ol><li>给予一定的生产素材</li><li>然后通过视觉生产基础框架对素材，需求进行一定的语义分析理解</li><li>再经过视觉生产模型产出对应的产品。</li></ol><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/06/20200604d52334ae74a5e.png" alt="image-20200604141614170"></p><h3 id="生产的难点"><a href="#生产的难点" class="headerlink" title="生产的难点"></a>生产的难点</h3><p>生产的难点在于对视觉输入素材的准确理解。</p><p>与一般性输入不同，大多数的视觉生产的输入参数是包含难以语义化的图片，是机器无法直接理解处理的流，因此在开始对应的生产服务之前需要对图片进行分割精细理解。</p><ol><li>知道是什么<ol><li>人的识别</li><li>车的识别</li></ol></li><li>知道识别对象的位置<ol><li>找到缺陷的位置</li><li>画面中多对象的识别</li></ol></li><li>知道每一个像素是什么</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;视觉生产&quot;&gt;&lt;a href=&quot;#视觉生产&quot; class=&quot;headerlink&quot; title=&quot;视觉生产&quot;&gt;&lt;/a&gt;视觉生产&lt;/h2&gt;&lt;p&gt;生产是输入输出的过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;给予一定的生产素材&lt;/li&gt;
&lt;li&gt;然后通过视觉生产基础框架对素材，需求进行一定的语义分析理解&lt;/li&gt;
&lt;li&gt;再经过视觉生产模型产出对应的产品。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
      <category term="code" scheme="https://www.tanknee.cn/tags/code/"/>
    
      <category term="ai" scheme="https://www.tanknee.cn/tags/ai/"/>
    
      <category term="aliyun" scheme="https://www.tanknee.cn/tags/aliyun/"/>
    
  </entry>
  
  <entry>
    <title>Hexo静态网站多线部署</title>
    <link href="https://www.tanknee.cn/2020/06/02/Hexo%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E5%A4%9A%E7%BA%BF%E9%83%A8%E7%BD%B2/"/>
    <id>https://www.tanknee.cn/2020/06/02/Hexo%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E5%A4%9A%E7%BA%BF%E9%83%A8%E7%BD%B2/</id>
    <published>2020-06-02T10:04:09.000Z</published>
    <updated>2022-06-17T07:24:21.684Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>多线部署：将同一个域名解析到多个服务器，并让不同地区的用户访问不同地区的服务器，以获得最好的访问体验</p></blockquote><p>​    Hexo是静态网站，因此只需要服务器能够发送静态网页就足够了，国内的选择是<code>coding pages</code>或者是<code>gitee pages</code>但是后者码云的免费版并不能提供自定义域名服务，所以不予考虑。国外的可以选择 <code>GitHub Pages</code>。</p><p>​    🆗，首先你需要一个域名，然后在你的域名服务供应商那里做如下设置。</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/06/20200602c491318874016.png" alt="将域名的CNAME记录指向github page"></p><p>​    将域名的<code>CNAME</code>记录指向<code>github page</code>，此处需要DNS服务商提供对应的解析线路，将境外线路应用给<code>github page</code>,同理，将境内线路或是默认线路给到<code>coding pages</code>。</p><blockquote><p>此处会遇到<code>coding pages</code>时常抽风导致无法访问的问题，我的建议是使用自己买的服务器来部署，虽然这样就脱离了使用静态网站的初心–省钱</p></blockquote><p>​    然后在Hexo的发布选项中添加两个静态网页供应商的<code>git</code>地址。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span></span><br><span class="line">        <span class="attr">github:</span> <span class="string">git@github.com:TankNee/xxx.github.io.git</span></span><br><span class="line">        <span class="attr">coding:</span> <span class="string">git@e.coding.net:tanknee/xxx.coding.me.git</span></span><br><span class="line">        <span class="attr">gitea:</span> <span class="string">git@git.xxx.cn:tanknee/xxx.gitea.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><blockquote><p>其中<code>github</code>和<code>coding</code>都提供了自动部署服务，所以就只需要提交代码到你对应的仓库就好了</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;多线部署：将同一个域名解析到多个服务器，并让不同地区的用户访问不同地区的服务器，以获得最好的访问体验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​    Hexo是静态网站，因此只需要服务器能够发送静态网页就足够了，国内的选择是&lt;code&gt;coding pages&lt;/code&gt;或者是&lt;code&gt;gitee pages&lt;/code&gt;但是后者码云的免费版并不能提供自定义域名服务，所以不予考虑。国外的可以选择 &lt;code&gt;GitHub Pages&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;​    🆗，首先你需要一个域名，然后在你的域名服务供应商那里做如下设置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
      <category term="网站" scheme="https://www.tanknee.cn/tags/%E7%BD%91%E7%AB%99/"/>
    
      <category term="域名" scheme="https://www.tanknee.cn/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>五月May</title>
    <link href="https://www.tanknee.cn/2020/06/01/569/"/>
    <id>https://www.tanknee.cn/2020/06/01/569/</id>
    <published>2020-06-01T06:51:00.000Z</published>
    <updated>2022-06-17T07:24:21.668Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-pzRwsrgb" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="28402351" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><p>提笔落字时总觉自己文疏才浅，阅历浅薄，无从着笔。</p><p>五月共三十一天，步数超过3000的日子大概不足十天，倒是出去吃饭吃了很多次。</p><p>一号结束了为期两个月的打工生涯，小半年也算是搞到了第一笔大额资金。</p><p>八号往鹅厂投了简历，挣扎了两三天，终是没过，虽然也没给原因，大概就是因为我太菜了吧，一问三不知。</p><blockquote><p>2020年5月8日</p><p>电话面试，深圳总部面试</p><ol><li>dom事件的冒泡与捕获</li><li>CSS中的样式优先级是怎样分布的</li><li>React-Native的底层实现，是如何与原生系统进行交互的</li><li>算法题：找出一个字符串的最长重复子序列</li></ol><p>2020年5月15日</p><p>电话面试，武汉腾讯</p><ol><li>JavaScript原型链的实现（不了解）</li><li>http协议中数据传输的编码方式，发送json格式的数据时的content-type</li><li>说一下auth2.0</li><li>说一下当下前端框架对Dom做了哪些优化</li><li>用户登录的实现<ol><li>使用了什么加密方式–jwt</li><li>jwt有什么缺点</li><li>session和cookie</li></ol></li><li>讲一下MySQL的索引实现（不了解）</li></ol></blockquote><p>明年再努力吧。</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/06/20200601c27bb1c554117.jpg" alt="c7b90c865a856dc54deab5445817f0c"></p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;
    &lt;div id=&quot;aplayer-pzRwsrgb&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot; data-id=&quot;28402351&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#ad7a86&quot;&gt;&lt;/div&gt;


&lt;p&gt;提笔落字时总觉自己文疏才浅，阅历浅薄，无从着笔。&lt;/p&gt;
&lt;p&gt;五月共三十一天，步数超过3000的日子大概不足十天，倒是出去吃饭吃了很多次。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
      <category term="算法" scheme="https://www.tanknee.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符" scheme="https://www.tanknee.cn/tags/%E5%AD%97%E7%AC%A6/"/>
    
      <category term="数据" scheme="https://www.tanknee.cn/tags/%E6%95%B0%E6%8D%AE/"/>
    
      <category term="dom" scheme="https://www.tanknee.cn/tags/dom/"/>
    
      <category term="面试" scheme="https://www.tanknee.cn/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="文疏" scheme="https://www.tanknee.cn/tags/%E6%96%87%E7%96%8F/"/>
    
      <category term="实现" scheme="https://www.tanknee.cn/tags/%E5%AE%9E%E7%8E%B0/"/>
    
      <category term="着笔" scheme="https://www.tanknee.cn/tags/%E7%9D%80%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>四月April</title>
    <link href="https://www.tanknee.cn/2020/05/02/568/"/>
    <id>https://www.tanknee.cn/2020/05/02/568/</id>
    <published>2020-05-02T09:25:00.000Z</published>
    <updated>2022-06-17T07:24:21.689Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-TfPRVuSP" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="450567505" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h3 id="Gitea-Contribution"><a href="#Gitea-Contribution" class="headerlink" title="Gitea Contribution"></a>Gitea Contribution</h3><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/05/2020050214eb2f8ad8224.png" alt="Gitea Contribution"></p><h3 id="Github-Contribution"><a href="#Github-Contribution" class="headerlink" title="Github Contribution"></a>Github Contribution</h3><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/05/202005021736d66679c34.png" alt="Github Contribution"></p><p>断断续续写了一快一整年的月报了，还是没有确定究竟要留下一个什么样的形式。偶尔会有段时间很在意某种格式，但也经常过了一会儿就不太在意了。</p><p>前两天在公众号里发了一张图片：</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/05/202005021550268653b2f.jpg" alt=""></p><p>暴力终究也会递归式地催生新的暴力反抗。</p><p>好几次在社交平台看到触动以致激怒我的言论，反驳的字已经全部打进了输入框，最后却哐哐哐全都删掉。</p><p>诚然，有那么一瞬间，想把作者的脑袋拧下来，问候他到底有没有读过书，整天逼逼赖赖发这些脑瘫言论？</p><p>但是当我全部删掉之后，突然就有那么一瞬间平静下来。</p><p>暴力是如此的易于传播，以致于每一次都会上当。</p><p>发完这张图片之后，又在原博评论里看到新的东西：</p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/05/202005021cae5c08d3bf2.png" alt="评论"></p><blockquote><p>达克效应（D-K effect）</p><p>全称为邓宁-克鲁格效应（Dunning-Kruger effect）。它是一种认知偏差现象，指的是能力欠缺的人在自己欠考虑的决定的基础上得出错误结论，但是无法正确认识到自身的不足，辨别错误行为。这些能力欠缺者们沉浸在自我营造的虚幻的优势之中，常常高估自己的能力水平，却无法客观评价他人的能力。</p></blockquote><p>上了大学之后，看到的无知的事情越来越多，起初是愤懑，想着义正言辞地反驳，幻想我这一段狗屁不通的言论能起到一点点我设想的效果，后来也就慢慢冷静。</p><p><strong>没有人想听你的教诲和理由，你是什么，他又是什么？</strong></p><p>碰了几鼻子的灰之后再也没有跟人抬杠的心情，挺好的。</p><p>Keep hungry and keep stupid!</p><hr><p>也祝五月返校的各位开学愉快，暑假相会</p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;
    &lt;div id=&quot;aplayer-TfPRVuSP&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot; data-id=&quot;450567505&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#ad7a86&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;Gitea-Contribution&quot;&gt;&lt;a href=&quot;#Gitea-Contribution&quot; class=&quot;headerlink&quot; title=&quot;Gitea Contribution&quot;&gt;&lt;/a&gt;Gitea Contribution&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif&quot; data-original=&quot;https://img.tanknee.cn/blogpicbed/2020/05/2020050214eb2f8ad8224.png&quot; alt=&quot;Gitea Contribution&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Caprice" scheme="https://www.tanknee.cn/categories/Caprice/"/>
    
    
      <category term="server" scheme="https://www.tanknee.cn/tags/server/"/>
    
      <category term="meting" scheme="https://www.tanknee.cn/tags/meting/"/>
    
      <category term="netease" scheme="https://www.tanknee.cn/tags/netease/"/>
    
      <category term="type" scheme="https://www.tanknee.cn/tags/type/"/>
    
      <category term="图片" scheme="https://www.tanknee.cn/tags/%E5%9B%BE%E7%89%87/"/>
    
      <category term="effect" scheme="https://www.tanknee.cn/tags/effect/"/>
    
      <category term="暴力" scheme="https://www.tanknee.cn/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="言论" scheme="https://www.tanknee.cn/tags/%E8%A8%80%E8%AE%BA/"/>
    
      <category term="keep" scheme="https://www.tanknee.cn/tags/keep/"/>
    
  </entry>
  
  <entry>
    <title>昼夜双版Typecho主题SplityRemake-新世界的灰烬</title>
    <link href="https://www.tanknee.cn/2020/04/15/splity-remake/"/>
    <id>https://www.tanknee.cn/2020/04/15/splity-remake/</id>
    <published>2020-04-15T09:36:00.000Z</published>
    <updated>2022-06-17T07:24:21.675Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>但愿旧世界的火光能够燃尽晦暗</p></blockquote><p>在前端的路上走走停停，玩了快大半年，发现自己确实还没有能力承载一个完成的项目，每次都是做了一半就已经十分的疲倦。</p><h2 id="Tribute-and-Disclaimer"><a href="#Tribute-and-Disclaimer" class="headerlink" title="Tribute and Disclaimer"></a>Tribute and Disclaimer</h2><p>本来是想拿着原始的<code>Default</code>主题直接修改，但发现实在是太简陋了…就没有用那个，前两天在<a href="https://www.dpaoz.com/">一个网站</a>上看到了这个主题的原版(Splity)。</p><blockquote><p>其实这个的原版也是仿照着一个付费的wordpress主题写的，我咨询了Splity的原作者，他许可了我的二次修改与发布，如果上述有任何一方认为我的行为有侵权嫌疑，那么请联系我删除该主题的所有信息。</p></blockquote><p><strong>再次感谢每一位作者的付出与灵感，我不希望我的改动会损害到您的利益，如果实有冒犯，请联系我删除，谢谢</strong></p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/202004157bce857b07891.png" alt="演示图"></p><h2 id="Here-is-the-change-log"><a href="#Here-is-the-change-log" class="headerlink" title="Here is the change log"></a>Here is the change log</h2><ul><li><p>修复黑暗模式的bug</p></li><li><p>增加文章目录的输出</p></li><li><p>调整文章缩略图的输出</p></li><li><p>去除主页的走马灯效果</p></li><li><p>去除个人信息栏的简介– </p><ul><li><del>后续准备添加一言api</del>(已完成)</li></ul></li><li><p>调整最新文章的数量</p></li><li><p>文章页自动隐藏 最新文章和最热文章两个项目</p></li><li><p>内置添加图片灯箱效果</p></li><li><p>调整markdown文章格式</p></li><li><p>调整header的栏目输出</p></li><li><p>页首添加了动画</p></li><li><p>修改了文章中a标签的样式</p></li><li><p>修改了图片的显示</p></li><li><p>mobile端文章目录的支持</p></li><li><p>修复了图片分享的bug</p></li><li><p>添加了<code>pretag</code>和<code>prebadge</code>的字段支持</p></li></ul><blockquote><p>徽标和标签支持</p></blockquote><blockquote><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/2020041177f60cc42daeb.png" alt="徽标演示"/></blockquote><blockquote><p>详情请前往文章编辑页查看！</p></blockquote><ul><li>修复了tag输出的问题</li><li>添加颜文字的支持</li><li>添加了对LaTeX公式的支持</li><li>修复OwO颜文字的显示</li><li>修改评论区的字体</li><li>修复button样式</li><li>修复生成分享海报时的问题<ul><li>修复海报图片跨域问题</li><li>修复海报摘要显示问题</li></ul></li><li>添加index界面文章发表时间的显示</li><li>添加了评论区UA的显示</li><li>加回了走马灯效果，并修改了图片显示逻辑</li><li>修复登录按钮显示异常</li></ul><h2 id="Download-and-use"><a href="#Download-and-use" class="headerlink" title="Download and use"></a>Download and use</h2><ol><li>首先你应该前往<a href="https://github.com/TankNee/SplityRemake">GitHub</a>或者<a href="https://git.tanknee.cn/tanknee/Splity-Remake/src/branch/master">Gitea</a>的主页下载<code>SplityRemake</code>的压缩包</li></ol><blockquote><p><code>master</code>分支的版本是较为稳定的版本，一般情况下请下载该版本的主题</p><p><code>develop</code>分支是正在开发中的版本，一般来说每一天会合并一次<code>develop</code>和<code>master</code></p></blockquote><ol start="2"><li>将下载的压缩包上传到typecho的theme文件夹下</li><li>解压压缩包，并重命名为<code>splity</code>，<strong>这一点十分重要，请务必改对名称，否则会出现不可预知的错误</strong></li><li>打开后台的主题页面配置主题</li></ol><h2 id="Issue"><a href="#Issue" class="headerlink" title="Issue"></a>Issue</h2><p>已知的错误是海报生成时有大概率失败，这与您的图片托管服务商有关，请配置跨域信息</p><h2 id="To-Do"><a href="#To-Do" class="headerlink" title="To Do"></a>To Do</h2><ul><li><input checked="" disabled="" type="checkbox"> 完成归档页面的编写</li><li><input checked="" disabled="" type="checkbox"> 实现留言板界面的优化</li><li><input checked="" disabled="" type="checkbox"> 实现评论区表情的输入</li><li><input checked="" disabled="" type="checkbox"> 实现友链的优化</li><li><input checked="" disabled="" type="checkbox"> 实现OwO的夜间模式的优化</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;但愿旧世界的火光能够燃尽晦暗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在前端的路上走走停停，玩了快大半年，发现自己确实还没有能力承载一个完成的项目，每次都是做了一半就已经十分的疲倦。&lt;/p&gt;
&lt;h2 id=&quot;Tribute-and-Disclaimer&quot;&gt;&lt;a href=&quot;#Tribute-and-Disclaimer&quot; class=&quot;headerlink&quot; title=&quot;Tribute and Disclaimer&quot;&gt;&lt;/a&gt;Tribute and Disclaimer&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
      <category term="网站" scheme="https://www.tanknee.cn/tags/%E7%BD%91%E7%AB%99/"/>
    
      <category term="文件" scheme="https://www.tanknee.cn/tags/%E6%96%87%E4%BB%B6/"/>
    
      <category term="wordpress" scheme="https://www.tanknee.cn/tags/wordpress/"/>
    
      <category term="typecho" scheme="https://www.tanknee.cn/tags/typecho/"/>
    
      <category term="按钮" scheme="https://www.tanknee.cn/tags/%E6%8C%89%E9%92%AE/"/>
    
      <category term="button" scheme="https://www.tanknee.cn/tags/button/"/>
    
      <category term="markdown" scheme="https://www.tanknee.cn/tags/markdown/"/>
    
      <category term="图片" scheme="https://www.tanknee.cn/tags/%E5%9B%BE%E7%89%87/"/>
    
      <category term="页面" scheme="https://www.tanknee.cn/tags/%E9%A1%B5%E9%9D%A2/"/>
    
      <category term="修复" scheme="https://www.tanknee.cn/tags/%E4%BF%AE%E5%A4%8D/"/>
    
      <category term="文章" scheme="https://www.tanknee.cn/tags/%E6%96%87%E7%AB%A0/"/>
    
      <category term="添加" scheme="https://www.tanknee.cn/tags/%E6%B7%BB%E5%8A%A0/"/>
    
      <category term="评论区" scheme="https://www.tanknee.cn/tags/%E8%AF%84%E8%AE%BA%E5%8C%BA/"/>
    
      <category term="splity" scheme="https://www.tanknee.cn/tags/splity/"/>
    
  </entry>
  
  <entry>
    <title>算法分析入门系列(三) 动态规划算法</title>
    <link href="https://www.tanknee.cn/2020/04/15/alogrithmanalysis_3/"/>
    <id>https://www.tanknee.cn/2020/04/15/alogrithmanalysis_3/</id>
    <published>2020-04-15T09:00:00.000Z</published>
    <updated>2022-06-17T07:24:21.695Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="作业排程问题"><a href="#作业排程问题" class="headerlink" title="作业排程问题"></a>作业排程问题</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>Automobile factory with two assembly lines(汽车厂两条装配线)</p><p>– Each line has n stations: S1,1, . . . , S1,n and S2,1, . . . , S2,n(每条装</p><p>配线有n个工序站台)</p><p>– Corresponding stations S1, j and S2, j perform the same function </p><p>but can take different amounts of time a1, j and a2, j (每条装配线的</p><p>第j个站台的功能相同,但是效率不一致)</p><p>– Entry times e1 and e2 and exit times x1 and x2(上线和下线时间)</p></blockquote><p>描述并实现动态规划的作业排程算法，并显示下图的排程结果。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/2020033165dde9b215a42.png"/><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OperationSequencing</span></span><br><span class="line"><span class="comment"> * 作业排程算法实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * int arrayA[2][5] = &#123; 7,9,3,4,8,8,5,6,4,5 &#125;; int arrayT[2][4] = &#123;</span></span><br><span class="line"><span class="comment"> * 2,3,1,3,2,1,2,2 &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperationSequencing</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Route&gt; routes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToRoutes</span><span class="params">(Node node, Integer costTime)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (Route route : routes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (route.getWorkIndex() == node.getWorkIndex() &amp;&amp; costTime &lt; route.getCostTime()) &#123;</span><br><span class="line">                route.setLineIndex(node.getLineIndex());</span><br><span class="line">                route.setCostTime(costTime);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (route.getWorkIndex() == node.getWorkIndex()) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            routes.add(<span class="keyword">new</span> <span class="title class_">Route</span>(node.getLineIndex(), node.getWorkIndex(), costTime));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printRoutes</span><span class="params">()</span> &#123;</span><br><span class="line">        Collections.sort(routes, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Route&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Route r1, Route r2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> r1.getWorkIndex() - r2.getWorkIndex();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.print(<span class="string">&quot;enter--&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Route route : routes) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;(&quot;</span> + route.getLineIndex() + <span class="string">&quot;,&quot;</span> + route.getWorkIndex() + <span class="string">&quot;)--&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getShortestTime</span><span class="params">(WorkingGraph workingGraph, Node endNode)</span> &#123;</span><br><span class="line">        <span class="type">WorkingGraph</span> <span class="variable">_workingGraph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkingGraph</span>(workingGraph);</span><br><span class="line">        <span class="keyword">if</span> (endNode.getParents().size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Edge.getEdgeWeight(_workingGraph.getEnterNode(), endNode, _workingGraph.getEdges())</span><br><span class="line">                    + endNode.getWorkTime();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">leftParentTime</span> <span class="operator">=</span> Edge.getEdgeWeight(endNode.getParents().get(<span class="number">0</span>), endNode, _workingGraph.getEdges());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rightParentTime</span> <span class="operator">=</span> Edge.getEdgeWeight(endNode.getParents().get(<span class="number">1</span>), endNode, _workingGraph.getEdges());</span><br><span class="line">        <span class="comment">// 去掉与末尾节点相关的边</span></span><br><span class="line">        Edge.removeEdgeWithNode(endNode, _workingGraph.getEdges());</span><br><span class="line">        _workingGraph.getNodes().remove(endNode);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">leftTime</span> <span class="operator">=</span> getShortestTime(_workingGraph, endNode.getParents().get(<span class="number">0</span>)) + leftParentTime;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rightTime</span> <span class="operator">=</span> getShortestTime(_workingGraph, endNode.getParents().get(<span class="number">1</span>)) + rightParentTime;</span><br><span class="line">        addToRoutes(endNode.getParents().get(leftTime &gt; rightTime ? <span class="number">1</span> : <span class="number">0</span>),</span><br><span class="line">                leftTime &gt; rightTime ? rightTime : leftTime);</span><br><span class="line">        <span class="keyword">return</span> Math.min(leftTime, rightTime) + endNode.getWorkTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WorkingGraph</span> <span class="variable">workingGraph</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkingGraph</span>();</span><br><span class="line">        <span class="comment">// -1-1代表起始节点，-2-2代表离开节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">enter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">exit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(-<span class="number">2</span>, -<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">a11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">7</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a13</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a14</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a15</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">a21</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a22</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a23</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a24</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">a25</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        enter.addToChildren(a11);</span><br><span class="line">        enter.addToChildren(a21);</span><br><span class="line"></span><br><span class="line">        a11.addToParents(enter);</span><br><span class="line">        a11.addToChildren(a12);</span><br><span class="line">        a11.addToChildren(a22);</span><br><span class="line"></span><br><span class="line">        a21.addToParents(enter);</span><br><span class="line">        a21.addToChildren(a12);</span><br><span class="line">        a21.addToChildren(a22);</span><br><span class="line"></span><br><span class="line">        a12.addToParents(a11);</span><br><span class="line">        a12.addToParents(a21);</span><br><span class="line">        a12.addToChildren(a13);</span><br><span class="line">        a12.addToChildren(a23);</span><br><span class="line"></span><br><span class="line">        a22.addToParents(a11);</span><br><span class="line">        a22.addToParents(a21);</span><br><span class="line">        a22.addToChildren(a13);</span><br><span class="line">        a22.addToChildren(a23);</span><br><span class="line"></span><br><span class="line">        a13.addToParents(a12);</span><br><span class="line">        a13.addToParents(a22);</span><br><span class="line">        a13.addToChildren(a14);</span><br><span class="line">        a13.addToChildren(a24);</span><br><span class="line"></span><br><span class="line">        a23.addToParents(a12);</span><br><span class="line">        a23.addToParents(a22);</span><br><span class="line">        a23.addToChildren(a14);</span><br><span class="line">        a23.addToChildren(a24);</span><br><span class="line"></span><br><span class="line">        a14.addToParents(a13);</span><br><span class="line">        a14.addToParents(a23);</span><br><span class="line">        a14.addToChildren(a15);</span><br><span class="line">        a14.addToChildren(a25);</span><br><span class="line"></span><br><span class="line">        a24.addToParents(a13);</span><br><span class="line">        a24.addToParents(a23);</span><br><span class="line">        a24.addToChildren(a15);</span><br><span class="line">        a24.addToChildren(a25);</span><br><span class="line"></span><br><span class="line">        a15.addToParents(a14);</span><br><span class="line">        a15.addToParents(a24);</span><br><span class="line">        a15.addToChildren(exit);</span><br><span class="line"></span><br><span class="line">        a25.addToParents(a14);</span><br><span class="line">        a25.addToParents(a24);</span><br><span class="line">        a25.addToChildren(exit);</span><br><span class="line"></span><br><span class="line">        exit.addToParents(a15);</span><br><span class="line">        exit.addToParents(a25);</span><br><span class="line"></span><br><span class="line">        List&lt;Node&gt; nodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        nodes.add(enter);</span><br><span class="line"></span><br><span class="line">        nodes.add(a11);</span><br><span class="line">        nodes.add(a12);</span><br><span class="line">        nodes.add(a13);</span><br><span class="line">        nodes.add(a14);</span><br><span class="line">        nodes.add(a15);</span><br><span class="line"></span><br><span class="line">        nodes.add(a21);</span><br><span class="line">        nodes.add(a22);</span><br><span class="line">        nodes.add(a23);</span><br><span class="line">        nodes.add(a24);</span><br><span class="line">        nodes.add(a25);</span><br><span class="line"></span><br><span class="line">        nodes.add(exit);</span><br><span class="line">        List&lt;Edge&gt; edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(enter, a11, <span class="number">2</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a11, a12, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a12, a13, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a13, a14, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a14, a15, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a15, exit, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(enter, a21, <span class="number">4</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a21, a22, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a22, a23, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a23, a24, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a24, a25, <span class="number">0</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a25, exit, <span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a11, a22, <span class="number">2</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a21, a12, <span class="number">2</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a12, a23, <span class="number">3</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a22, a13, <span class="number">1</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a13, a24, <span class="number">1</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a23, a14, <span class="number">2</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a14, a25, <span class="number">3</span>));</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(a24, a15, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        workingGraph.setNodes(nodes);</span><br><span class="line">        workingGraph.setEdges(edges);</span><br><span class="line">        workingGraph.setEnterNode(enter);</span><br><span class="line">        workingGraph.setExitNode(exit);</span><br><span class="line"></span><br><span class="line">        <span class="type">OperationSequencing</span> <span class="variable">operationSequencing</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperationSequencing</span>();</span><br><span class="line">        System.out.println(operationSequencing.getShortestTime(workingGraph, exit));</span><br><span class="line">        operationSequencing.printRoutes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图上的节点类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="comment">// 父节点</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&gt; parents;</span><br><span class="line">    <span class="comment">// 子节点</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&gt; children;</span><br><span class="line">    <span class="comment">// 流水线编号</span></span><br><span class="line">    <span class="keyword">private</span> Integer lineIndex;</span><br><span class="line">    <span class="comment">// 工作顺序编号</span></span><br><span class="line">    <span class="keyword">private</span> Integer workIndex;</span><br><span class="line">    <span class="comment">// 加工时间</span></span><br><span class="line">    <span class="keyword">private</span> Integer workTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Integer lineIndex, Integer workIndex, Integer workTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.children = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.parents = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.lineIndex = lineIndex;</span><br><span class="line">        <span class="built_in">this</span>.workIndex = workIndex;</span><br><span class="line">        <span class="built_in">this</span>.workTime = workTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Node&gt; <span class="title function_">getParents</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParents</span><span class="params">(List&lt;Node&gt; parents)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.parents = parents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToParents</span><span class="params">(Node parent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.parents.add(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Node&gt; <span class="title function_">getChildren</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChildren</span><span class="params">(List&lt;Node&gt; children)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToChildren</span><span class="params">(Node child)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.children.add(child);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getLineIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lineIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLineIndex</span><span class="params">(Integer lineIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lineIndex = lineIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getWorkIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWorkIndex</span><span class="params">(Integer workIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.workIndex = workIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getWorkTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWorkTime</span><span class="params">(Integer workTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.workTime = workTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 边类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="comment">// 起始节点</span></span><br><span class="line">    <span class="keyword">private</span> Node startNode;</span><br><span class="line">    <span class="comment">// 结束节点</span></span><br><span class="line">    <span class="keyword">private</span> Node endNode;</span><br><span class="line">    <span class="comment">// 边的权重</span></span><br><span class="line">    <span class="keyword">private</span> Integer weight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(Node startNode, Node endNode, Integer weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startNode = startNode;</span><br><span class="line">        <span class="built_in">this</span>.endNode = endNode;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取两个顶点之间的直线距离</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n1    起始节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n2    结束节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> edges</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">getEdgeWeight</span><span class="params">(Node n1, Node n2, List&lt;Edge&gt; edges)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Edge edge : edges) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge.getStartNode().equals(n1) &amp;&amp; edge.getEndNode().equals(n2))</span><br><span class="line">                <span class="keyword">return</span> edge.weight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除与指定节点相关的边</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> edges</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeEdgeWithNode</span><span class="params">(Node Node, List&lt;Edge&gt; edges)</span> &#123;</span><br><span class="line">        List&lt;Edge&gt; _removeEdges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Edge edge : edges) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge.getStartNode().equals(Node) || edge.getEndNode().equals(Node)) &#123;</span><br><span class="line">                _removeEdges.add(edge);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Edge edge : _removeEdges) &#123;</span><br><span class="line">            edges.remove(edge);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getStartNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartNode</span><span class="params">(Node startNode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startNode = startNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getEndNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndNode</span><span class="params">(Node endNode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endNode = endNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(Integer weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Route</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer lineIndex;</span><br><span class="line">    <span class="keyword">private</span> Integer workIndex;</span><br><span class="line">    <span class="keyword">private</span> Integer costTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getLineIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lineIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLineIndex</span><span class="params">(Integer lineIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lineIndex = lineIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getWorkIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWorkIndex</span><span class="params">(Integer workIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.workIndex = workIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCostTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> costTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCostTime</span><span class="params">(Integer costTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.costTime = costTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Route</span><span class="params">(Integer lineIndex, Integer workIndex, Integer costTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lineIndex = lineIndex;</span><br><span class="line">        <span class="built_in">this</span>.workIndex = workIndex;</span><br><span class="line">        <span class="built_in">this</span>.costTime = costTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工作图类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkingGraph</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Node&gt; nodes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Edge&gt; edges;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node enterNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node exitNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WorkingGraph</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WorkingGraph</span><span class="params">(WorkingGraph workingGraph)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nodes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(workingGraph.getNodes());</span><br><span class="line">        <span class="built_in">this</span>.edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(workingGraph.getEdges());</span><br><span class="line">        <span class="built_in">this</span>.enterNode = workingGraph.getEnterNode();</span><br><span class="line">        <span class="built_in">this</span>.exitNode = workingGraph.getExitNode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> WorkingGraph <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WorkingGraph</span> <span class="variable">o</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            o = (WorkingGraph) <span class="built_in">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Node&gt; <span class="title function_">getNodes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNodes</span><span class="params">(List&lt;Node&gt; nodes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nodes = nodes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Edge&gt; <span class="title function_">getEdges</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> edges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEdges</span><span class="params">(List&lt;Edge&gt; edges)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.edges = edges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getEnterNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> enterNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnterNode</span><span class="params">(Node enterNode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.enterNode = enterNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getExitNode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> exitNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExitNode</span><span class="params">(Node exitNode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.exitNode = exitNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验分析"><a href="#实验分析" class="headerlink" title="实验分析"></a>实验分析</h3><p>使用动态规划的思想，从上至下，从出口到入口。我这里还用了贪婪的策略，只需要保证每一次都是最短的工作耗时即可。</p><h2 id="最长子序列问题"><a href="#最长子序列问题" class="headerlink" title="最长子序列问题"></a>最长子序列问题</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p><em>描述并实现最长共同子序列动态规 划 算 法 ， 并 显 示 S1= ACCGGTCGAGATGCAG，S2 = GTCGTTCGGAATGCAT</em> *的最长共同子序列。 *</p><p><em>共同子序列可以是不连续的，且每个元素在母串中的位置也是可以不相同，但是顺序必须一致</em> </p></blockquote><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MaxSubsequence</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述并实现最长共同子序列动态规 划 算 法 ， 并 显 示 S1= ACCGGTCGAGATGCAG，S2 = GTCGTTCGGAATGCAT</span></span><br><span class="line"><span class="comment"> * 的最长共同子序列。 共同子序列可以是不连续的，且每个元素在母串中的位置也是可以不相同，但是顺序必须一致</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxSubsequence</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 求解最长子序列</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str1 字符串1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str2 字符串2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">lcs</span><span class="params">(String str1, String str2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> str1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> str2.length();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">int</span> c[][] = <span class="keyword">new</span> <span class="title class_">int</span>[len1 + <span class="number">1</span>][len2 + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= len2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;</span><br><span class="line">                    c[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str1.charAt(i - <span class="number">1</span>) == str2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    c[i][j] = c[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c[i][j] = Math.max(c[i - <span class="number">1</span>][j], c[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>; m &lt; Math.max(len1, len2); m++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; n &lt; Math.max(len1, len2); n++) &#123;</span><br><span class="line">                System.out.print(c[m][n] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> len1;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> len2;</span><br><span class="line">        <span class="keyword">while</span> (c[m][n] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1.charAt(m - <span class="number">1</span>) == str2.charAt(n - <span class="number">1</span>)) &#123;</span><br><span class="line">                sb.append(str1.charAt(m - <span class="number">1</span>));</span><br><span class="line">                m--;</span><br><span class="line">                n--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c[m][n] == c[m][n - <span class="number">1</span>]) &#123;</span><br><span class="line">                n--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c[m][n] == c[m - <span class="number">1</span>][n]) &#123;</span><br><span class="line">                m--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成最长子序列的字符串</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr  比较矩阵</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str1 字符串1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str2 字符串2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">generateLcs</span><span class="params">(<span class="type">int</span>[][] arr, String str1, String str2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">while</span> (arr[m][n] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1.charAt(m) == str2.charAt(n)) &#123;</span><br><span class="line">                sb.append(str1.charAt(m));</span><br><span class="line">                m--;</span><br><span class="line">                n--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[m][n] == arr[m][n - <span class="number">1</span>]) &#123;</span><br><span class="line">                n--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[m][n] == arr[m - <span class="number">1</span>][n]) &#123;</span><br><span class="line">                m--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.reverse().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MaxSubsequence</span> <span class="variable">maxSubsequence</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MaxSubsequence</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">ms</span> <span class="operator">=</span> maxSubsequence.lcs(<span class="string">&quot;ACCGGTCGAGATGCAG&quot;</span>, <span class="string">&quot;GTCGTTCGGAATGCAT&quot;</span>);</span><br><span class="line">        System.out.println(ms);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><h4 id="生成的子序列矩阵"><a href="#生成的子序列矩阵" class="headerlink" title="生成的子序列矩阵"></a>生成的子序列矩阵</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/2020041270c9c82d18684.png"/><h4 id="查找到的最长子序列"><a href="#查找到的最长子序列" class="headerlink" title="查找到的最长子序列"></a>查找到的最长子序列</h4><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200412903233dbf1532.png"/><h3 id="实验分析-1"><a href="#实验分析-1" class="headerlink" title="实验分析"></a>实验分析</h3><p>实现最长子序列的关键在于创建最长子序列矩阵，这里是使用二维数组来实现的，每一个点都与其上方，左边，左上方这三个点相关，是在判断对应字符相等于否的基础上，根据这几个点来确定当前点的值。当到达最右下角的点时，也就是点<code>dist[dist.length-1][dist.lenght-1]</code>时，也就得到了最长共同子序列的长度，然后再使用逆向思维获取最终的序列。</p><p>并且最长子序列并不是唯一的，可能有多个值，这取决于你选择的打印方式。</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li>动态规划算法范式是什么？</li></ol><p>动态规划与分治法相似，但是动态规划所划分的子问题并不是完全相互独立的，是有可能相互关联的，如果使用分治法来实现就有可能重复处理子问题，造成资源浪费。</p><p>动态规划需要将问题分为子问题，前一个子问题为后一个子问题提供信息，并且每一次求解时需要存储之前的结果，以期得到最佳答案。</p><ol start="2"><li>利用动态规划算法设计方法解决矩阵链相乘问题？</li></ol><p>矩阵链相乘问题在于寻找最好的括号加法，对于$A_{i~j}(使用该符号来代表矩阵A_i<em>A_{i+1}</em>..*A_j的最佳值)$可以选取一个数<code>k</code>,其中$i≤k≤j$成立,并且<code>k</code>是<code>i</code>到<code>j</code>中的最佳分割点，即括号的所在处，那么我们的乘法矩阵<code>m[][]</code>就可以表示为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(i==j)&#123;</span><br><span class="line">m[i][i] = 0;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">m[i][j]=min&#123;m[i][k] + m[k+1][j] + Pi-1PkPj&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后使用自底向上的思想就可以计算出最佳括号加法获得问题的解</p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;作业排程问题&quot;&gt;&lt;a href=&quot;#作业排程问题&quot; class=&quot;headerlink&quot; title=&quot;作业排程问题&quot;&gt;&lt;/a&gt;作业排程问题&lt;/h2&gt;&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Automobile factory with two assembly lines(汽车厂两条装配线)&lt;/p&gt;
&lt;p&gt;– Each line has n stations: S1,1, . . . , S1,n and S2,1, . . . , S2,n(每条装&lt;/p&gt;
&lt;p&gt;配线有n个工序站台)&lt;/p&gt;
&lt;p&gt;– Corresponding stations S1, j and S2, j perform the same function &lt;/p&gt;
&lt;p&gt;but can take different amounts of time a1, j and a2, j (每条装配线的&lt;/p&gt;
&lt;p&gt;第j个站台的功能相同,但是效率不一致)&lt;/p&gt;
&lt;p&gt;– Entry times e1 and e2 and exit times x1 and x2(上线和下线时间)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
      <category term="节点" scheme="https://www.tanknee.cn/tags/%E8%8A%82%E7%82%B9/"/>
    
      <category term="算法" scheme="https://www.tanknee.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符" scheme="https://www.tanknee.cn/tags/%E5%AD%97%E7%AC%A6/"/>
    
      <category term="flag" scheme="https://www.tanknee.cn/tags/flag/"/>
    
      <category term="length" scheme="https://www.tanknee.cn/tags/length/"/>
    
      <category term="node" scheme="https://www.tanknee.cn/tags/node/"/>
    
      <category term="line" scheme="https://www.tanknee.cn/tags/line/"/>
    
      <category term="int" scheme="https://www.tanknee.cn/tags/int/"/>
    
      <category term="arr" scheme="https://www.tanknee.cn/tags/arr/"/>
    
      <category term="o" scheme="https://www.tanknee.cn/tags/o/"/>
    
      <category term="this" scheme="https://www.tanknee.cn/tags/this/"/>
    
      <category term="return" scheme="https://www.tanknee.cn/tags/return/"/>
    
      <category term="public" scheme="https://www.tanknee.cn/tags/public/"/>
    
      <category term="integer" scheme="https://www.tanknee.cn/tags/integer/"/>
    
      <category term="new" scheme="https://www.tanknee.cn/tags/new/"/>
    
      <category term="edge" scheme="https://www.tanknee.cn/tags/edge/"/>
    
  </entry>
  
  <entry>
    <title>算法分析入门系列(四) 最短路径算法</title>
    <link href="https://www.tanknee.cn/2020/04/15/alogrithmanalysis_4/"/>
    <id>https://www.tanknee.cn/2020/04/15/alogrithmanalysis_4/</id>
    <published>2020-04-15T09:00:00.000Z</published>
    <updated>2022-06-17T07:24:21.694Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="单源最短路径算法"><a href="#单源最短路径算法" class="headerlink" title="单源最短路径算法"></a>单源最短路径算法</h2><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/2020040778f593c139c85.png"/><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>从s点出发到达其他点的最短路径</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShortestPath</span> &#123;</span><br><span class="line">    <span class="comment">// 定义顶点Vertex类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Vertex</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">infinite_dis</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">private</span> String name; <span class="comment">// 节点名字</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> known; <span class="comment">// 此节点是否已知</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> adjuDist; <span class="comment">// 此节点距离</span></span><br><span class="line">        <span class="keyword">private</span> Vertex parent; <span class="comment">// 当前从初始化节点到此节点的最短路径下的父亲节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Vertex</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.known = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.adjuDist = infinite_dis;</span><br><span class="line">            <span class="built_in">this</span>.parent = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Vertex</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>();</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Vertex <span class="title function_">getParent</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParent</span><span class="params">(Vertex parent)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.getName() == ((Vertex) obj).getName()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.name == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;name of Vertex to be compared cannot be null!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getInfiniteDis</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> infinite_dis;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isKnown</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> known;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setKnown</span><span class="params">(<span class="type">boolean</span> known)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.known = known;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAdjuDist</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> adjuDist;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAdjuDist</span><span class="params">(<span class="type">int</span> adjuDist)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.adjuDist = adjuDist;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="comment">// 此有向边的起始点</span></span><br><span class="line">        <span class="keyword">private</span> Vertex startVertex;</span><br><span class="line">        <span class="comment">// 此有向边的终点</span></span><br><span class="line">        <span class="keyword">private</span> Vertex endVertex;</span><br><span class="line">        <span class="comment">// 此有向边的权值</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> weight;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(Vertex startVertex, Vertex endVertex, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.startVertex = startVertex;</span><br><span class="line">            <span class="built_in">this</span>.endVertex = endVertex;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Vertex <span class="title function_">getStartVertex</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> startVertex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartVertex</span><span class="params">(Vertex startVertex)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.startVertex = startVertex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Vertex <span class="title function_">getEndVertex</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> endVertex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndVertex</span><span class="params">(Vertex endVertex)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.endVertex = endVertex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(<span class="type">int</span> weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Vertex&gt; vertexList; <span class="comment">// 图的顶点集</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Vertex, List&lt;Edge&gt;&gt; ver_edgeList_map; <span class="comment">// 图的每个顶点对应的有向边</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShortestPath</span><span class="params">(List&lt;Vertex&gt; vertexList, Map&lt;Vertex, List&lt;Edge&gt;&gt; ver_edgeList_map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vertexList = vertexList;</span><br><span class="line">        <span class="built_in">this</span>.ver_edgeList_map = ver_edgeList_map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(Vertex v)</span> &#123;</span><br><span class="line">        v.setParent(<span class="literal">null</span>);</span><br><span class="line">        v.setAdjuDist(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateChildren</span><span class="params">(Vertex v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ver_edgeList_map.get(v) == <span class="literal">null</span> || ver_edgeList_map.get(v).size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Vertex&gt; childrenList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Vertex&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Edge e : ver_edgeList_map.get(v)) &#123;</span><br><span class="line">            <span class="type">Vertex</span> <span class="variable">childVertex</span> <span class="operator">=</span> e.getEndVertex();</span><br><span class="line">            <span class="keyword">if</span> (!childVertex.isKnown()) &#123;</span><br><span class="line">                childVertex.setKnown(<span class="literal">true</span>);</span><br><span class="line">                childVertex.setAdjuDist(v.getAdjuDist() + e.getWeight());</span><br><span class="line">                childVertex.setParent(v);</span><br><span class="line">                childrenList.add(childVertex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nowDist</span> <span class="operator">=</span> v.getAdjuDist() + e.getWeight();</span><br><span class="line">            <span class="keyword">if</span> (nowDist &gt;= childVertex.getAdjuDist()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                childVertex.setAdjuDist(nowDist);</span><br><span class="line">                childVertex.setParent(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Vertex vc : childrenList) &#123;</span><br><span class="line">            updateChildren(vc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shortestPathTravasal</span><span class="params">(<span class="type">int</span> startIndex, <span class="type">int</span> destIndex)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">start</span> <span class="operator">=</span> vertexList.get(startIndex);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">dest</span> <span class="operator">=</span> vertexList.get(destIndex);</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;[&quot;</span> + dest.getName() + <span class="string">&quot;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">        setRoot(start);</span><br><span class="line"></span><br><span class="line">        updateChildren(vertexList.get(startIndex));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">shortest_length</span> <span class="operator">=</span> dest.getAdjuDist();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((dest.getParent() != <span class="literal">null</span>) &amp;&amp; (!dest.equals(start))) &#123;</span><br><span class="line">            path = <span class="string">&quot;[&quot;</span> + dest.getParent().getName() + <span class="string">&quot;] --&gt; &quot;</span> + path;</span><br><span class="line">            dest = dest.getParent();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span> + vertexList.get(startIndex).getName() + <span class="string">&quot;] to [&quot;</span> + vertexList.get(destIndex).getName()</span><br><span class="line">                + <span class="string">&quot;] ShortestPath shortest path: &quot;</span> + path);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;shortest length:&quot;</span> + shortest_length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;t&quot;</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">        <span class="type">Vertex</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vertex</span>(<span class="string">&quot;z&quot;</span>);</span><br><span class="line">        List&lt;Vertex&gt; verList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;ShortestPath.Vertex&gt;();</span><br><span class="line">        verList.add(s);</span><br><span class="line">        verList.add(t);</span><br><span class="line">        verList.add(x);</span><br><span class="line">        verList.add(y);</span><br><span class="line">        verList.add(z);</span><br><span class="line"></span><br><span class="line">        Map&lt;Vertex, List&lt;Edge&gt;&gt; vertex_edgeList_map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Vertex, List&lt;Edge&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;Edge&gt; sList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;ShortestPath.Edge&gt;();</span><br><span class="line">        sList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(s, t, <span class="number">6</span>));</span><br><span class="line">        sList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(s, y, <span class="number">7</span>));</span><br><span class="line">        List&lt;Edge&gt; tList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;ShortestPath.Edge&gt;();</span><br><span class="line">        tList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(t, y, <span class="number">8</span>));</span><br><span class="line">        tList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(t, x, <span class="number">5</span>));</span><br><span class="line">        List&lt;Edge&gt; xList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;ShortestPath.Edge&gt;();</span><br><span class="line">        xList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(x, t, -<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;Edge&gt; yList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;ShortestPath.Edge&gt;();</span><br><span class="line">        yList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(y, x, -<span class="number">3</span>));</span><br><span class="line">        yList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(y, z, <span class="number">9</span>));</span><br><span class="line"></span><br><span class="line">        List&lt;Edge&gt; zList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;ShortestPath.Edge&gt;();</span><br><span class="line">        zList.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(z, x, <span class="number">7</span>));</span><br><span class="line">        vertex_edgeList_map.put(s, sList);</span><br><span class="line">        vertex_edgeList_map.put(t, tList);</span><br><span class="line">        vertex_edgeList_map.put(x, xList);</span><br><span class="line">        vertex_edgeList_map.put(y, yList);</span><br><span class="line">        vertex_edgeList_map.put(z, zList);</span><br><span class="line"></span><br><span class="line">        <span class="type">ShortestPath</span> <span class="variable">g</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShortestPath</span>(verList, vertex_edgeList_map);</span><br><span class="line">        g.shortestPathTravasal(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        g.shortestPathTravasal(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        g.shortestPathTravasal(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        g.shortestPathTravasal(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200412aca12d01cbd59.png"/><h2 id="全点对最短路径"><a href="#全点对最短路径" class="headerlink" title="全点对最短路径"></a>全点对最短路径</h2><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/202004070372d0be33e39.png"/><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><p>单点到另外一个点的最短距离</p><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全点对最短路径算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FullPointPairShortestPath</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;InnerEdge&gt; innerEdges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">1</span>, <span class="number">5</span>, -<span class="number">4</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">4</span>, <span class="number">3</span>, -<span class="number">5</span>));</span><br><span class="line">        innerEdges.add(<span class="keyword">new</span> <span class="title class_">InnerEdge</span>(<span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>));</span><br><span class="line">        <span class="type">int</span>[][] dist = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dist.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; dist[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">                    dist[i][j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dist[i][j] = Integer.MAX_VALUE / <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (InnerEdge innerEdge : innerEdges) &#123;</span><br><span class="line">            dist[innerEdge.getStartIndex() - <span class="number">1</span>][innerEdge.getEndIndex() - <span class="number">1</span>] = innerEdge.getWeight();</span><br><span class="line">        &#125;</span><br><span class="line">        getFullPointPairShortestPath(dist);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getFullPointPairShortestPath</span><span class="params">(<span class="type">int</span>[][] dist)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; dist.length; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dist.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; dist.length; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dist[i][j] &gt; dist[i][k] + dist[k][j]) &#123;</span><br><span class="line">                        dist[i][j] = dist[i][k] + dist[k][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dist.length; i++) &#123;</span><br><span class="line">            System.out.print(i + <span class="number">1</span> + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dist.length; i++) &#123;</span><br><span class="line">            System.out.print(i + <span class="number">1</span> + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; dist.length; j++) &#123;</span><br><span class="line">                System.out.print(dist[i][j] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * InnerEdge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InnerEdge</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer startIndex;</span><br><span class="line">    <span class="keyword">private</span> Integer endIndex;</span><br><span class="line">    <span class="keyword">private</span> Integer weight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InnerEdge</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStartIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartIndex</span><span class="params">(Integer startIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getEndIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndIndex</span><span class="params">(Integer endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(Integer weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InnerEdge</span><span class="params">(Integer startIndex, Integer endIndex, Integer weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200412693321658bd4f.png"/><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li>全点对最短路径算法动态规划算法范式 </li></ol><p>寻找两点间的最佳中转点</p><ol start="2"><li>图的存储方式和运算效率之间的关系</li></ol><p>使用数组来存储更加高效，使用Java对象来存储更加清晰明了</p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;单源最短路径算法&quot;&gt;&lt;a href=&quot;#单源最短路径算法&quot; class=&quot;headerlink&quot; title=&quot;单源最短路径算法&quot;&gt;&lt;/a&gt;单源最短路径算法&lt;/h2&gt;&lt;img src=&quot;https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif&quot; data-original=&quot;https://img.tanknee.cn/blogpicbed/2020/04/2020040778f593c139c85.png&quot;&gt;

&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
      <category term="节点" scheme="https://www.tanknee.cn/tags/%E8%8A%82%E7%82%B9/"/>
    
      <category term="对象" scheme="https://www.tanknee.cn/tags/%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="算法" scheme="https://www.tanknee.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="https://www.tanknee.cn/tags/Java/"/>
    
      <category term="length" scheme="https://www.tanknee.cn/tags/length/"/>
    
      <category term="int" scheme="https://www.tanknee.cn/tags/int/"/>
    
      <category term="this" scheme="https://www.tanknee.cn/tags/this/"/>
    
      <category term="return" scheme="https://www.tanknee.cn/tags/return/"/>
    
      <category term="public" scheme="https://www.tanknee.cn/tags/public/"/>
    
      <category term="new" scheme="https://www.tanknee.cn/tags/new/"/>
    
      <category term="vertex" scheme="https://www.tanknee.cn/tags/vertex/"/>
    
      <category term="dist" scheme="https://www.tanknee.cn/tags/dist/"/>
    
  </entry>
  
  <entry>
    <title>算法分析入门系列(二) 分治算法</title>
    <link href="https://www.tanknee.cn/2020/04/15/algorithmanalysis_1-1/"/>
    <id>https://www.tanknee.cn/2020/04/15/algorithmanalysis_1-1/</id>
    <published>2020-04-15T08:59:00.000Z</published>
    <updated>2022-06-17T07:24:21.698Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Strassen矩阵算法"><a href="#Strassen矩阵算法" class="headerlink" title="Strassen矩阵算法"></a>Strassen矩阵算法</h2><h3 id="矩阵分割"><a href="#矩阵分割" class="headerlink" title="矩阵分割"></a>矩阵分割</h3><p>将 </p><p>$$N*N$$</p><p>的矩阵转成</p><p>$$\frac{N}{2}*\frac{N}{2}$$</p><p>的矩阵，在这个相乘的过程中我们发现一共有四次加法，八次乘法。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/20200316b4a8dd7b0aa4f.png"/><p>而后就可以获得这个算法的递推公式：<br>$$<br>T(N) = 8*T(\frac{N}{2}) + Θ(N^2)<br>$$<br><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://www.zhihu.com/equation?tex=+S_1+%3D+B_%7B12%7D+-+B_%7B22%7D%5C%5C+S_2+%3D+A_%7B11%7D+%2B+A_%7B12%7D%5C%5CS_3+%3D+A_%7B21%7D+%2B+A_%7B22%7D%5C%5CS_4+%3D+B_%7B21%7D+-+B_%7B11%7D%5C%5CS_5+%3D+A_%7B11%7D+%2B+A_%7B22%7D%5C%5CS_6+%3D+B_%7B11%7D+%2B+B_%7B22%7D%5C%5CS_7+%3D+A_%7B12%7D+-+A_%7B22%7D%5C%5CS_8+%3D+B_%7B21%7D+%2B+B_%7B22%7D%5C%5CS_9+%3D+A_%7B11%7D+-+A_%7B21%7D%5C%5CS_%7B10%7D+%3D+B_%7B11%7D+%2B+B_%7B12%7D" alt=""></p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StrassenMatrix</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrassenMatrix</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMatrix</span><span class="params">(Matrix matrix, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                System.out.print(matrix.matrix[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 矩阵分割</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M12</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M21</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M22</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Divide</span><span class="params">(Matrix M, Matrix M11, Matrix M12, Matrix M21, Matrix M22, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 遍历整个M矩阵，将M的不同区域分割给不同的四个矩阵 通过一个常数n来划分，每个矩阵的数之间都隔了n，所以 不会有重复出现</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                M11.matrix[i][j] = M.matrix[i][j];</span><br><span class="line">                M12.matrix[i][j] = M.matrix[i][j + n];</span><br><span class="line">                M21.matrix[i][j] = M.matrix[i + n][j];</span><br><span class="line">                M22.matrix[i][j] = M.matrix[i + n][j + n];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 矩阵合并</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M11</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M12</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M21</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> M22</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Matrix <span class="title function_">MergeMatrix</span><span class="params">(Matrix M11, Matrix M12, Matrix M21, Matrix M22, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">_return</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                _return.matrix[i][j] = M11.matrix[i][j];</span><br><span class="line">                _return.matrix[i][j + n] = M12.matrix[i][j];</span><br><span class="line">                _return.matrix[i + n][j] = M21.matrix[i][j];</span><br><span class="line">                _return.matrix[i + n][j + n] = M22.matrix[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阶数为2的矩阵乘法--Strassen法</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Matrix <span class="title function_">MatrixMultiplication</span><span class="params">(Matrix x, Matrix y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> M1, M2, M3, M4, M5, M6, M7;</span><br><span class="line">        M1 = x.matrix[<span class="number">0</span>][<span class="number">0</span>] * (y.matrix[<span class="number">0</span>][<span class="number">1</span>] - y.matrix[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        M2 = y.matrix[<span class="number">1</span>][<span class="number">1</span>] * (x.matrix[<span class="number">0</span>][<span class="number">0</span>] + x.matrix[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        M3 = y.matrix[<span class="number">0</span>][<span class="number">0</span>] * (x.matrix[<span class="number">1</span>][<span class="number">0</span>] + x.matrix[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        M4 = x.matrix[<span class="number">1</span>][<span class="number">1</span>] * (y.matrix[<span class="number">1</span>][<span class="number">0</span>] - y.matrix[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">        M5 = (x.matrix[<span class="number">0</span>][<span class="number">0</span>] * y.matrix[<span class="number">0</span>][<span class="number">0</span>] + x.matrix[<span class="number">0</span>][<span class="number">0</span>] * y.matrix[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">                + (x.matrix[<span class="number">1</span>][<span class="number">1</span>] * y.matrix[<span class="number">0</span>][<span class="number">0</span>] + x.matrix[<span class="number">1</span>][<span class="number">1</span>] * y.matrix[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        M6 = (x.matrix[<span class="number">0</span>][<span class="number">1</span>] * y.matrix[<span class="number">1</span>][<span class="number">0</span>] + x.matrix[<span class="number">0</span>][<span class="number">1</span>] * y.matrix[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">                - (x.matrix[<span class="number">1</span>][<span class="number">1</span>] * y.matrix[<span class="number">1</span>][<span class="number">0</span>] + x.matrix[<span class="number">1</span>][<span class="number">1</span>] * y.matrix[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        M7 = (x.matrix[<span class="number">0</span>][<span class="number">0</span>] * y.matrix[<span class="number">0</span>][<span class="number">0</span>] + x.matrix[<span class="number">0</span>][<span class="number">0</span>] * y.matrix[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">                - (x.matrix[<span class="number">1</span>][<span class="number">0</span>] * y.matrix[<span class="number">0</span>][<span class="number">0</span>] + x.matrix[<span class="number">1</span>][<span class="number">0</span>] * y.matrix[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">_return</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        _return.matrix[<span class="number">0</span>][<span class="number">0</span>] = M5 + M4 - M2 + M6;</span><br><span class="line">        _return.matrix[<span class="number">1</span>][<span class="number">0</span>] = M1 + M2;</span><br><span class="line">        _return.matrix[<span class="number">0</span>][<span class="number">1</span>] = M3 + M4;</span><br><span class="line">        _return.matrix[<span class="number">1</span>][<span class="number">1</span>] = M5 + M1 - M3 - M7;</span><br><span class="line">        <span class="keyword">return</span> _return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 矩阵乘法，阶数大于2</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Matrix <span class="title function_">MatrixMultiplication</span><span class="params">(Matrix x, Matrix y, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">A11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">A12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">A21</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">A22</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">B11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">B12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">B21</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">B22</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">C11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">C12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">C21</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">C22</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        Matrix M1, M2, M3, M4, M5, M6, M7;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> MatrixMultiplication(x, y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Matrix</span> <span class="variable">C</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            Divide(x, A11, A12, A21, A22, n / <span class="number">2</span>);</span><br><span class="line">            Divide(y, B11, B12, B21, B22, n / <span class="number">2</span>);</span><br><span class="line">            <span class="comment">// Divide(C, C11, C12, C21, C22, n / 2);</span></span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">            M1 = MatrixMultiplication(A11, MatrixModified(B12, B22, n, <span class="literal">false</span>), n);</span><br><span class="line">            M2 = MatrixMultiplication(MatrixModified(A11, A12, n, <span class="literal">true</span>), B22, n);</span><br><span class="line">            M3 = MatrixMultiplication(MatrixModified(A21, A22, n, <span class="literal">true</span>), B11, n);</span><br><span class="line">            M4 = MatrixMultiplication(A22, MatrixModified(B21, B11, n, <span class="literal">false</span>), n);</span><br><span class="line">            M5 = MatrixMultiplication(MatrixModified(A11, A22, n, <span class="literal">true</span>), MatrixModified(B11, B22, n, <span class="literal">true</span>), n);</span><br><span class="line">            M6 = MatrixMultiplication(MatrixModified(A12, A22, n, <span class="literal">false</span>), MatrixModified(B21, B22, n, <span class="literal">true</span>), n);</span><br><span class="line">            M7 = MatrixMultiplication(MatrixModified(A11, A21, n, <span class="literal">false</span>), MatrixModified(B11, B12, n, <span class="literal">true</span>), n);</span><br><span class="line">            C11 = MatrixModified(MatrixModified(M5, M4, n, <span class="literal">true</span>), MatrixModified(M2, M6, n, <span class="literal">false</span>), n, <span class="literal">false</span>);</span><br><span class="line">            C12 = MatrixModified(M1, M2, n, <span class="literal">true</span>);</span><br><span class="line">            C21 = MatrixModified(M3, M4, n, <span class="literal">true</span>);</span><br><span class="line">            C22 = MatrixModified(MatrixModified(M5, M1, n, <span class="literal">true</span>), MatrixModified(M3, M7, n, <span class="literal">true</span>), n, <span class="literal">false</span>);</span><br><span class="line">            C = MergeMatrix(C11, C12, C21, C22, n);</span><br><span class="line">            <span class="keyword">return</span> C;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 矩阵加减法</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Matrix <span class="title function_">MatrixModified</span><span class="params">(Matrix x, Matrix y, <span class="type">int</span> n, Boolean isPlus)</span> &#123;</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">_return</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                <span class="keyword">if</span> (isPlus) &#123;</span><br><span class="line">                    _return.matrix[i][j] = x.matrix[i][j] + y.matrix[i][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    _return.matrix[i][j] = x.matrix[i][j] - y.matrix[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> _return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StrassenMatrix</span> <span class="variable">strassenMatrix</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrassenMatrix</span>();</span><br><span class="line">        <span class="comment">// int[][] M_X = &#123; &#123; 1, 1 &#125;, &#123; 1, 1 &#125; &#125;;</span></span><br><span class="line">        <span class="comment">// int[][] M_Y = &#123; &#123; 1, 1 &#125;, &#123; 1, 1 &#125; &#125;;</span></span><br><span class="line">        <span class="type">int</span>[][] M_X = &#123; &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125; &#125;;</span><br><span class="line">        <span class="type">int</span>[][] M_Y = &#123; &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">                &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125; &#125;;</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Matrix</span>();</span><br><span class="line">        x.matrix = M_X;</span><br><span class="line">        y.matrix = M_Y;</span><br><span class="line">        <span class="type">Matrix</span> <span class="variable">result</span> <span class="operator">=</span> strassenMatrix.MatrixMultiplication(x, y, <span class="number">8</span>);</span><br><span class="line">        strassenMatrix.printMatrix(result, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">32</span>][<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Matrix</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h3><p>两个$8*8$的单位矩阵相乘</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] M_X = &#123; </span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, </span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, </span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, </span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, </span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125;, </span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实验分析"><a href="#实验分析" class="headerlink" title="实验分析"></a>实验分析</h3><p>原始算法中矩阵乘法的时间复杂度为$O(n^3)$,而在Strassen算法中降低到$O(n^{\log_2^7})$。</p><p>因为在普通的矩阵乘法中，需要进行8次阶数减半的子矩阵递归相乘，再加上矩阵相加与合并的时间，就会使得简单的矩阵乘法变得极为缓慢，而最主要的时间是用在8次矩阵相乘。<br>$$<br>T(N) = 8*T(\frac{N}{2}) + Θ(N^2)<br>$$<br>Strassen算法最主要的贡献就是将8次矩阵乘法减少到了7次，使得整个算法的复杂度有所降低。</p><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/2020041272935f22805c6.png"/><h2 id="最近点对算法"><a href="#最近点对算法" class="headerlink" title="最近点对算法"></a>最近点对算法</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>求出平面中所有点对里欧几里得距离最短的点对。</p><p>欧几里得距离：<br>$$<br>h = \sqrt{(x_1-x_2)^2+(y_1-y_2)^2}<br>$$</p><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * NearestDots 最近点对算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NearestDots</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * generate random dots</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dot&gt; <span class="title function_">generateDots</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        List&lt;Dot&gt; dots = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            <span class="type">Dot</span> <span class="variable">dot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dot</span>(Math.random() * (num + <span class="number">2</span>), Math.random() * (num + <span class="number">5</span>));</span><br><span class="line">            dots.add(dot);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dots;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get distance between tow dots</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dot1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dot2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getDistance</span><span class="params">(Dot dot1, Dot dot2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>) Math.sqrt(Math.pow(dot1.getX() - dot2.getX(), <span class="number">2.0</span>) + Math.pow(dot1.getY() - dot2.getY(), <span class="number">2.0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * divide a dot list into a half length list as well as it&#x27;s sorted bt dot.x</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dots</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isLeft</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Dot&gt; <span class="title function_">getDividePart</span><span class="params">(List&lt;Dot&gt; dots, <span class="type">boolean</span> isLeft)</span> &#123;</span><br><span class="line">        List&lt;Dot&gt; _return = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (isLeft) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dots.size() / <span class="number">2</span>; i++) &#123;</span><br><span class="line">                _return.add(dots.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dots.size() / <span class="number">2</span>; i &lt; dots.size(); i++) &#123;</span><br><span class="line">                _return.add(dots.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get the min distance violently</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dots</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">violentResolver</span><span class="params">(List&lt;Dot&gt; dots)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">minDistance</span> <span class="operator">=</span> Double.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (Dot dot1 : dots) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Dot dot2 : dots) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dot1.equals(dot2)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">double</span> <span class="variable">distance</span> <span class="operator">=</span> getDistance(dot1, dot2);</span><br><span class="line">                <span class="keyword">if</span> (distance &lt; minDistance) &#123;</span><br><span class="line">                    minDistance = distance;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minDistance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get min distance by dividing</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dots</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">divideResolver</span><span class="params">(List&lt;Dot&gt; dots)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">minDistance</span> <span class="operator">=</span> Double.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">midIndex</span> <span class="operator">=</span> dots.size() / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// End condition of Recursion</span></span><br><span class="line">        <span class="keyword">if</span> (dots.size() == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> getDistance(dots.get(<span class="number">0</span>), dots.get(<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dots.size() == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> getDistance(dots.get(<span class="number">0</span>), dots.get(<span class="number">1</span>));</span><br><span class="line">            <span class="type">double</span> <span class="variable">d2</span> <span class="operator">=</span> getDistance(dots.get(<span class="number">0</span>), dots.get(<span class="number">2</span>));</span><br><span class="line">            <span class="type">double</span> <span class="variable">d3</span> <span class="operator">=</span> getDistance(dots.get(<span class="number">1</span>), dots.get(<span class="number">2</span>));</span><br><span class="line">            <span class="keyword">return</span> Math.min(d1, Math.min(d2, d3));</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.sort(dots, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Dot&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Dot d1, Dot d2)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (d1.getX() &lt; d2.getX()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d1.getX() &gt; d2.getX()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;Dot&gt; leftUnion = getDividePart(dots, <span class="literal">true</span>);</span><br><span class="line">        List&lt;Dot&gt; rightUnion = getDividePart(dots, <span class="literal">false</span>);</span><br><span class="line">        minDistance = Math.min(divideResolver(leftUnion), divideResolver(rightUnion));</span><br><span class="line">        <span class="type">Dot</span> <span class="variable">midDot</span> <span class="operator">=</span> dots.get(midIndex);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> midIndex - <span class="number">4</span> &gt; <span class="number">0</span> ? midIndex - <span class="number">4</span> : <span class="number">0</span>; i &lt; (midIndex + <span class="number">3</span> &gt; dots.size() ? dots.size() : midIndex + <span class="number">3</span>)</span><br><span class="line">                &amp;&amp; i != midIndex; i++) &#123;</span><br><span class="line">            minDistance = Math.min(getDistance(midDot, dots.get(i)), minDistance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minDistance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NearestDots</span> <span class="variable">nearestDots</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NearestDots</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        List&lt;Dot&gt; dots = nearestDots.generateDots(num);</span><br><span class="line">        <span class="type">double</span> <span class="variable">min</span> <span class="operator">=</span> nearestDots.violentResolver(dots);</span><br><span class="line">        <span class="type">double</span> <span class="variable">min2</span> <span class="operator">=</span> nearestDots.divideResolver(dots);</span><br><span class="line">        System.out.println(min);</span><br><span class="line">        System.out.println(min2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 点的数据结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dot</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> x;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">double</span> y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Dot</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = x;</span><br><span class="line">            <span class="built_in">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(<span class="type">double</span> y)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.y = y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验分析-1"><a href="#实验分析-1" class="headerlink" title="实验分析"></a>实验分析</h3><p>该算法主要是使用了分治递归的思想，难点在于处理两段分划合并时的情况。</p><h4 id="合并的情况"><a href="#合并的情况" class="headerlink" title="合并的情况"></a>合并的情况</h4><p>此时左侧导出的点对是所有点对中距离最短的点对，右边的点对也是，接下来需要判断靠近分割线的两个点是也是最短的点对，如果是，那么这个点对就是该段合并后的点中最短距离的点对！</p><p>合并中还会出现极端情况，也就是有点在分界线上，所以我们应该人为规定在分界线上的点应该归属为左半边还是右半边。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200412b3109f523aa38.png/imgzip"/><p>而后我们可以根据上面这个图得出：在分界线$x=x_i$处，周围最多有七个点有可能比分治时的最小值要小，因此只需要在合并时比较这几个点之间的距离就可以了。</p><h3 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200412820632390afac.png"/><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li>分治法算法设计思想的三个基本步骤是什么？如何证明分治算法的正确性？ </li></ol><ul><li>问题划分</li><li>递归求解</li><li>合并子问题的解</li></ul><p>使用数学归纳法来证明算法的正确性</p><ol start="2"><li>利用主方式求解 <code>Strassen’s</code> 矩阵乘法和最近点对算法效率的递归分析结果。</li></ol><p><strong>Strassen’s算法</strong><br>$$<br>Strassen’s算法: T(n) = 7<em>T(\frac{n}{2}) + Θ(n^2)<br>$$<br>根据主方式得出$f(n) = Θ(n^{\log_2{7-3}})$所以其时间复杂度就是<br>$$<br>T(n) = \Theta(n^{\log_27})<br>$$<br>*</em>最近点对算法**<br>$$<br>T(n)=2*T(\frac{n}{2})+\Theta(n)<br>$$<br>根据主方式得出$f(n) = \Theta(n)$所以其时间复杂度就是<br>$$<br>T(n)=\Theta(n\log{n})<br>$$</p><ol start="3"><li>解释怎样修改 Strassen’s 矩阵乘法算法，使得它也可以用于大小不必为 2 的幂的矩阵？ </li></ol><p>对半分割矩阵，只要能求解最小单元矩阵就能实现</p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;Strassen矩阵算法&quot;&gt;&lt;a href=&quot;#Strassen矩阵算法&quot; class=&quot;headerlink&quot; title=&quot;Strassen矩阵算法&quot;&gt;&lt;/a&gt;Strassen矩阵算法&lt;/h2&gt;&lt;h3 id=&quot;矩阵分割&quot;&gt;&lt;a href=&quot;#矩阵分割&quot; class=&quot;headerlink&quot; title=&quot;矩阵分割&quot;&gt;&lt;/a&gt;矩阵分割&lt;/h3&gt;&lt;p&gt;将 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
      <category term="算法" scheme="https://www.tanknee.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="length" scheme="https://www.tanknee.cn/tags/length/"/>
    
      <category term="int" scheme="https://www.tanknee.cn/tags/int/"/>
    
      <category term="数据" scheme="https://www.tanknee.cn/tags/%E6%95%B0%E6%8D%AE/"/>
    
      <category term="this" scheme="https://www.tanknee.cn/tags/this/"/>
    
      <category term="return" scheme="https://www.tanknee.cn/tags/return/"/>
    
      <category term="trix" scheme="https://www.tanknee.cn/tags/trix/"/>
    
      <category term="matrix" scheme="https://www.tanknee.cn/tags/matrix/"/>
    
      <category term="dots" scheme="https://www.tanknee.cn/tags/dots/"/>
    
  </entry>
  
  <entry>
    <title>算法分析入门系列(一) 排序算法</title>
    <link href="https://www.tanknee.cn/2020/04/15/algorithmanalysis_1/"/>
    <id>https://www.tanknee.cn/2020/04/15/algorithmanalysis_1/</id>
    <published>2020-04-15T08:47:00.000Z</published>
    <updated>2022-06-17T07:24:21.698Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="main函数代码"><a href="#main函数代码" class="headerlink" title="main函数代码"></a><code>main</code>函数代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;插入排序-------------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] num = randomCreate(max);</span><br><span class="line">    printResult(num);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    <span class="type">int</span>[] temp1 = insertSort(num);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et - bt + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;合并排序-------------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] temp4 = randomCreate(max);</span><br><span class="line">    printResult(temp4);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt2</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    mergeSort(temp4);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et2</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et2 - bt2 + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;快速排序-------------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] temp5 = randomCreate(max);</span><br><span class="line">    printResult(temp5);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt3</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    quickSort(temp5, <span class="number">0</span>, temp5.length - <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et3</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et3 - bt3 + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp5);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;随机化快速排序--------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] temp9 = randomCreate(max);</span><br><span class="line">    printResult(temp9);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt7</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    quickSort(temp9, <span class="number">0</span>, temp9.length - <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et7</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et2 - bt2 + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp9);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;桶排序---------------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] temp6 = randomCreate(max);</span><br><span class="line">    printResult(temp6);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt4</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    temp6 = bucketSort(temp6, max);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et4</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et4 - bt4 + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp6);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;计数排序-------------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] temp7 = randomCreate(max);</span><br><span class="line">    printResult(temp7);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt5</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    temp7 = countSort(temp7);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et5</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et5 - bt5 + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp7);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;基数排序-------------------------------------&quot;</span>);</span><br><span class="line">    <span class="type">int</span>[] temp8 = randomCreate(max);</span><br><span class="line">    printResult(temp8);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">bt6</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    radixSort(temp8, (max + <span class="string">&quot;&quot;</span>).length());</span><br><span class="line">    <span class="type">Long</span> <span class="variable">et6</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">    System.out.println(<span class="string">&quot;排序用时：&quot;</span> + (et6 - bt6 + <span class="string">&quot;&quot;</span>));</span><br><span class="line">    printResult(temp8);</span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="各个排序的源代码："><a href="#各个排序的源代码：" class="headerlink" title="各个排序的源代码："></a>各个排序的源代码：</h3><h4 id="插入排序："><a href="#插入排序：" class="headerlink" title="插入排序："></a>插入排序：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> A</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] insertSort(<span class="type">int</span>[] A) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将当前的数存储起来用来在0-i+1的区间内进行排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        temp = A[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp &lt; A[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                A[j] = A[j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                A[j] = temp;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j - <span class="number">1</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                A[<span class="number">0</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="合并排序："><a href="#合并排序：" class="headerlink" title="合并排序："></a>合并排序：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并排序</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> original</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] original)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (original == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;The array can not be null !!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> original.length;</span><br><span class="line">        <span class="keyword">if</span> (length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> length / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> partitionA[] = Arrays.copyOfRange(original, <span class="number">0</span>, middle);<span class="comment">// 拆分问题规模</span></span><br><span class="line">            <span class="type">int</span> partitionB[] = Arrays.copyOfRange(original, middle, length);</span><br><span class="line">            <span class="comment">// 递归调用</span></span><br><span class="line">            mergeSort(partitionA);</span><br><span class="line">            mergeSort(partitionB);</span><br><span class="line">            sort(partitionA, partitionB, original);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] partitionA, <span class="type">int</span>[] partitionB, <span class="type">int</span>[] original)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; partitionA.length &amp;&amp; j &lt; partitionB.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (partitionA[i] &lt;= partitionB[j]) &#123;</span><br><span class="line">                original[k] = partitionA[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                original[k] = partitionB[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == partitionA.length) &#123;</span><br><span class="line">            <span class="keyword">while</span> (k &lt; original.length) &#123;</span><br><span class="line">                original[k] = partitionB[j];</span><br><span class="line">                k++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == partitionB.length) &#123;</span><br><span class="line">            <span class="keyword">while</span> (k &lt; original.length) &#123;</span><br><span class="line">                original[k] = partitionA[i];</span><br><span class="line">                k++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="快速排序与随机快速排序："><a href="#快速排序与随机快速排序：" class="headerlink" title="快速排序与随机快速排序："></a>快速排序与随机快速排序：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> low 最低位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> high 最高位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> random 是否随机化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">boolean</span> random)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i, j, temp, t;</span><br><span class="line">        <span class="keyword">if</span> (low &gt; high) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i = low;</span><br><span class="line">        j = high;</span><br><span class="line">        <span class="comment">// 以第一位为分割中心</span></span><br><span class="line">        <span class="keyword">if</span> (!random) &#123;</span><br><span class="line">            temp = arr[low];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (<span class="type">int</span>) Math.random() * high;</span><br><span class="line">            temp = arr[index];</span><br><span class="line">            arr[index] = arr[low];</span><br><span class="line">            arr[low] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="comment">//先看右边，依次往左递减</span></span><br><span class="line">            <span class="keyword">while</span> (temp &lt;= arr[j] &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//再看左边，依次往右递增</span></span><br><span class="line">            <span class="keyword">while</span> (temp &gt;= arr[i] &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果满足条件则交换</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                t = arr[j];</span><br><span class="line">                arr[j] = arr[i];</span><br><span class="line">                arr[i] = t;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后将基准为与i和j相等位置的数字交换</span></span><br><span class="line">        arr[low] = arr[i];</span><br><span class="line">        arr[i] = temp;</span><br><span class="line">        <span class="comment">//递归调用左半数组</span></span><br><span class="line">        quickSort(arr, low, j - <span class="number">1</span>, random);</span><br><span class="line">        <span class="comment">//递归调用右半数组</span></span><br><span class="line">        quickSort(arr, j + <span class="number">1</span>, high, random);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="桶排序："><a href="#桶排序：" class="headerlink" title="桶排序："></a>桶排序：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 桶排序</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> A</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] bucketSort(<span class="type">int</span>[] A, <span class="type">int</span> max) &#123;</span><br><span class="line">        <span class="type">int</span>[] B = <span class="keyword">new</span> <span class="title class_">int</span>[max + <span class="number">1</span>];<span class="comment">// 0-max 总共max+1个数</span></span><br><span class="line">        <span class="type">int</span>[] reArray = <span class="keyword">new</span> <span class="title class_">int</span>[A.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; A.length; i++) &#123;</span><br><span class="line">            B[A[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; B.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= B[i]; j++) &#123;</span><br><span class="line">                <span class="comment">// i 是被排序的数的大小 B[i] 是大小为i的被排序数的个数</span></span><br><span class="line">                reArray[k] = i;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 计数排序</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] countSort(<span class="type">int</span>[] array) &#123;</span><br><span class="line">       <span class="comment">// 首先为所有元素申请足够大的空间</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">       <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (max &lt; array[i]) max = array[i];</span><br><span class="line">           <span class="keyword">if</span> (min &gt; array[i]) min = array[i];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> max - min + <span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span>[] timesAndPosition = <span class="keyword">new</span> <span class="title class_">int</span>[maxLength];</span><br><span class="line">       <span class="type">int</span>[] finalArray = <span class="keyword">new</span> <span class="title class_">int</span>[array.length];</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">           timesAndPosition[array[i] - min] += <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; maxLength; i++) &#123;</span><br><span class="line">           timesAndPosition[i] += timesAndPosition[i - <span class="number">1</span>];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="type">int</span> <span class="variable">tempIndex</span> <span class="operator">=</span> array[i] - min;</span><br><span class="line">               finalArray[timesAndPosition[tempIndex] - <span class="number">1</span>] = array[i];</span><br><span class="line">               timesAndPosition[tempIndex]--;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> finalArray;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 基数排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 待排序的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max   数组中最大数的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> max)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt;[] temp = <span class="keyword">new</span> <span class="title class_">List</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            temp[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= max; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">                temp[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">                temp[getFigure(array[i], k)].add(array[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> t : temp[i]) &#123;</span><br><span class="line">                    array[j] = t;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取整型数的第k位的数字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k   第k位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getFigure</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">// 先除以10的k-1次方，将需要获取的那位数移动到最后一位上，然后和10取余数，得到该位数</span></span><br><span class="line">        <span class="keyword">return</span> (num / ((<span class="type">int</span>) Math.pow(<span class="number">10</span>, k - <span class="number">1</span>))) % <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="随机数生成函数与打印函数："><a href="#随机数生成函数与打印函数：" class="headerlink" title="随机数生成函数与打印函数："></a>随机数生成函数与打印函数：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机数生成函数</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] randomCreate(<span class="type">int</span> num) &#123;</span><br><span class="line">        <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[num];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            array[i] = (<span class="type">int</span>) (Math.random() * num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 循环打印结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printResult</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i]);</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200412c3e0f0e773e2c.png"/><blockquote><p> 单位：ns</p></blockquote><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><p>使用上文中的随机数生成函数生成1000个随机数字，然后再运行对应的排序算法，计时器使用的是Java原生的<code>System.nanoTime();</code></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li>算法科学解决问题的一般模式是什么？ </li></ol><ul><li>用自然语言的方式描述问题</li><li>抽象问题的共性，分析问题的特性</li><li>选用或者创建合适的数据结构模型</li><li>编写算法</li></ul><ol start="2"><li>确定性算法和随机性算法的差异在那里？随机化对于算法效率的影响如何？ </li></ol><ul><li>确定性算法对于随机情况是不稳定的，而随机性算法对于一般的随机情况而言更加的适用。当遇上极端情况时确定性算法就有可能不再适用而随机算法的随机化过程能较大程度的减少极端情况的影响。</li><li>能够普遍地提高算法的效率。如在随机化快速排序中，通过基准节点的随机化选择，就能较好的避免<code>已经排好序/逆序</code>的情况下的低效率。</li></ul><ol start="3"><li>如何理解算法效率分析的渐近特征和相对性？ </li></ol><ul><li>因为算法每次面对的信息量都不相同，所以就不能用一个准确的值去描述算法的绝对效率，于是就应该选择相对的<code>N</code>，也就是每个元操作（此处是我给出的概念，也就是抽象认知下不可分割的最小操作节点），单次元操作记作1，所有元操作的和最大值就是该算法的上界。</li><li>同样的，因为数据量的不尽相同，所以最终的效率只能逼近靠近理论的算法效率，也就是渐近特征</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;排序算法&quot;&gt;&lt;a href=&quot;#排序算法&quot; class=&quot;headerlink&quot; title=&quot;排序算法&quot;&gt;&lt;/a&gt;排序算法&lt;/h2&gt;&lt;h3 id=&quot;main函数代码&quot;&gt;&lt;a href=&quot;#main函数代码&quot; class=&quot;headerlink&quot; title=&quot;main函数代码&quot;&gt;&lt;/a&gt;&lt;code&gt;main&lt;/code&gt;函数代码&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;插入排序-------------------------------------&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[] num = randomCreate(max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;bt&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[] temp1 = insertSort(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;et&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;排序用时：&amp;quot;&lt;/span&gt; + (et - bt + &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(temp1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;合并排序-------------------------------------&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[] temp4 = randomCreate(max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(temp4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;bt2&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mergeSort(temp4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;et2&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;排序用时：&amp;quot;&lt;/span&gt; + (et2 - bt2 + &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(temp4);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;快速排序-------------------------------------&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[] temp5 = randomCreate(max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(temp5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;bt3&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    quickSort(temp5, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, temp5.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;et3&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;排序用时：&amp;quot;&lt;/span&gt; + (et3 - bt3 + &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(temp5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;随机化快速排序--------------------------------&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[] temp9 = randomCreate(max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(temp9);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;bt7&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    quickSort(temp9, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, temp9.length - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;et7&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;排序用时：&amp;quot;&lt;/span&gt; + (et2 - bt2 + &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(temp9);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;桶排序---------------------------------------&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[] temp6 = randomCreate(max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(temp6);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;bt4&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    temp6 = bucketSort(temp6, max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;et4&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;排序用时：&amp;quot;&lt;/span&gt; + (et4 - bt4 + &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(temp6);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;计数排序-------------------------------------&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[] temp7 = randomCreate(max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(temp7);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;bt5&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    temp7 = countSort(temp7);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;et5&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;排序用时：&amp;quot;&lt;/span&gt; + (et5 - bt5 + &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(temp7);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;基数排序-------------------------------------&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;[] temp8 = randomCreate(max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(temp8);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;bt6&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    radixSort(temp8, (max + &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;).length());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;et6&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; System.nanoTime();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;排序用时：&amp;quot;&lt;/span&gt; + (et6 - bt6 + &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    printResult(temp8);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(&lt;span class=&quot;string&quot;&gt;&amp;quot;---------------------------------------------&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
      <category term="函数" scheme="https://www.tanknee.cn/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="算法" scheme="https://www.tanknee.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="length" scheme="https://www.tanknee.cn/tags/length/"/>
    
      <category term="int" scheme="https://www.tanknee.cn/tags/int/"/>
    
      <category term="arr" scheme="https://www.tanknee.cn/tags/arr/"/>
    
      <category term="temp" scheme="https://www.tanknee.cn/tags/temp/"/>
    
      <category term="排序" scheme="https://www.tanknee.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="noti" scheme="https://www.tanknee.cn/tags/noti/"/>
    
  </entry>
  
  <entry>
    <title>The Video Of WhuHan</title>
    <link href="https://www.tanknee.cn/2020/04/04/561/"/>
    <id>https://www.tanknee.cn/2020/04/04/561/</id>
    <published>2020-04-04T09:41:00.000Z</published>
    <updated>2022-06-17T07:24:21.662Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><iframe width="360" height="315" align="center" src="https://www.youtube-nocookie.com/embed/XU9FVqwO4TM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;iframe width=&quot;360&quot; height=&quot;315&quot; align=&quot;center&quot; src=&quot;https://www.youtube-nocookie.com/embed/XU9FVqwO4TM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
  </entry>
  
  <entry>
    <title>三月March</title>
    <link href="https://www.tanknee.cn/2020/04/03/560/"/>
    <id>https://www.tanknee.cn/2020/04/03/560/</id>
    <published>2020-04-03T10:34:25.000Z</published>
    <updated>2022-06-17T07:24:21.684Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-zQLgvfhK" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="494858498" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><blockquote><p>鬼知道我这个月经历了什么东西。</p></blockquote><p>每日高强度Coding，我都怀疑自己已经不太像个正常人了…</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/04/20200401e3face62152d6.png" alt="真实高强度Coding"/><p>原来我也会有对着电脑感到生理性呕吐的时候..</p><p>昨天人机交互课上老师随口一句：<strong>高考都要延迟了，你们开学是别想了</strong></p><p>等疫情过了想出去好好看看…毕竟谁也不想永远呆在家里。</p><h2 id="一代宗师：宗师，一代（人）"><a href="#一代宗师：宗师，一代（人）" class="headerlink" title="一代宗师：宗师，一代（人）"></a>一代宗师：宗师，一代（人）</h2><p>前两天抽空看了一代宗师，说来惭愧，以前一直以为一代宗师是指的叶问四部曲的第一部，后来才明白是王家卫的电影。王家卫的电影看的很少，基本算是没有吧，最近的一次交集应该是知道了《<a href="https://movie.douban.com/subject/1292213/">大话西游之大圣娶亲</a>》里那句流传甚广的<strong>爱你一万年</strong>是出自他的《<a href="https://movie.douban.com/subject/1291999/">重庆森林</a>》。</p><p>一代宗师更像是一部小说，对白更多的辅助人物形象的刻画，以及时代特征的描述，而不是像更多的武侠电影那样去推动剧情的发展。</p><p><strong>一如其冷静，不占烟火气的格调。</strong></p><blockquote><p>如果人生有四季，四十岁前，我的人生都是春天。</p></blockquote><blockquote><p>做羹要讲究火候。火候不到，众口难调，火候过了，事情就焦。做人也是这样。</p></blockquote><blockquote><p>暗事好做，明事难成。</p></blockquote><blockquote><p>宝森不是想当英雄，是想造时势。现在这炉子里，需要这根新柴。</p></blockquote><blockquote><p>让他搭手多大的面子，姓叶的不识抬举，咱可不要坏了规矩。</p></blockquote><blockquote><p>别跟他们一般见识，老人死守着规矩，新人什么时候才能出头啊。叶问是个好材料，就看他这次能不能出头。<br>宫家没有败绩，您又在这儿，他凭什么出头。</p></blockquote><blockquote><p>你的脾气啊，就是爹年轻的时候。眼睛里只有胜负，没有人情世故。人要往远看，过了山，眼界就开阔了。但凡一个人见不得人好，见不得人高明，是没有容人之心。咱们宫家的门槛高，但是不出小人。</p></blockquote><blockquote><p>人活这一世，能耐还在其次。有的成了面子，有的成了里子，都是时势使然。这次让你下来，是想求个始终，让你看看，爹是怎么退下来的。你从小是看着我跟人交手长大的，这是最后一次。你是订了亲的人了，江湖的事，和你没关系。当个好大夫，平平安安的，就是尽孝心了。</p></blockquote><p><a href="https://note.tanknee.cn/wapp/pages/view/share/s/1oyM5w17Uh7G2emBkt3pWCWG3ywNqR3DGAsg2RaZqQ1J2QPK">台词剪辑</a></p><p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/202003222594d66d57866.png/imgzip" alt="清河公园"></p><p>日丽风和，云销雨霁</p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;
    &lt;div id=&quot;aplayer-zQLgvfhK&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot; data-id=&quot;494858498&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#ad7a86&quot;&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;鬼知道我这个月经历了什么东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每日高强度Coding，我都怀疑自己已经不太像个正常人了…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Caprice" scheme="https://www.tanknee.cn/categories/Caprice/"/>
    
    
      <category term="server" scheme="https://www.tanknee.cn/tags/server/"/>
    
      <category term="netease" scheme="https://www.tanknee.cn/tags/netease/"/>
    
      <category term="type" scheme="https://www.tanknee.cn/tags/type/"/>
    
      <category term="时候" scheme="https://www.tanknee.cn/tags/%E6%97%B6%E5%80%99/"/>
    
      <category term="疫情" scheme="https://www.tanknee.cn/tags/%E7%96%AB%E6%83%85/"/>
    
      <category term="o" scheme="https://www.tanknee.cn/tags/o/"/>
    
  </entry>
  
  <entry>
    <title>快速提交git代码到多个托管平台</title>
    <link href="https://www.tanknee.cn/2020/03/26/559/"/>
    <id>https://www.tanknee.cn/2020/03/26/559/</id>
    <published>2020-03-26T07:37:00.000Z</published>
    <updated>2022-06-17T07:24:21.701Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://git.tanknee.cn/explore/repos">我的个人Git仓库</a></p><p><a href="https://github.com/TankNee">我的GitHub</a></p><blockquote><p>其实做法很简单，就是编写批处理程序。Linux下用bash，windows下用bat写，Linux我没有测试，但是应该没有什么问题。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m<span class="string">&quot;:tada: update my document&quot;</span></span><br><span class="line">git push -u github master &amp;&amp; git push -u origin master</span><br></pre></td></tr></table></figure><p>其中第三行的<code>github</code>和<code>origin</code>是远程仓库的名字，相关的名字可以在<code>.git/config</code>文件中找到，只需要替换那两个名称就OK了，会自动提交对应的修改。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>将这段文字保存到<code>push.bat</code>文件，Linux就保存到<code>push.sh</code>文件，然后打开终端，定位到该文件所在的目录，输入<code>./push</code>就会自动执行语句了。</p><blockquote><p>请把该脚本文件放在<code>.git</code>文件夹的同级目录</p></blockquote><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/20200326275585967af02.png"/>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;a href=&quot;https://git.tanknee.cn/explore/repos&quot;&gt;我的个人Git仓库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/TankNee&quot;&gt;我的GitHub&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实做法很简单，就是编写批处理程序。Linux下用bash，windows下用bat写，Linux我没有测试，但是应该没有什么问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
      <category term="文件" scheme="https://www.tanknee.cn/tags/%E6%96%87%E4%BB%B6/"/>
    
      <category term="type" scheme="https://www.tanknee.cn/tags/type/"/>
    
      <category term="git" scheme="https://www.tanknee.cn/tags/git/"/>
    
      <category term="button" scheme="https://www.tanknee.cn/tags/button/"/>
    
      <category term="github" scheme="https://www.tanknee.cn/tags/github/"/>
    
      <category term="origin" scheme="https://www.tanknee.cn/tags/origin/"/>
    
  </entry>
  
  <entry>
    <title>如何制作一个简单的网络爬虫？nodejs实现</title>
    <link href="https://www.tanknee.cn/2020/03/15/spider/"/>
    <id>https://www.tanknee.cn/2020/03/15/spider/</id>
    <published>2020-03-15T07:31:00.000Z</published>
    <updated>2022-06-17T07:24:21.686Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>接下来有打算每半个月写一点东西，不然写东西的频率太低就会造成正反馈，产出越来越少了。</p><p>这段时间一共做了三个爬虫：</p><ul><li>爬取丁香园的疫情数据</li><li>爬取联想的虚拟货币乐豆</li><li>第三个跟第一个类似，不过工作量大一点</li></ul><p>一共用了两种不同的技术，前两个是自己的思路，用的是nodejs+express+superagent，实话实说，nodejs做后台确实对数据很友好，再用一下Sequelize做ORM对象映射，真的非常的方便。</p><p>做这个也是为了熟悉express的架构为以后填坑，虽然坑也不是特别多。</p><p>自己还给Sequelize文档做了一个镜像仓库，方便访问。<a href="https://git.tanknee.cn/tanknee/Sequelize-Docs-zh-CN">文档</a></p><p>不过用JavaScript写程序有一点着实无法避免，那就是异步操作。</p><p>JavaScript作为浏览器的主要逻辑实现语言，少不了对网络操作的支持，如果浏览器不使用异步来获取数据的话就会有页面加载缓慢等问题，而在JavaScript写的后端中也是避免不了处理异步操作，<strong>比较头疼的就是循环异步操作</strong>，我查了网上很多的文档，主要的解决方案是循环递归嵌套promise，然后保证获取到最后一个promise对象，然后等待他的resolve或者reject。</p><p>来详细说说这几个工程吧。</p><h2 id="丁香园数据爬取"><a href="#丁香园数据爬取" class="headerlink" title="丁香园数据爬取"></a>丁香园数据爬取</h2><p>这个项目是我自发进行的，做了大概有三四天的样子吧。</p><p>分析页面数据</p><p>打开<a href="https://ncov.dxy.cn/ncovh5/view/pneumonia?scene=2&clicktime=1579582238&enterid=1579582238&from=timeline&isappinstalled=0">丁香园</a>的网站，右键查看网页源码，可以看到丁香园的数据是后端渲染的，所有需要的数据都以json的形式嵌入到html的JavaScript中。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/202003155d1421c9ee328.png/imgzip"/><p>其实最开始的丁香园页面并不是这个样子的，最开始并没有那么直观，都是写在html标签页里。</p><blockquote><p>　我估计是为了方便各位网友爬取它的数据？毕竟写成html＋JavaScript的非常利于爬取</p></blockquote><p>而且里面的数据几乎都已经是完美严格的json格式，只需要使用<code>JSON.parse()</code>就好了。后台也没什么好说的，直接写一个定时器，定时爬取即可。<del>暴露一些接口就能在GitHub上收割</del>。</p><h2 id="联想虚拟货币爬取"><a href="#联想虚拟货币爬取" class="headerlink" title="联想虚拟货币爬取"></a>联想虚拟货币爬取</h2><p>这是酷安老哥找我做的一个项目，毕竟是人生中<strong>第一笔</strong>外包，我犹豫了两分钟马上就开始做了。第一天花了半天研究了页面，分析了重难点。</p><ul><li>每一个账号的货币数量是不同的，需要登陆账号</li><li>联想对单个IP有登录限制，如果单位时间内请求过多就会封锁IP一段时间</li><li>获取网页元素</li></ul><p>第一点是我在这部分中遇到的第一个坑。因为以前做的都是不用登陆的页面，只需要获取的HTML数据就可以直接分析了，所以上网查了一些资料。</p><p>其实要解决起来也很简单，就是模拟登陆操作，获取联想服务器返回的cookie数据，然后之后都带着这个cookie去访问货币查询的页面就好了。</p><blockquote><p>这里穿插一些我对网页安全性的思考：</p><p>网页是安全的吗？</p><p>不是，没有网页是安全的，纯粹的网页几乎不可能是完全安全的，所以很多的网银都需要插上一些硬件工具去确保安全性。</p><p>那么网页可以做到相对安全吗？</p><p>可以，也是应该的。</p><p>使用session或者cookie或是token来区别用户属性，避免未登录的未知用户查看敏感页面，并加上过期特性，保证数据的安全。</p><p>使用不可逆的加密方式对用户输入的密码加以保护，只有这样，后台在不需要知道用户真实密码的情况下确认用户的登录状态。我个人认为MD5加密是一种对我这个水平而言相对较好的用户信息加密方式。</p></blockquote><p>在分析联想的登录界面时，发现了一个让我哭笑不得的地方。</p><ul><li>联想的登录页面的密码是加密的</li><li>加密用的算法是base64，这个不是不可逆的加密算法</li></ul><blockquote><p><strong>百度百科</strong></p><p>Base64是网络上最常见的用于传输8Bit<a href="https://baike.baidu.com/item/字节码/9953683">字节码</a>的编码方式之一，Base64就是一种基于64个可打印字符来表示<a href="https://baike.baidu.com/item/二进制/361457">二进制</a>数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。</p><p>Base64编码是从二进制到字符的过程，可用于在<a href="https://baike.baidu.com/item/HTTP">HTTP</a>环境下传递较长的标识信息。采用Base64编码具有不可读性，需要解码后才能阅读。</p></blockquote><p>甚至在联想的某些登录页面，密码是明文传输的…<strong>我对联想的技术水平是真的无语了</strong>，我就不说是哪几个页面了。</p><p>解决了登录这个问题之后就基本上搞定了一大半。</p><p>而后是运维和调优，其间遇到IP被封锁，我就设了爬取时间间隔，就基本上没出过问题了。</p><h2 id="信息获取的方式"><a href="#信息获取的方式" class="headerlink" title="信息获取的方式"></a>信息获取的方式</h2><p>现在网页主要是两种</p><ol><li>后端渲染的SSR页面，或者是prerender预渲染</li><li>单页面应用，前端请求数据前端渲染</li></ol><p>第二种对爬虫不友好，只能手动去找前端接口，然后看运气能能不能请求到对应的数据，比较随缘。</p><p>第一种的话我现在大多是用的正则表达式，JavaScript对正则还是比较友好的，操作dom也很方便，基本流程就是</p><ul><li>查看网页源码</li><li>找到需要数据</li><li>寻找唯一标识符</li><li>编写正则表达式</li><li>挑选数据并保存或者发送</li></ul><p>在使用正则表达式之前可以使用dom操作工具将需要搜索的范围缩小，便于匹配。</p>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;p&gt;接下来有打算每半个月写一点东西，不然写东西的频率太低就会造成正反馈，产出越来越少了。&lt;/p&gt;
&lt;p&gt;这段时间一共做了三个爬虫：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;爬取丁香园的疫情数据&lt;/li&gt;
&lt;li&gt;爬取联想的虚拟货币乐豆&lt;/li&gt;
&lt;li&gt;第三个跟第一个类似，不过工作量大一点&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
      <category term="服务器" scheme="https://www.tanknee.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="网站" scheme="https://www.tanknee.cn/tags/%E7%BD%91%E7%AB%99/"/>
    
      <category term="对象" scheme="https://www.tanknee.cn/tags/%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="算法" scheme="https://www.tanknee.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符" scheme="https://www.tanknee.cn/tags/%E5%AD%97%E7%AC%A6/"/>
    
      <category term="操作" scheme="https://www.tanknee.cn/tags/%E6%93%8D%E4%BD%9C/"/>
    
      <category term="疫情" scheme="https://www.tanknee.cn/tags/%E7%96%AB%E6%83%85/"/>
    
      <category term="页面" scheme="https://www.tanknee.cn/tags/%E9%A1%B5%E9%9D%A2/"/>
    
      <category term="javascript" scheme="https://www.tanknee.cn/tags/javascript/"/>
    
      <category term="base64" scheme="https://www.tanknee.cn/tags/base64/"/>
    
      <category term="数据" scheme="https://www.tanknee.cn/tags/%E6%95%B0%E6%8D%AE/"/>
    
      <category term="网页" scheme="https://www.tanknee.cn/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本编程最简尝试</title>
    <link href="https://www.tanknee.cn/2020/03/09/556/"/>
    <id>https://www.tanknee.cn/2020/03/09/556/</id>
    <published>2020-03-09T08:19:00.000Z</published>
    <updated>2022-06-17T07:24:21.695Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p>每一个shell脚本都需要一个注解，形如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">n 其中n为数字，是外界输入到脚本里的参数</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0 代表文件本身</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1 是第一个参数</span></span><br></pre></td></tr></table></figure><p>读取外部文本内容并输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">while read line</span><br><span class="line">do</span><br><span class="line">    echo $line</span><br><span class="line">done &lt; $1</span><br></pre></td></tr></table></figure><p>其中<code>$1</code>是外部文件名，line是该文本里的每一行的内容。通过一个while循环输出文本内容。</p><p>本次作业：</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/20200309cacf45e759a82.png"/><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Line Count</span></span><br><span class="line">lineCount=0 # 初始化行计数器</span><br><span class="line"></span><br><span class="line">while read line</span><br><span class="line">do</span><br><span class="line">    echo $line # 输出每一行的内容</span><br><span class="line">    lineCount=`expr $lineCount + 1` # 行计数器自增</span><br><span class="line">done &lt; $1</span><br><span class="line">echo $lineCount # 输出行数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;&lt;h2 id=&quot;Shell&quot;&gt;&lt;a href=&quot;#Shell&quot; class=&quot;headerlink&quot; title=&quot;Shell&quot;&gt;&lt;/a&gt;Shell&lt;/h2&gt;&lt;p&gt;每一个shell脚本都需要一个注解，形如&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta prompt_&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;language-bash&quot;&gt;! /bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Code" scheme="https://www.tanknee.cn/categories/Code/"/>
    
    
      <category term="文件" scheme="https://www.tanknee.cn/tags/%E6%96%87%E4%BB%B6/"/>
    
      <category term="参数" scheme="https://www.tanknee.cn/tags/%E5%8F%82%E6%95%B0/"/>
    
      <category term="linecount" scheme="https://www.tanknee.cn/tags/linecount/"/>
    
      <category term="echo" scheme="https://www.tanknee.cn/tags/echo/"/>
    
      <category term="bin" scheme="https://www.tanknee.cn/tags/bin/"/>
    
      <category term="行计数器" scheme="https://www.tanknee.cn/tags/%E8%A1%8C%E8%AE%A1%E6%95%B0%E5%99%A8/"/>
    
      <category term="line" scheme="https://www.tanknee.cn/tags/line/"/>
    
  </entry>
  
  <entry>
    <title>二月February</title>
    <link href="https://www.tanknee.cn/2020/03/02/555/"/>
    <id>https://www.tanknee.cn/2020/03/02/555/</id>
    <published>2020-03-02T07:19:00.000Z</published>
    <updated>2022-06-17T07:24:21.680Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script>    <div id="aplayer-hbGzlnNb" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="3932159" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><blockquote><p>闰年的二月也没有比普通年份的二月更加特别</p></blockquote><p>在家里的生活平淡的像一盆水，翻不出什么花样。每天早上起来：八点了，那就再睡半个钟头，才七点？那就玩会儿手机，然后跑到电脑前上神经兮兮的网课。</p><p>网课很好的证明了大学里上不上课基本上是<strong>没什么区别</strong>的，除非你真的在听课？<strong>你不会真的有听课吧？</strong></p><p>25号的时候村里终于开放了出去的权限，只有血统纯正的村里人，才能进出无阻，甚至还能在路边打到滴滴。</p><p>那天碰见的滴滴司机是个外省人，老婆孩子都回去了，疫情爆发，自己没来得及回家，导致现在一个人待在异乡，连吃了半个月的面，最后两天甚至连菜叶都没有，迫不得已去拿隔壁阿婆的菜。</p><p>无心评价对错。</p><blockquote><p>村里不给外村人发配菜，外村人家里弹尽粮绝，隔壁阿婆蔬菜满园。</p></blockquote><p>怎么个选法也不必多说吧。反正我家还有火锅吃。</p><p>前几天还看到站在KFC门口点外卖的段子，愣是让外卖小哥站着血赚配送费，没想到自己到了KFC门口时，也活成了段子…</p><p><strong>日子也没啥过头，天天歌舞升平，看片吃肉</strong></p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/2020030276ae2c9ca5514.png"/><p>这一个月看的电影，怕是比我前几年加起来看的都多。在家里把公立里<strong>祖传</strong>的投影仪架起来，投在家里那面潮的不行的破墙上，看着还挺舒服哈哈哈。</p><img src="https://img.tanknee.cn/blogpicbed/2020/07/20200707dfb167a74f198.gif" data-original="https://img.tanknee.cn/blogpicbed/2020/03/2020030247e74e47f31b9.jpg" alt="你永远不知道墙上会出现什么东西"/><blockquote><p>恐怖直播</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; class=&quot;aplayer-secondary-script-marker&quot;&gt;&lt;/script&gt;&lt;script class=&quot;meting-secondary-script-marker&quot; src=&quot;/assets/js/Meting.min.js&quot;&gt;&lt;/script&gt;
    &lt;div id=&quot;aplayer-hbGzlnNb&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot; data-id=&quot;3932159&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#ad7a86&quot;&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;闰年的二月也没有比普通年份的二月更加特别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在家里的生活平淡的像一盆水，翻不出什么花样。每天早上起来：八点了，那就再睡半个钟头，才七点？那就玩会儿手机，然后跑到电脑前上神经兮兮的网课。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Caprice" scheme="https://www.tanknee.cn/categories/Caprice/"/>
    
    
      <category term="生活" scheme="https://www.tanknee.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="server" scheme="https://www.tanknee.cn/tags/server/"/>
    
      <category term="meting" scheme="https://www.tanknee.cn/tags/meting/"/>
    
      <category term="netease" scheme="https://www.tanknee.cn/tags/netease/"/>
    
      <category term="type" scheme="https://www.tanknee.cn/tags/type/"/>
    
      <category term="时候" scheme="https://www.tanknee.cn/tags/%E6%97%B6%E5%80%99/"/>
    
      <category term="疫情" scheme="https://www.tanknee.cn/tags/%E7%96%AB%E6%83%85/"/>
    
      <category term="网课" scheme="https://www.tanknee.cn/tags/%E7%BD%91%E8%AF%BE/"/>
    
      <category term="外村" scheme="https://www.tanknee.cn/tags/%E5%A4%96%E6%9D%91/"/>
    
      <category term="kfc" scheme="https://www.tanknee.cn/tags/kfc/"/>
    
      <category term="滴滴" scheme="https://www.tanknee.cn/tags/%E6%BB%B4%E6%BB%B4/"/>
    
  </entry>
  
</feed>
